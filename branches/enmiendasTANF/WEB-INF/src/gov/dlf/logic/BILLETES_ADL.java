package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class BILLETES_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STAT_CODE = 0;



  public DataStore BILLETES_READ_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).STAT_CODE = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getBILLETES_READ_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).BILLETES_READ_LOC_DSD;
  }


  /**  */
  public static void setBILLETES_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).BILLETES_READ_LOC_DSD = value;
  }


  /**  */
  public static void setBILLETES_READ_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).BILLETES_READ_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTAT_CODE  ( RallyApplication __app )
  {
    return ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).STAT_CODE;
  }


  /**  */
  public static Double getSTAT_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).STAT_CODE );
  }


  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, double value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).STAT_CODE = value;
  }


  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, Object value )
  {
    ( ( BILLETES_ADL ) __app.getADL ( BILLETES_ADL.class ) ).STAT_CODE = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static BILLETES_ADL get ( RallyApplication __app )
  {
    BILLETES_ADL adl = new BILLETES_ADL ( );
    __app.register ( adl, "BILLETES_ADL" );
    __app.setADL ( BILLETES_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    BILLETES_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    BILLETES_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "BILLETES_ADL" );
    if ( rObj != null && rObj instanceof BILLETES_ADL )
    {
      this.app.setADL ( BILLETES_ADL.class, ( BILLETES_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "BILLETES_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "BILLETES_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    if ( ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BILV" ) ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      BILLETES_READ_LOC_DSD = this.dm.create ( "BILLETES_READ_LOC_DSD" );
      OPEN_ID = BILLETES_READ_LOC_DSD.getId ( );
      STAT_CODE = RallyDataStoreException.getDefault ( );
      if ( ! Compare.equals ( STAT_CODE, 0 ) ) 
      {
        this.app.setError ( 0, STAT_CODE );
        this.doReturn ( );
        return; 
      }

      STAT_CODE  = this.dm.reset ( OPEN_ID );

      if ( ! Compare.equals ( STAT_CODE, 0 ) ) 
      {
        this.app.setError ( 1, STAT_CODE );
        this.doReturn ( );
        return; 
      }
      this.dm.setField ( this.dm.get ( "BILLETES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "INGRESOS_CLIENTE_FR" ).getDoubleItem ( "SEGURO_SOCIAL_CLIENTE" ));
      this.dm.setField ( this.dm.get ( "BILLETES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STAT_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
      STAT_CODE  = this.dm.retrieve ( OPEN_ID );

      if ( ! Compare.equals ( STAT_CODE, 0 ) ) 
      {
        this.app.setError ( 2, STAT_CODE );
        this.doReturn ( );
        return; 
      }

      STAT_CODE  = this.dm.firstRow ( OPEN_ID );

      if ( Compare.equals ( STAT_CODE, 0 ) ) 
      {
        this._condition1 = true;
      }
      else
      {
        this._condition1 = false;
      }
      if ( this._condition1 )
      {
        STAT_CODE  = this.dm.dbClose ( OPEN_ID );

        BILLETES_PKT.exec ( this.app );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BILV" ) ) ) 
    {
      if ( this._condition1 )    //      if ( Compare.equals ( STAT_CODE, 0 ) ) 
      {
      }
      else
      {
        STAT_CODE  = this.dm.dbClose ( OPEN_ID );

        BILLETES_INS_PKT.exec ( this.app );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.app.form ( "INGRESOS_CLIENTE_FR" ).getStringItem ( "COD_TIPO_INGRESO" ), "BILV" ) ) ) 
    {
      if ( this._condition1 )    //      if ( Compare.equals ( STAT_CODE, 0 ) ) 
      {
      }
      else
      {
      }
      this.app.form ( "INGRESOS_CLIENTE_FR" ).setItem ( "VLR_CANTIDAD_INGRESO", this.app.COMP_ING_BILL_GBL  );
      if ( Compare.equals ( this.app.FLAG_BILLETE_GBL, 0 ) ) 
      {
        this.app.browseToField ( "INGRESOS_CLIENTE_FR", "COD_TIPO_INGRESO" ); 
      }
      else
      {
        this.app.browseToField ( "INGRESOS_CLIENTE_FR", "DSC_OBS_INGRESO" ); 
      }
      this.app.FLAG_BILLETE_GBL = 1;
      this.app.callCommand ( RallyAppCommandFactory.REFRESH );
      return;
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE BILLETES_ADL;

VAR
  OPEN_ID : NUMBER;
  STAT_CODE : NUMBER;

BEGIN
  IF ((INGRESOS_CLIENTE_FR.COD_TIPO_INGRESO = 'BIAC') OR
     (INGRESOS_CLIENTE_FR.COD_TIPO_INGRESO = 'BIAS') OR
     (INGRESOS_CLIENTE_FR.COD_TIPO_INGRESO = 'BILV')) THEN
      BEGIN
    DB_OPEN(BILLETES_READ_LOC_DSD,OPEN_ID,STAT_CODE);
    IF STAT_CODE <> 0 THEN
     BEGIN
       ERROR(STAT_CODE);
       RETURN;
     END;
    DB_RESET(OPEN_ID,STAT_CODE);
    IF STAT_CODE <> 0 THEN
     BEGIN
       ERROR(STAT_CODE);
       RETURN;
     END;
    BILLETES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE:=INGRESOS_CLIENTE_FR.SEGURO_SOCI
AL_CLIENTE;
    BILLETES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
      
    DB_QUERY(OPEN_ID,STAT_CODE);
    IF STAT_CODE <> 0 THEN
     BEGIN
       ERROR(STAT_CODE);
       RETURN;
     END;
    DB_GET_FIRST(OPEN_ID,STAT_CODE);
    IF STAT_CODE = 0 THEN
      BEGIN
       DB_CLOSE(OPEN_ID,STAT_CODE);            
       CALL BILLETES_PKT;
      END;
    ELSE
      BEGIN
       DB_CLOSE(OPEN_ID,STAT_CODE);            
       CALL BILLETES_INS_PKT;
      END;
         INGRESOS_CLIENTE_FR.VLR_CANTIDAD_INGRESO := COMP_ING_BILL_GBL;
         IF FLAG_BILLETE_GBL=0 THEN
                 SET_CURRENT_FIELD(INGRESOS_CLIENTE_FR.COD_TIPO_INGRESO);
         ELSE
                 SET_CURRENT_FIELD(INGRESOS_CLIENTE_FR.DSC_OBS_INGRESO);
         FLAG_BILLETE_GBL:=1;
         CALL_CMD(REFRESH);
      END;
    
END;
    



--------------------------------------------------------------------- */
