package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SELECT_PARK_CORRECTA_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double NULL_VALUE = 0;

  public double LASTKEY = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setNULL_VALUE  ( RallyApplication __app, Parameter value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).NULL_VALUE = value.getDouble ( );
  }  

  
  /**  */
  public static void setLASTKEY  ( RallyApplication __app, Parameter value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).LASTKEY = value.getDouble ( );
  }  
    



  /**  */
  public static double getNULL_VALUE  ( RallyApplication __app )
  {
    return ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).NULL_VALUE;
  }


  /**  */
  public static Double getNULL_VALUEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).NULL_VALUE );
  }


  /**  */
  public static void setNULL_VALUE  ( RallyApplication __app, double value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).NULL_VALUE = value;
  }


  /**  */
  public static void setNULL_VALUE  ( RallyApplication __app, Object value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).NULL_VALUE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getLASTKEY  ( RallyApplication __app )
  {
    return ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).LASTKEY;
  }


  /**  */
  public static Double getLASTKEYDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).LASTKEY );
  }


  /**  */
  public static void setLASTKEY  ( RallyApplication __app, double value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).LASTKEY = value;
  }


  /**  */
  public static void setLASTKEY  ( RallyApplication __app, Object value )
  {
    ( ( SELECT_PARK_CORRECTA_ADL ) __app.getADL ( SELECT_PARK_CORRECTA_ADL.class ) ).LASTKEY = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static SELECT_PARK_CORRECTA_ADL get ( RallyApplication __app )
  {
    SELECT_PARK_CORRECTA_ADL adl = new SELECT_PARK_CORRECTA_ADL ( );
    __app.register ( adl, "SELECT_PARK_CORRECTA_ADL" );
    __app.setADL ( SELECT_PARK_CORRECTA_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    SELECT_PARK_CORRECTA_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    SELECT_PARK_CORRECTA_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "SELECT_PARK_CORRECTA_ADL" );
    if ( rObj != null && rObj instanceof SELECT_PARK_CORRECTA_ADL )
    {
      this.app.setADL ( SELECT_PARK_CORRECTA_ADL.class, ( SELECT_PARK_CORRECTA_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SELECT_PARK_CORRECTA_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      case 5:  { this.currentStep ++; this.step5 ( this.keyParms ); break; }
      case 6:  { this.currentStep ++; this.step6 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "SELECT_PARK_CORRECTA_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    LASTKEY = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    if ( Compare.equals ( LASTKEY, RallyAppCommandFactory.INSAFTER ) ) 
    {
      this.doReturn ( );
      return;
    }
    NULL_VALUE = TruncService.setNull ( NULL_VALUE  );
    this.app.ANSWER_GBL = "N";
    if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "LI" ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      this.app.setError ( 0, 1010 );
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", 0  );
      CALCULAR_RECLA_RETRO_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "LI" ) ) 
    {
      this.app.browseToField ( "DETERMINAR_RECLAMACION_FR", "PARK_CORRECTA" ); 
      this.doReturn ( );
      return; 
    }
    COMP_NUCLEO_DETER_MENU.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" ), NULL_VALUE ) ) 
    {
      this._condition1 = true;
    }
    else
    {
      this._condition1 = false;
    }
    if ( this._condition1 )
    {
      VERIFICACION_BASES_RECLA_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" ), NULL_VALUE ) ) 
    {
      CALCULAR_RECLA_RETRO_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" ), NULL_VALUE ) ) 
    {
    }
    else
    {
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", 0  );
      VERIFICACION_BASES_RECLA_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step5 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" ), NULL_VALUE ) ) 
    {
    }
    else
    {
      CALCULAR_RECLA_RETRO_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step6 ( ParameterSet ps )
  {
    if ( (
    		( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "ACCION" ), "RECL" ) ) ||
    		( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "ACCION" ), "RREC" ) ) 
    		) 
    		&& ( Compare.gt ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "TOTAL_RECLAMACION" ), 0 ) )  
    	) 
    {
      this.app.browseToField ( "DETERMINAR_RECLAMACION_FR", "PARK_CORRECTA" ); 
    }
    else if ( (
    				( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "ACCION" ), "RETR" ) ) || 
    				( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "ACCION" ), "RRET" ) ) 
    				) 
    		&& ( Compare.gt ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "TOTAL_RETROACTIVO" ), 0 ) )   
    			)
    			{
    				this.app.browseToField ( "DETERMINAR_RECLAMACION_FR", "PARK_CORRECTA" ); 
    			}

  }
}



/* ---------------------------------------------------------------------


     
procedure select_park_correcta_adl;
var 
        null_value      : number;
        LASTKEY : NUMBER;
begin
SET_TRACE();
LASTKEY := GET_CMD();
IF LASTKEY = insafter
   THEN RETURN;

make_null(null_value);
answer_gbl := 'N';
if substr(DETERMINAR_RECLAMACION_FR.COD_SERVICIO,0,2) = 'AT'
then begin
        error(1010);
        DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS := 0;
        call calcular_recla_retro_adl;
        set_current_field(DETERMINAR_RECLAMACION_FR.PARK_CORRECTA);
        return;
     end;
{endif}
{Call_cmd(commit);
CALL_CMD(QBE);
CALL_CMD(QUERY);
}
call comp_nucleo_deter_menu;
{call_cmd(commit);
CALL_CMD(QBE);
CALL_CMD(QUERY);
}
{if answer_gbl = 'S'
then
   begin}

if DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS <> null_value
then
       begin
        call verificacion_bases_recla_adl;
        call calcular_recla_retro_adl;
        end;
else
       begin
        DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS := 0;
        call verificacion_bases_recla_adl;
        call calcular_recla_retro_adl;
        end;

if ((DETERMINAR_RECLAMACION_FR.ACCION = 'RECL') or (DETERMINAR_RECLAMACION_FR.AC
CION = 'RREC'))
   AND  (DETERMINAR_RECLAMACION_FR.TOTAL_RECLAMACION > 0) THEN
        set_current_field(DETERMINAR_RECLAMACION_FR.PARK_CORRECTA);
ELSE
        if ((DETERMINAR_RECLAMACION_FR.ACCION = 'RETR') or (DETERMINAR_RECLAMACI
ON_FR.ACCION = 'RRET'))
           AND  (DETERMINAR_RECLAMACION_FR.TOTAL_RETROACTIVO > 0) THEN
                set_current_field(DETERMINAR_RECLAMACION_FR.PARK_CORRECTA);
{ELSE
                set_current_field(DETERMINAR_RECLAMACION_FR.PARK);}

{   end;
answer_gbl := 'N';}
SET_NOTRACE();
end;
    



--------------------------------------------------------------------- */
