package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class NOTIFICACIONES_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------
    




  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static NOTIFICACIONES_ADL get ( RallyApplication __app )
  {
    NOTIFICACIONES_ADL adl = new NOTIFICACIONES_ADL ( );
    __app.register ( adl, "NOTIFICACIONES_ADL" );
    __app.setADL ( NOTIFICACIONES_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    NOTIFICACIONES_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    NOTIFICACIONES_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "NOTIFICACIONES_ADL" );
    if ( rObj != null && rObj instanceof NOTIFICACIONES_ADL )
    {
      this.app.setADL ( NOTIFICACIONES_ADL.class, ( NOTIFICACIONES_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "NOTIFICACIONES_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "NOTIFICACIONES_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    this.app.COD_ACCESS_GBL = "NOTI";
    SECURITY_ADL.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {

    if ( Compare.equals ( this.app.ACCESS_STATUS_GBL, "FAILURE" ) ) 
    {
      this.app.setError ( 0, 1006 );
      this.doReturn ( );
      return; 
    }
    this.app.SS_JEFE_FAMILIA_GBL = this.app.form ( "SERV_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM" );
    this.app.SS_JEFE_SERVICIO_GBL = this.app.form ( "SERV_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" );
    this.app.COD_SERVICIO_GBL = this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" );
    this.app.SS_JEFE_GBL = this.app.form ( "SERV_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM" );
    this.app.SS_SERV_GBL = this.app.form ( "SERV_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" );
    this.app.COD_SERV_GBL = this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" );
    this.app.SS_CLIENTE_GBL = this.app.form ( "SERV_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" );
    MAIN_MENU_9.exec ( this.app );
    return;

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE NOTIFICACIONES_ADL;

SET_TRACE();
cod_acceSs_gbl := 'NOTI';
CALL SECURITY_ADL;
IF ACCESS_STATUS_GBL = 'FAILURE' 
   THEN BEGIN
        ERROR(1006);
        RETURN;
        END;

SS_JEFE_FAMILIA_GBL:=SERV_FAM_FRM.SEGURO_SOCIAL_JEFE_FAM;
SS_JEFE_SERVICIO_GBL:=SERV_FAM_FRM.SEGURO_SOCIAL_JEFE_SERV;
COD_SERVICIO_GBL:=SERV_FAM_FRM.COD_SERVICIO;
{modificacion para accesar certificacio y resumen a travez de mantenimiento}
ss_jefe_gbl :=SERV_FAM_FRM.SEGURO_SOCIAL_JEFE_FAM;
ss_serv_gbl:=SERV_FAM_FRM.SEGURO_SOCIAL_JEFE_SERV;
cod_serv_gbl:=SERV_FAM_FRM.COD_SERVICIO;
SS_CLIENTE_GBL := SERV_FAM_FRM.SEGURO_SOCIAL_JEFE_SERV;

CALL MAIN_MENU_9;

SET_NOTRACE();

    



--------------------------------------------------------------------- */
