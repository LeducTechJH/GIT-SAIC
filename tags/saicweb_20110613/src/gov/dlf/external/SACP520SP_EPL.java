package gov.dlf.external;



import gov.dlf.facade.SAIC_DMQ_ORA_Application;

import java.sql.CallableStatement;
import java.sql.SQLException;

import net.maintrend.appmanager.Application;
import net.maintrend.interfaces.IRegisteredObject;
import net.maintrend.interlink.OracleRdbClient;
import net.maintrend.interlink.Parameter;
import net.maintrend.interlink.ParameterSet;
import net.maintrend.rallyengine.RallyApplication;
import net.maintrend.rallyengine.RallyDataManager;
import net.maintrend.util.Debug;
import net.maintrend.util.StringService;



/**
 * 
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SACP520SP_EPL
     extends OracleRdbClient 
  implements IRegisteredObject 
{
  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app = null;
  /**  */
  protected String userName = "";



  // -------------------------------------------------------------------
  // ----------   Constructors and Supporting Methods   ----------------

  /**
   *
   */
  public SACP520SP_EPL ( )
  {
    super ( );
    this.setProcedureName ( "TRANSFER_SUB_PROC" );
    this.exceptionTitle = "SACP520SP_EPL.process ( ) - ";
    this.parmCount = 1;
  }



  // -------------------------------------------------------------------
  // ----------   Constructors and Supporting Methods   ----------------

  /**
   * 
   */
  public static SACP520SP_EPL exec ( SAIC_DMQ_ORA_Application __app, ParameterSet ps )
  {
    SACP520SP_EPL link = new SACP520SP_EPL ( );
    link.setApplication ( __app );
    link.execute ( ps );
    return link;
  }


  /**
   *
   */
  public static SACP520SP_EPL exec ( SAIC_DMQ_ORA_Application __app )
  {
    return SACP520SP_EPL.exec ( __app, null );
  }



  // -------------------------------------------------------------------
  // ----------   IRegisteredObject Implementation   -------------------

  /**
   * 
   * @param rApp
   */
  public void setApplication ( RallyApplication rApp )
  {
    if ( rApp != null ) this.app = ( SAIC_DMQ_ORA_Application ) rApp;
    if ( this.app != null )
    {
      this.setDataManager ( ( RallyDataManager ) this.app.getDataManager ( ) );
    }
  }


  /**
   * 
   * @param application
   */
  public void setApplication ( Application application )
  {
    this.setApplication ( ( RallyApplication ) application ); 
  }


  /**
   * 
   * @return
   */
  public boolean isSelfClosing ( )
  {
    return true;
  }


  /**
   *
   */
  public void halt ( )
  {
    // Empty
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   *
   */
  protected void createParameters ( ParameterSet ps )
  {
    Parameter parm;
    this.parameters = ps;
    this.parameters.reset ( );
    parm = this.parameters.add ( "0", Parameter.READWRITE, Parameter.STRING );
    this.userName = StringService.replaceAll ( this.app.getUSERNAME ( ), " ", "" );
    parm.set ( this.userName );
  }


  /**
   *
   */
  protected void createParameters ( )
  {
    this.createParameters ( new ParameterSet ( ) );
  }


  /**
   *
   */
  public ParameterSet run ( )
  {
    this.process ( );
    return this.getParameters ( );
  }


  /**
   * IRegisteredObject implementation
   * 
   * does not use "process" method, declared by the ancestor
   * 
   * @param ps
   */
  public void execute ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SACP520SP_EPL" );

    if ( ps != null && ps.size ( ) > 0 )
    {
      this.createParameters ( ps );
    }
    else
    {
      this.createParameters ( );
    }

    this.parameters.setParameter ( 0, Parameter.READWRITE, Parameter.STRING );

    String exceptionMessage = "";
    boolean wasException = false;

    String exceptionText = "";

    // Copy of the ancestor's "process" method's code
    
    Debug.println ( Debug.EXTERNAL, this, "before processing:\r\n" + this.parameters.getXml ( ) );
    CallableStatement cStmt = null;
    try
    {
      cStmt = this.prepareExecStatement ( );
      if ( cStmt != null )
      {
        Debug.println ( Debug.EXTERNAL, this, "executing:\r\n" + cStmt.toString ( ) );
        cStmt.executeUpdate ( );
        this.setParamtersFromExecResult ( cStmt );
        cStmt.close ( );
      }
    }
    catch ( SQLException ex )
    {
      Debug.println ( Debug.DBEXCEPTION, this.exceptionTitle + "SQLException:" +
      "\r\nErrorCode = " + ex.getErrorCode ( ) +
      "\r\nMessage   = " + ex.getMessage   ( ) +
      "\r\nSQLState  = " + ex.getSQLState  ( ) );
      //Debug.printStackTrace ( Debug.DBEXCEPTION, ex );
      wasException = true;
      exceptionText = ex.getMessage ( );
    }
    catch ( Exception e )
    {
      Debug.println ( Debug.EXCEPTION, this.exceptionTitle + "Exception: " );
      Debug.printStackTrace ( Debug.EXCEPTION, e );
      wasException = true;
      exceptionText = e.getMessage ( );
    }

    if ( wasException )
    {
      try
      {
        String executedString = "insert into transfers_log ";
        executedString += "( seguro_social_cliente, cod_servicio, usuario, sql_code )";
        executedString += "select "; 
        executedString += "seguro_social_jefe_serv, cod_servicio, '";
        executedString += this.userName;
        executedString += "', '";
        executedString += exceptionText;
        executedString += "' ";
        executedString += "from transfers "; 
        executedString += " where usuario = '";
        executedString += this.userName;
        executedString += "' group by seguro_social_jefe_serv , cod_servicio";
        this.con.prepareStatement ( executedString ).executeUpdate ( );
      }
      catch ( SQLException ee )
      {
        Debug.print ( Debug.DBEXCEPTION, this.exceptionTitle + "Exception: " );
        Debug.printStackTrace ( Debug.DBEXCEPTION, ee );
      }
    }

    Debug.println ( Debug.EXTERNAL, this, "after processing:\r\n" + this.parameters.getXml ( ) );
  }
}
