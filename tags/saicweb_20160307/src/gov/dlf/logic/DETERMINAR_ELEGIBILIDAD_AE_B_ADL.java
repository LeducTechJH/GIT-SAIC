package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class DETERMINAR_ELEGIBILIDAD_AE_B_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double OPEN2_ID = 0;

  public double OPEN3_ID = 0;

  public double OPEN4_ID = 0;

  public double OPEN5_ID = 0;

  public double OPEN6_ID = 0;

  public double OPEN7_ID = 0;

  public double OPEN12_ID = 0;

  public double STATUS_CODE = 0;

  public double STATUS2_CODE = 0;

  public double STATUS7_CODE = 0;

  public double STATUS12_CODE = 0;

  public double AYUDA_PERMITIDA = 0;

  public double FAM_ID = 0;

  public double SERVICIO_BENEFICIO = 0;

  public double SAVE_SSN = 0;

  public double PERSONA_TRABAJA_FLG = 0;

  public double NUM_PADRES_TRABAJAN = 0;

  public double RECURSOS_ACUM = 0;

  public double EDAD_IND = 0;

  public double INGRESO_BRUTO = 0;
  
  public double INGRESOS_NUCLEO = 0;
  
  public double GASTOS_NUCLEO = 0;

  public double SALARIO = 0;

  public double SEG_SOC = 0;

  public double OTROS2 = 0;

  public double OTROS = 0;

  public double INGRESO_NETO = 0;

  public double CUIDO_MENOR = 0;

  public double CUIDO = 0;

  public double DEDUCCION_INGRESO = 0;

  public double INCAPACITADO = 0;

  public double BENEFICIO = 0;

  public double TOTAL_CUIDO = 0;

  public double GASTOS_INHE = 0;

  public double GASTOS_INHERENTES = 0;

  public double RESTE_30 = 0;

  public double CENTAVOS = 0;

  public double ING_TEMP = 0;

  public double EXCENCION_SAL = 0;

  public double EXCENCION_TRABAJO = 0;

  public double EXCENCION_PROD = 0;

  public double EXCENCION_ALBERGUE = 0;

  public double DEFICIT = 0;

  public double SALARIO_CONYUGUE = 0;

  public double INGRESO_ACREDITABLE = 0;

  public double TOT_INGRE_ACREDI = 0;

  public double NECESIDAD_AJUSTADA = 0;

  public double TOT_AJUSTADA = 0;

  public double TOTAL_OTROS = 0;

  public double BENEFICIO_AUTO = 0;

  public double MENOR = 0;

  public double PARTE_PROP = 0;

  public double NUM_FAMILIA = 0;

  public double INGRESO_BRUTO_PADRES = 0;

  public double GASTOS_PADRES = 0;

  public double SS_MENOR = 0;

  public double EXC_PROD = 0;

  public double ADULTO = 0;

  public double NINOS = 0;

  public double REHABILITACION = 0;

  public double SALA = 0;

  public double ADIE = 0;

  public double NPRO = 0;
  
  public double NUCLEO = 0;

  public double CONY_SALA = 0;

  public double CONY_ADIE = 0;

  public double CONY_NPRO = 0;

  public double DEDUC_ALBE = 0;

  public double GASTOS_ALBE = 0;

  public double CONY_PROD = 0;

  public double CONYUGUE_INHERENTES = 0;

  public double ACREDITABLE_CONYUGUE = 0;

  public double ACREDITABLE_CONYUGUE_2 = 0;

  public double GASTOS_IN = 0;

  public double OTROS_PADRES = 0;

  public double OTROS_CONY = 0;

  public double AE_COUNT = 0;

  public double ESTA_CONY = 0;

  public double ING_BRUTO_MENOR = 0;

  public double PROD = 0;

  public double ALBE = 0;

  public double AYUD = 0;



  public String SERVICIO_STATUS = null;

  public String INELEGIBLE_REG = null;

  public String INELEGIBLE_EMER = null;

  public String RAZON = null;

  public String INELEGIBLE_INGRE_BRUTO = null;

  public String ELEGIBLE_REG = null;

  public String ELEGIBLE_EMER = null;

  public String STATUS = null;

  public Date FCH_EMISION = null;

  public DataStore NUCLEO_SERVICIO_DSD = null;

  public DataStore CLIENTES2_DSD = null;

  public DataStore RECURSOS_NUCLEO_DSD = null;

  public DataStore BENEFICIOS_PAN_RO_DSD = null;

  public DataStore INGRESOS_NUCLEO_DSD = null;

  public DataStore GASTOS_NUCLEO_DSD = null;

  public DataStore DETERMINA_RO_DSD = null;

  public DataStore GENERAL_TBL_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN2_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN3_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN3_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN4_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN4_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN5_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN5_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN6_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN6_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN7_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN12_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN12_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS2_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS2_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS7_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS7_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS12_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS12_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setAYUDA_PERMITIDA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUDA_PERMITIDA = value.getDouble ( );
  }  

  
  /**  */
  public static void setFAM_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FAM_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSERVICIO_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_STATUS = value.getString ( );
  }  

  
  /**  */
  public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_BENEFICIO = value.getDouble ( );
  }  

  
  /**  */
  public static void setSAVE_SSN  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SAVE_SSN = value.getDouble ( );
  }  

  
  /**  */
  public static void setPERSONA_TRABAJA_FLG  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PERSONA_TRABAJA_FLG = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUM_PADRES_TRABAJAN  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_PADRES_TRABAJAN = value.getDouble ( );
  }  

  
  /**  */
  public static void setRECURSOS_ACUM  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_ACUM = value.getDouble ( );
  }  

  
  /**  */
  public static void setEDAD_IND  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EDAD_IND = value.getDouble ( );
  }  

  
  /**  */
  public static void setINELEGIBLE_REG  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_REG = value.getString ( );
  }  

  
  /**  */
  public static void setINELEGIBLE_EMER  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_EMER = value.getString ( );
  }  

  
  /**  */
  public static void setRAZON  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RAZON = value.getString ( );
  }  

  
  /**  */
  public static void setINGRESO_BRUTO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO = value.getDouble ( );
  }  

  
  /**  */
  public static void setSALARIO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO = value.getDouble ( );
  }  

  
  /**  */
  public static void setSEG_SOC  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SEG_SOC = value.getDouble ( );
  }  

  
  /**  */
  public static void setOTROS2  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS2 = value.getDouble ( );
  }  

  
  /**  */
  public static void setOTROS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS = value.getDouble ( );
  }  

  
  /**  */
  public static void setINGRESO_NETO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_NETO = value.getDouble ( );
  }  

  
  /**  */
  public static void setCUIDO_MENOR  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO_MENOR = value.getDouble ( );
  }  

  
  /**  */
  public static void setCUIDO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO = value.getDouble ( );
  }  

  
  /**  */
  public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_INGRE_BRUTO = value.getString ( );
  }  

  
  /**  */
  public static void setDEDUCCION_INGRESO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUCCION_INGRESO = value.getDouble ( );
  }  

  
  /**  */
  public static void setINCAPACITADO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INCAPACITADO = value.getDouble ( );
  }  

  
  /**  */
  public static void setBENEFICIO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO = value.getDouble ( );
  }  

  
  /**  */
  public static void setELEGIBLE_REG  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_REG = value.getString ( );
  }  

  
  /**  */
  public static void setELEGIBLE_EMER  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_EMER = value.getString ( );
  }  

  
  /**  */
  public static void setTOTAL_CUIDO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_CUIDO = value.getDouble ( );
  }  

  
  /**  */
  public static void setGASTOS_INHE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHE = value.getDouble ( );
  }  

  
  /**  */
  public static void setGASTOS_INHERENTES  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHERENTES = value.getDouble ( );
  }  

  
  /**  */
  public static void setRESTE_30  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RESTE_30 = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS = value.getString ( );
  }  

  
  /**  */
  public static void setCENTAVOS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CENTAVOS = value.getDouble ( );
  }  

  
  /**  */
  public static void setING_TEMP  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_TEMP = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXCENCION_SAL  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_SAL = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXCENCION_TRABAJO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_TRABAJO = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXCENCION_PROD  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_PROD = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXCENCION_ALBERGUE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_ALBERGUE = value.getDouble ( );
  }  

  
  /**  */
  public static void setDEFICIT  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEFICIT = value.getDouble ( );
  }  

  
  /**  */
  public static void setSALARIO_CONYUGUE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO_CONYUGUE = value.getDouble ( );
  }  

  
  /**  */
  public static void setINGRESO_ACREDITABLE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_ACREDITABLE = value.getDouble ( );
  }  

  
  /**  */
  public static void setTOT_INGRE_ACREDI  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_INGRE_ACREDI = value.getDouble ( );
  }  

  
  /**  */
  public static void setNECESIDAD_AJUSTADA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NECESIDAD_AJUSTADA = value.getDouble ( );
  }  

  
  /**  */
  public static void setTOT_AJUSTADA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_AJUSTADA = value.getDouble ( );
  }  

  
  /**  */
  public static void setTOTAL_OTROS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_OTROS = value.getDouble ( );
  }  

  
  /**  */
  public static void setBENEFICIO_AUTO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO_AUTO = value.getDouble ( );
  }  

  
  /**  */
  public static void setMENOR  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).MENOR = value.getDouble ( );
  }  

  
  /**  */
  public static void setPARTE_PROP  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PARTE_PROP = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUM_FAMILIA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_FAMILIA = value.getDouble ( );
  }  

  
  /**  */
  public static void setINGRESO_BRUTO_PADRES  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO_PADRES = value.getDouble ( );
  }  

  
  /**  */
  public static void setGASTOS_PADRES  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_PADRES = value.getDouble ( );
  }  

  
  /**  */
  public static void setSS_MENOR  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SS_MENOR = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXC_PROD  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXC_PROD = value.getDouble ( );
  }  

  
  /**  */
  public static void setADULTO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADULTO = value.getDouble ( );
  }  

  
  /**  */
  public static void setNINOS  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NINOS = value.getDouble ( );
  }  

  
  /**  */
  public static void setREHABILITACION  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).REHABILITACION = value.getDouble ( );
  }  

  
  /**  */
  public static void setSALA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALA = value.getDouble ( );
  }  

  
  /**  */
  public static void setADIE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADIE = value.getDouble ( );
  }  

  
  /**  */
  public static void setNPRO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NPRO = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONY_SALA  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_SALA = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONY_ADIE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_ADIE = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONY_NPRO  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_NPRO = value.getDouble ( );
  }  

  
  /**  */
  public static void setDEDUC_ALBE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUC_ALBE = value.getDouble ( );
  }  

  
  /**  */
  public static void setGASTOS_ALBE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_ALBE = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONY_PROD  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_PROD = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONYUGUE_INHERENTES  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONYUGUE_INHERENTES = value.getDouble ( );
  }  

  
  /**  */
  public static void setACREDITABLE_CONYUGUE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE = value.getDouble ( );
  }  

  
  /**  */
  public static void setACREDITABLE_CONYUGUE_2  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE_2 = value.getDouble ( );
  }  

  
  /**  */
  public static void setGASTOS_IN  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_IN = value.getDouble ( );
  }  

  
  /**  */
  public static void setOTROS_PADRES  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_PADRES = value.getDouble ( );
  }  

  
  /**  */
  public static void setOTROS_CONY  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_CONY = value.getDouble ( );
  }  

  
  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AE_COUNT = value.getDouble ( );
  }  

  
  /**  */
  public static void setESTA_CONY  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ESTA_CONY = value.getDouble ( );
  }  

  
  /**  */
  public static void setING_BRUTO_MENOR  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_BRUTO_MENOR = value.getDouble ( );
  }  

  
  /**  */
  public static void setPROD  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PROD = value.getDouble ( );
  }  

  
  /**  */
  public static void setALBE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ALBE = value.getDouble ( );
  }  

  
  /**  */
  public static void setAYUD  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUD = value.getDouble ( );
  }  

  
  /**  */
  public static void setFCH_EMISION  ( RallyApplication __app, Parameter value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FCH_EMISION = value.getDate ( );
  }  
    


  /**  */
  public static String getSERVICIO_STATUS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_STATUS;
  }


  /**  */
  public static void setSERVICIO_STATUS  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_STATUS = value;
  }


  /**  */
  public static void setSERVICIO_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_STATUS = ( String ) value;
  }



  /**  */
  public static String getINELEGIBLE_REG  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_REG;
  }


  /**  */
  public static void setINELEGIBLE_REG  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_REG = value;
  }


  /**  */
  public static void setINELEGIBLE_REG  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_REG = ( String ) value;
  }



  /**  */
  public static String getINELEGIBLE_EMER  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_EMER;
  }


  /**  */
  public static void setINELEGIBLE_EMER  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_EMER = value;
  }


  /**  */
  public static void setINELEGIBLE_EMER  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_EMER = ( String ) value;
  }



  /**  */
  public static String getRAZON  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RAZON;
  }


  /**  */
  public static void setRAZON  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RAZON = value;
  }


  /**  */
  public static void setRAZON  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RAZON = ( String ) value;
  }



  /**  */
  public static String getINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_INGRE_BRUTO;
  }


  /**  */
  public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_INGRE_BRUTO = value;
  }


  /**  */
  public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INELEGIBLE_INGRE_BRUTO = ( String ) value;
  }



  /**  */
  public static String getELEGIBLE_REG  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_REG;
  }


  /**  */
  public static void setELEGIBLE_REG  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_REG = value;
  }


  /**  */
  public static void setELEGIBLE_REG  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_REG = ( String ) value;
  }



  /**  */
  public static String getELEGIBLE_EMER  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_EMER;
  }


  /**  */
  public static void setELEGIBLE_EMER  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_EMER = value;
  }


  /**  */
  public static void setELEGIBLE_EMER  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ELEGIBLE_EMER = ( String ) value;
  }



  /**  */
  public static String getSTATUS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS;
  }


  /**  */
  public static void setSTATUS  ( RallyApplication __app, String value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS = value;
  }


  /**  */
  public static void setSTATUS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS = ( String ) value;
  }



  /**  */
  public static Date getFCH_EMISION  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FCH_EMISION;
  }


  /**  */
  public static void setFCH_EMISION  ( RallyApplication __app, Date value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FCH_EMISION = value;
  }


  /**  */
  public static void setFCH_EMISION  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FCH_EMISION = ( Date ) value;
  }



  /**  */
  public static DataStore getNUCLEO_SERVICIO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUCLEO_SERVICIO_DSD;
  }


  /**  */
  public static void setNUCLEO_SERVICIO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUCLEO_SERVICIO_DSD = value;
  }


  /**  */
  public static void setNUCLEO_SERVICIO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUCLEO_SERVICIO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getCLIENTES2_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CLIENTES2_DSD;
  }


  /**  */
  public static void setCLIENTES2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CLIENTES2_DSD = value;
  }


  /**  */
  public static void setCLIENTES2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CLIENTES2_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getRECURSOS_NUCLEO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_NUCLEO_DSD;
  }


  /**  */
  public static void setRECURSOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_NUCLEO_DSD = value;
  }


  /**  */
  public static void setRECURSOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_NUCLEO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIOS_PAN_RO_DSD;
  }


  /**  */
  public static void setBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIOS_PAN_RO_DSD = value;
  }


  /**  */
  public static void setBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIOS_PAN_RO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getINGRESOS_NUCLEO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESOS_NUCLEO_DSD;
  }


  /**  */
  public static void setINGRESOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESOS_NUCLEO_DSD = value;
  }


  /**  */
  public static void setINGRESOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESOS_NUCLEO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getGASTOS_NUCLEO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_NUCLEO_DSD;
  }


  /**  */
  public static void setGASTOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_NUCLEO_DSD = value;
  }


  /**  */
  public static void setGASTOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_NUCLEO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getDETERMINA_RO_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DETERMINA_RO_DSD;
  }


  /**  */
  public static void setDETERMINA_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DETERMINA_RO_DSD = value;
  }


  /**  */
  public static void setDETERMINA_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DETERMINA_RO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getGENERAL_TBL_DSD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GENERAL_TBL_DSD;
  }


  /**  */
  public static void setGENERAL_TBL_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GENERAL_TBL_DSD = value;
  }


  /**  */
  public static void setGENERAL_TBL_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GENERAL_TBL_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN2_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN2_ID;
  }


  /**  */
  public static Double getOPEN2_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN2_ID );
  }


  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN2_ID = value;
  }


  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN2_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN3_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN3_ID;
  }


  /**  */
  public static Double getOPEN3_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN3_ID );
  }


  /**  */
  public static void setOPEN3_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN3_ID = value;
  }


  /**  */
  public static void setOPEN3_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN3_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN4_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN4_ID;
  }


  /**  */
  public static Double getOPEN4_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN4_ID );
  }


  /**  */
  public static void setOPEN4_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN4_ID = value;
  }


  /**  */
  public static void setOPEN4_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN4_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN5_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN5_ID;
  }


  /**  */
  public static Double getOPEN5_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN5_ID );
  }


  /**  */
  public static void setOPEN5_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN5_ID = value;
  }


  /**  */
  public static void setOPEN5_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN5_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN6_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN6_ID;
  }


  /**  */
  public static Double getOPEN6_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN6_ID );
  }


  /**  */
  public static void setOPEN6_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN6_ID = value;
  }


  /**  */
  public static void setOPEN6_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN6_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN7_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN7_ID;
  }


  /**  */
  public static Double getOPEN7_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN7_ID );
  }


  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN7_ID = value;
  }


  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN7_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN12_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN12_ID;
  }


  /**  */
  public static Double getOPEN12_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN12_ID );
  }


  /**  */
  public static void setOPEN12_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN12_ID = value;
  }


  /**  */
  public static void setOPEN12_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OPEN12_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_CODE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS_CODE;
  }


  /**  */
  public static Double getSTATUS_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS_CODE );
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS_CODE = value;
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS2_CODE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS2_CODE;
  }


  /**  */
  public static Double getSTATUS2_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS2_CODE );
  }


  /**  */
  public static void setSTATUS2_CODE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS2_CODE = value;
  }


  /**  */
  public static void setSTATUS2_CODE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS2_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS7_CODE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS7_CODE;
  }


  /**  */
  public static Double getSTATUS7_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS7_CODE );
  }


  /**  */
  public static void setSTATUS7_CODE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS7_CODE = value;
  }


  /**  */
  public static void setSTATUS7_CODE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS7_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS12_CODE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS12_CODE;
  }


  /**  */
  public static Double getSTATUS12_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS12_CODE );
  }


  /**  */
  public static void setSTATUS12_CODE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS12_CODE = value;
  }


  /**  */
  public static void setSTATUS12_CODE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).STATUS12_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAYUDA_PERMITIDA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUDA_PERMITIDA;
  }


  /**  */
  public static Double getAYUDA_PERMITIDADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUDA_PERMITIDA );
  }


  /**  */
  public static void setAYUDA_PERMITIDA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUDA_PERMITIDA = value;
  }


  /**  */
  public static void setAYUDA_PERMITIDA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUDA_PERMITIDA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getFAM_ID  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FAM_ID;
  }


  /**  */
  public static Double getFAM_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FAM_ID );
  }


  /**  */
  public static void setFAM_ID  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FAM_ID = value;
  }


  /**  */
  public static void setFAM_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).FAM_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSERVICIO_BENEFICIO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_BENEFICIO;
  }


  /**  */
  public static Double getSERVICIO_BENEFICIODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_BENEFICIO );
  }


  /**  */
  public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_BENEFICIO = value;
  }


  /**  */
  public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SERVICIO_BENEFICIO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSAVE_SSN  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SAVE_SSN;
  }


  /**  */
  public static Double getSAVE_SSNDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SAVE_SSN );
  }


  /**  */
  public static void setSAVE_SSN  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SAVE_SSN = value;
  }


  /**  */
  public static void setSAVE_SSN  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SAVE_SSN = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getPERSONA_TRABAJA_FLG  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PERSONA_TRABAJA_FLG;
  }


  /**  */
  public static Double getPERSONA_TRABAJA_FLGDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PERSONA_TRABAJA_FLG );
  }


  /**  */
  public static void setPERSONA_TRABAJA_FLG  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PERSONA_TRABAJA_FLG = value;
  }


  /**  */
  public static void setPERSONA_TRABAJA_FLG  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PERSONA_TRABAJA_FLG = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUM_PADRES_TRABAJAN  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_PADRES_TRABAJAN;
  }


  /**  */
  public static Double getNUM_PADRES_TRABAJANDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_PADRES_TRABAJAN );
  }


  /**  */
  public static void setNUM_PADRES_TRABAJAN  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_PADRES_TRABAJAN = value;
  }


  /**  */
  public static void setNUM_PADRES_TRABAJAN  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_PADRES_TRABAJAN = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRECURSOS_ACUM  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_ACUM;
  }


  /**  */
  public static Double getRECURSOS_ACUMDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_ACUM );
  }


  /**  */
  public static void setRECURSOS_ACUM  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_ACUM = value;
  }


  /**  */
  public static void setRECURSOS_ACUM  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RECURSOS_ACUM = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEDAD_IND  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EDAD_IND;
  }


  /**  */
  public static Double getEDAD_INDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EDAD_IND );
  }


  /**  */
  public static void setEDAD_IND  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EDAD_IND = value;
  }


  /**  */
  public static void setEDAD_IND  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EDAD_IND = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINGRESO_BRUTO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO;
  }


  /**  */
  public static Double getINGRESO_BRUTODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO );
  }


  /**  */
  public static void setINGRESO_BRUTO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO = value;
  }


  /**  */
  public static void setINGRESO_BRUTO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSALARIO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO;
  }


  /**  */
  public static Double getSALARIODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO );
  }


  /**  */
  public static void setSALARIO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO = value;
  }


  /**  */
  public static void setSALARIO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSEG_SOC  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SEG_SOC;
  }


  /**  */
  public static Double getSEG_SOCDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SEG_SOC );
  }


  /**  */
  public static void setSEG_SOC  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SEG_SOC = value;
  }


  /**  */
  public static void setSEG_SOC  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SEG_SOC = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOTROS2  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS2;
  }


  /**  */
  public static Double getOTROS2Double ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS2 );
  }


  /**  */
  public static void setOTROS2  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS2 = value;
  }


  /**  */
  public static void setOTROS2  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS2 = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOTROS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS;
  }


  /**  */
  public static Double getOTROSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS );
  }


  /**  */
  public static void setOTROS  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS = value;
  }


  /**  */
  public static void setOTROS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINGRESO_NETO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_NETO;
  }


  /**  */
  public static Double getINGRESO_NETODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_NETO );
  }


  /**  */
  public static void setINGRESO_NETO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_NETO = value;
  }


  /**  */
  public static void setINGRESO_NETO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_NETO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCUIDO_MENOR  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO_MENOR;
  }


  /**  */
  public static Double getCUIDO_MENORDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO_MENOR );
  }


  /**  */
  public static void setCUIDO_MENOR  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO_MENOR = value;
  }


  /**  */
  public static void setCUIDO_MENOR  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO_MENOR = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCUIDO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO;
  }


  /**  */
  public static Double getCUIDODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO );
  }


  /**  */
  public static void setCUIDO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO = value;
  }


  /**  */
  public static void setCUIDO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CUIDO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getDEDUCCION_INGRESO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUCCION_INGRESO;
  }


  /**  */
  public static Double getDEDUCCION_INGRESODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUCCION_INGRESO );
  }


  /**  */
  public static void setDEDUCCION_INGRESO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUCCION_INGRESO = value;
  }


  /**  */
  public static void setDEDUCCION_INGRESO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUCCION_INGRESO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINCAPACITADO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INCAPACITADO;
  }


  /**  */
  public static Double getINCAPACITADODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INCAPACITADO );
  }


  /**  */
  public static void setINCAPACITADO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INCAPACITADO = value;
  }


  /**  */
  public static void setINCAPACITADO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INCAPACITADO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getBENEFICIO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO;
  }


  /**  */
  public static Double getBENEFICIODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO );
  }


  /**  */
  public static void setBENEFICIO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO = value;
  }


  /**  */
  public static void setBENEFICIO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getTOTAL_CUIDO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_CUIDO;
  }


  /**  */
  public static Double getTOTAL_CUIDODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_CUIDO );
  }


  /**  */
  public static void setTOTAL_CUIDO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_CUIDO = value;
  }


  /**  */
  public static void setTOTAL_CUIDO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_CUIDO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getGASTOS_INHE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHE;
  }


  /**  */
  public static Double getGASTOS_INHEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHE );
  }


  /**  */
  public static void setGASTOS_INHE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHE = value;
  }


  /**  */
  public static void setGASTOS_INHE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getGASTOS_INHERENTES  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHERENTES;
  }


  /**  */
  public static Double getGASTOS_INHERENTESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHERENTES );
  }


  /**  */
  public static void setGASTOS_INHERENTES  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHERENTES = value;
  }


  /**  */
  public static void setGASTOS_INHERENTES  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_INHERENTES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRESTE_30  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RESTE_30;
  }


  /**  */
  public static Double getRESTE_30Double ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RESTE_30 );
  }


  /**  */
  public static void setRESTE_30  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RESTE_30 = value;
  }


  /**  */
  public static void setRESTE_30  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).RESTE_30 = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCENTAVOS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CENTAVOS;
  }


  /**  */
  public static Double getCENTAVOSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CENTAVOS );
  }


  /**  */
  public static void setCENTAVOS  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CENTAVOS = value;
  }


  /**  */
  public static void setCENTAVOS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CENTAVOS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getING_TEMP  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_TEMP;
  }


  /**  */
  public static Double getING_TEMPDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_TEMP );
  }


  /**  */
  public static void setING_TEMP  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_TEMP = value;
  }


  /**  */
  public static void setING_TEMP  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_TEMP = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEXCENCION_SAL  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_SAL;
  }


  /**  */
  public static Double getEXCENCION_SALDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_SAL );
  }


  /**  */
  public static void setEXCENCION_SAL  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_SAL = value;
  }


  /**  */
  public static void setEXCENCION_SAL  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_SAL = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEXCENCION_TRABAJO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_TRABAJO;
  }


  /**  */
  public static Double getEXCENCION_TRABAJODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_TRABAJO );
  }


  /**  */
  public static void setEXCENCION_TRABAJO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_TRABAJO = value;
  }


  /**  */
  public static void setEXCENCION_TRABAJO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_TRABAJO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEXCENCION_PROD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_PROD;
  }


  /**  */
  public static Double getEXCENCION_PRODDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_PROD );
  }


  /**  */
  public static void setEXCENCION_PROD  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_PROD = value;
  }


  /**  */
  public static void setEXCENCION_PROD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_PROD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEXCENCION_ALBERGUE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_ALBERGUE;
  }


  /**  */
  public static Double getEXCENCION_ALBERGUEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_ALBERGUE );
  }


  /**  */
  public static void setEXCENCION_ALBERGUE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_ALBERGUE = value;
  }


  /**  */
  public static void setEXCENCION_ALBERGUE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXCENCION_ALBERGUE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getDEFICIT  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEFICIT;
  }


  /**  */
  public static Double getDEFICITDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEFICIT );
  }


  /**  */
  public static void setDEFICIT  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEFICIT = value;
  }


  /**  */
  public static void setDEFICIT  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEFICIT = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSALARIO_CONYUGUE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO_CONYUGUE;
  }


  /**  */
  public static Double getSALARIO_CONYUGUEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO_CONYUGUE );
  }


  /**  */
  public static void setSALARIO_CONYUGUE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO_CONYUGUE = value;
  }


  /**  */
  public static void setSALARIO_CONYUGUE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALARIO_CONYUGUE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINGRESO_ACREDITABLE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_ACREDITABLE;
  }


  /**  */
  public static Double getINGRESO_ACREDITABLEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_ACREDITABLE );
  }


  /**  */
  public static void setINGRESO_ACREDITABLE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_ACREDITABLE = value;
  }


  /**  */
  public static void setINGRESO_ACREDITABLE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_ACREDITABLE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getTOT_INGRE_ACREDI  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_INGRE_ACREDI;
  }


  /**  */
  public static Double getTOT_INGRE_ACREDIDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_INGRE_ACREDI );
  }


  /**  */
  public static void setTOT_INGRE_ACREDI  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_INGRE_ACREDI = value;
  }


  /**  */
  public static void setTOT_INGRE_ACREDI  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_INGRE_ACREDI = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNECESIDAD_AJUSTADA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NECESIDAD_AJUSTADA;
  }


  /**  */
  public static Double getNECESIDAD_AJUSTADADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NECESIDAD_AJUSTADA );
  }


  /**  */
  public static void setNECESIDAD_AJUSTADA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NECESIDAD_AJUSTADA = value;
  }


  /**  */
  public static void setNECESIDAD_AJUSTADA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NECESIDAD_AJUSTADA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getTOT_AJUSTADA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_AJUSTADA;
  }


  /**  */
  public static Double getTOT_AJUSTADADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_AJUSTADA );
  }


  /**  */
  public static void setTOT_AJUSTADA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_AJUSTADA = value;
  }


  /**  */
  public static void setTOT_AJUSTADA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOT_AJUSTADA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getTOTAL_OTROS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_OTROS;
  }


  /**  */
  public static Double getTOTAL_OTROSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_OTROS );
  }


  /**  */
  public static void setTOTAL_OTROS  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_OTROS = value;
  }


  /**  */
  public static void setTOTAL_OTROS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).TOTAL_OTROS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getBENEFICIO_AUTO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO_AUTO;
  }


  /**  */
  public static Double getBENEFICIO_AUTODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO_AUTO );
  }


  /**  */
  public static void setBENEFICIO_AUTO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO_AUTO = value;
  }


  /**  */
  public static void setBENEFICIO_AUTO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).BENEFICIO_AUTO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getMENOR  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).MENOR;
  }


  /**  */
  public static Double getMENORDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).MENOR );
  }


  /**  */
  public static void setMENOR  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).MENOR = value;
  }


  /**  */
  public static void setMENOR  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).MENOR = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getPARTE_PROP  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PARTE_PROP;
  }


  /**  */
  public static Double getPARTE_PROPDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PARTE_PROP );
  }


  /**  */
  public static void setPARTE_PROP  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PARTE_PROP = value;
  }


  /**  */
  public static void setPARTE_PROP  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PARTE_PROP = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUM_FAMILIA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_FAMILIA;
  }


  /**  */
  public static Double getNUM_FAMILIADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_FAMILIA );
  }


  /**  */
  public static void setNUM_FAMILIA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_FAMILIA = value;
  }


  /**  */
  public static void setNUM_FAMILIA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NUM_FAMILIA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINGRESO_BRUTO_PADRES  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO_PADRES;
  }


  /**  */
  public static Double getINGRESO_BRUTO_PADRESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO_PADRES );
  }


  /**  */
  public static void setINGRESO_BRUTO_PADRES  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO_PADRES = value;
  }


  /**  */
  public static void setINGRESO_BRUTO_PADRES  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).INGRESO_BRUTO_PADRES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getGASTOS_PADRES  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_PADRES;
  }


  /**  */
  public static Double getGASTOS_PADRESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_PADRES );
  }


  /**  */
  public static void setGASTOS_PADRES  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_PADRES = value;
  }


  /**  */
  public static void setGASTOS_PADRES  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_PADRES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSS_MENOR  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SS_MENOR;
  }


  /**  */
  public static Double getSS_MENORDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SS_MENOR );
  }


  /**  */
  public static void setSS_MENOR  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SS_MENOR = value;
  }


  /**  */
  public static void setSS_MENOR  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SS_MENOR = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getEXC_PROD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXC_PROD;
  }


  /**  */
  public static Double getEXC_PRODDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXC_PROD );
  }


  /**  */
  public static void setEXC_PROD  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXC_PROD = value;
  }


  /**  */
  public static void setEXC_PROD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).EXC_PROD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getADULTO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADULTO;
  }


  /**  */
  public static Double getADULTODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADULTO );
  }


  /**  */
  public static void setADULTO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADULTO = value;
  }


  /**  */
  public static void setADULTO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADULTO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNINOS  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NINOS;
  }


  /**  */
  public static Double getNINOSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NINOS );
  }


  /**  */
  public static void setNINOS  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NINOS = value;
  }


  /**  */
  public static void setNINOS  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NINOS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getREHABILITACION  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).REHABILITACION;
  }


  /**  */
  public static Double getREHABILITACIONDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).REHABILITACION );
  }


  /**  */
  public static void setREHABILITACION  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).REHABILITACION = value;
  }


  /**  */
  public static void setREHABILITACION  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).REHABILITACION = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSALA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALA;
  }


  /**  */
  public static Double getSALADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALA );
  }


  /**  */
  public static void setSALA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALA = value;
  }


  /**  */
  public static void setSALA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).SALA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getADIE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADIE;
  }


  /**  */
  public static Double getADIEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADIE );
  }


  /**  */
  public static void setADIE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADIE = value;
  }


  /**  */
  public static void setADIE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ADIE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNPRO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NPRO;
  }


  /**  */
  public static Double getNPRODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NPRO );
  }


  /**  */
  public static void setNPRO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NPRO = value;
  }


  /**  */
  public static void setNPRO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).NPRO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONY_SALA  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_SALA;
  }


  /**  */
  public static Double getCONY_SALADouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_SALA );
  }


  /**  */
  public static void setCONY_SALA  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_SALA = value;
  }


  /**  */
  public static void setCONY_SALA  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_SALA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONY_ADIE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_ADIE;
  }


  /**  */
  public static Double getCONY_ADIEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_ADIE );
  }


  /**  */
  public static void setCONY_ADIE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_ADIE = value;
  }


  /**  */
  public static void setCONY_ADIE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_ADIE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONY_NPRO  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_NPRO;
  }


  /**  */
  public static Double getCONY_NPRODouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_NPRO );
  }


  /**  */
  public static void setCONY_NPRO  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_NPRO = value;
  }


  /**  */
  public static void setCONY_NPRO  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_NPRO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getDEDUC_ALBE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUC_ALBE;
  }


  /**  */
  public static Double getDEDUC_ALBEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUC_ALBE );
  }


  /**  */
  public static void setDEDUC_ALBE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUC_ALBE = value;
  }


  /**  */
  public static void setDEDUC_ALBE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).DEDUC_ALBE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getGASTOS_ALBE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_ALBE;
  }


  /**  */
  public static Double getGASTOS_ALBEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_ALBE );
  }


  /**  */
  public static void setGASTOS_ALBE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_ALBE = value;
  }


  /**  */
  public static void setGASTOS_ALBE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_ALBE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONY_PROD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_PROD;
  }


  /**  */
  public static Double getCONY_PRODDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_PROD );
  }


  /**  */
  public static void setCONY_PROD  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_PROD = value;
  }


  /**  */
  public static void setCONY_PROD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONY_PROD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONYUGUE_INHERENTES  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONYUGUE_INHERENTES;
  }


  /**  */
  public static Double getCONYUGUE_INHERENTESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONYUGUE_INHERENTES );
  }


  /**  */
  public static void setCONYUGUE_INHERENTES  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONYUGUE_INHERENTES = value;
  }


  /**  */
  public static void setCONYUGUE_INHERENTES  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).CONYUGUE_INHERENTES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getACREDITABLE_CONYUGUE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE;
  }


  /**  */
  public static Double getACREDITABLE_CONYUGUEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE );
  }


  /**  */
  public static void setACREDITABLE_CONYUGUE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE = value;
  }


  /**  */
  public static void setACREDITABLE_CONYUGUE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getACREDITABLE_CONYUGUE_2  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE_2;
  }


  /**  */
  public static Double getACREDITABLE_CONYUGUE_2Double ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE_2 );
  }


  /**  */
  public static void setACREDITABLE_CONYUGUE_2  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE_2 = value;
  }


  /**  */
  public static void setACREDITABLE_CONYUGUE_2  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ACREDITABLE_CONYUGUE_2 = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getGASTOS_IN  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_IN;
  }


  /**  */
  public static Double getGASTOS_INDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_IN );
  }


  /**  */
  public static void setGASTOS_IN  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_IN = value;
  }


  /**  */
  public static void setGASTOS_IN  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).GASTOS_IN = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOTROS_PADRES  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_PADRES;
  }


  /**  */
  public static Double getOTROS_PADRESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_PADRES );
  }


  /**  */
  public static void setOTROS_PADRES  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_PADRES = value;
  }


  /**  */
  public static void setOTROS_PADRES  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_PADRES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOTROS_CONY  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_CONY;
  }


  /**  */
  public static Double getOTROS_CONYDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_CONY );
  }


  /**  */
  public static void setOTROS_CONY  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_CONY = value;
  }


  /**  */
  public static void setOTROS_CONY  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).OTROS_CONY = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAE_COUNT  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AE_COUNT;
  }


  /**  */
  public static Double getAE_COUNTDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AE_COUNT );
  }


  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AE_COUNT = value;
  }


  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AE_COUNT = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getESTA_CONY  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ESTA_CONY;
  }


  /**  */
  public static Double getESTA_CONYDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ESTA_CONY );
  }


  /**  */
  public static void setESTA_CONY  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ESTA_CONY = value;
  }


  /**  */
  public static void setESTA_CONY  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ESTA_CONY = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getING_BRUTO_MENOR  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_BRUTO_MENOR;
  }


  /**  */
  public static Double getING_BRUTO_MENORDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_BRUTO_MENOR );
  }


  /**  */
  public static void setING_BRUTO_MENOR  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_BRUTO_MENOR = value;
  }


  /**  */
  public static void setING_BRUTO_MENOR  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ING_BRUTO_MENOR = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getPROD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PROD;
  }


  /**  */
  public static Double getPRODDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PROD );
  }


  /**  */
  public static void setPROD  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PROD = value;
  }


  /**  */
  public static void setPROD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).PROD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getALBE  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ALBE;
  }


  /**  */
  public static Double getALBEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ALBE );
  }


  /**  */
  public static void setALBE  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ALBE = value;
  }


  /**  */
  public static void setALBE  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).ALBE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAYUD  ( RallyApplication __app )
  {
    return ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUD;
  }


  /**  */
  public static Double getAYUDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUD );
  }


  /**  */
  public static void setAYUD  ( RallyApplication __app, double value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUD = value;
  }


  /**  */
  public static void setAYUD  ( RallyApplication __app, Object value )
  {
    ( ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class ) ).AYUD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static DETERMINAR_ELEGIBILIDAD_AE_B_ADL get ( RallyApplication __app )
  {
    DETERMINAR_ELEGIBILIDAD_AE_B_ADL adl = new DETERMINAR_ELEGIBILIDAD_AE_B_ADL ( );
    __app.register ( adl, "DETERMINAR_ELEGIBILIDAD_AE_B_ADL" );
    __app.setADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    DETERMINAR_ELEGIBILIDAD_AE_B_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    DETERMINAR_ELEGIBILIDAD_AE_B_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "DETERMINAR_ELEGIBILIDAD_AE_B_ADL" );
    if ( rObj != null && rObj instanceof DETERMINAR_ELEGIBILIDAD_AE_B_ADL )
    {
      this.app.setADL ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL.class, ( DETERMINAR_ELEGIBILIDAD_AE_B_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "DETERMINAR_ELEGIBILIDAD_AE_B_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      case 5:  { this.currentStep ++; this.step5 ( this.keyParms ); break; }
      case 6:  { this.currentStep ++; this.step6 ( this.keyParms ); break; }
      case 7:  { this.currentStep ++; this.step7 ( this.keyParms ); break; }
      case 8:  { this.currentStep ++; this.step8 ( this.keyParms ); break; }
      case 9:  { this.currentStep ++; this.step9 ( this.keyParms ); break; }
      case 10:  { this.currentStep ++; this.step10 ( this.keyParms ); break; }
      case 11:  { this.currentStep ++; this.step11 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "DETERMINAR_ELEGIBILIDAD_AE_B_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NUCLEO_SERVICIO_DSD = this.dm.create ( "NUCLEO_SERVICIO_DSD" );
    OPEN_ID = NUCLEO_SERVICIO_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    CLIENTES2_DSD = this.dm.create ( "CLIENTES2_DSD" );
    OPEN2_ID = CLIENTES2_DSD.getId ( );
    STATUS2_CODE = RallyDataStoreException.getDefault ( );
    RECURSOS_NUCLEO_DSD = this.dm.create ( "RECURSOS_NUCLEO_DSD" );
    OPEN3_ID = RECURSOS_NUCLEO_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    BENEFICIOS_PAN_RO_DSD = this.dm.create ( "BENEFICIOS_PAN_RO_DSD" );
    OPEN4_ID = BENEFICIOS_PAN_RO_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    INGRESOS_NUCLEO_DSD = this.dm.create ( "INGRESOS_NUCLEO_DSD" );
    OPEN5_ID = INGRESOS_NUCLEO_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    GASTOS_NUCLEO_DSD = this.dm.create ( "GASTOS_NUCLEO_DSD" );
    OPEN6_ID = GASTOS_NUCLEO_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    DETERMINA_RO_DSD = this.dm.create ( "DETERMINA_RO_DSD" );
    OPEN7_ID = DETERMINA_RO_DSD.getId ( );
    STATUS7_CODE = RallyDataStoreException.getDefault ( );
    GENERAL_TBL_DSD = this.dm.create ( "GENERAL_TBL_DSD" );
    OPEN12_ID = GENERAL_TBL_DSD.getId ( );
    STATUS12_CODE = RallyDataStoreException.getDefault ( );

    STATUS12_CODE  = this.dm.reset ( OPEN12_ID );

    this.dm.setField ( this.dm.get ( "GENERAL_TBL_DSD" ), "COD_GENERAL", "DATE" );
    this.dm.setField ( this.dm.get ( "GENERAL_TBL_DSD" ), "COD_ID", "EAE" );

    STATUS12_CODE  = this.dm.limitQueryFromBuffer ( OPEN12_ID );
    STATUS12_CODE  = this.dm.retrieve ( OPEN12_ID );

    STATUS12_CODE  = this.dm.firstRow ( OPEN12_ID );

    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    	FCH_EMISION = this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDateItem ( "MES_ANO_BENEFICIO_CORRECTO" );
    }
    else
    {
    	if ( Compare.equals ( STATUS12_CODE, 0 ) ) 
    	{
    		FCH_EMISION = RallySpanishDatesParser.parseDateString ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "GENERAL_TBL_DSD" ), "DSC_CORTA" ), 0, 2 ) + "-" + RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "GENERAL_TBL_DSD" ), "DSC_CORTA" ), 2, 3 ) + "-" + RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "GENERAL_TBL_DSD" ), "DSC_CORTA" ), 5, 4 ) );
    	}
    	else
    	{
    		FCH_EMISION = this.app.SYSTEM_DATE;
    	}
    }
    CHECK_ID_AUTORIZA_ADL.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {

	    STATUS_CODE  = this.dm.reset ( OPEN_ID );

	    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
	    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
	    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
	    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

	    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
	    STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

	    STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

	    while ( Compare.equals ( STATUS_CODE, 0 )  )
	    {
	      NUCLEO = MathService.plus ( NUCLEO, 1  );

	      STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

	      if (Compare.equals(this.app.RUTINA_GBL, "RR"))
	      {
	  	    this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "NUMERO_MIEMBROS", NUCLEO  );
	      }
	    }
	  
    AE_COUNT = 0;

    STATUS_CODE  = this.dm.reset ( OPEN_ID );

    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

    if ( Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        if ( Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO" ), 0, 2 ), "AE" ) ) 
        {
          AE_COUNT = MathService.plus ( AE_COUNT, 1  );
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

      }
    }

    STATUS_CODE  = this.dm.reset ( OPEN_ID );

    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNPR" );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

    STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

    this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );

    STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
    STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

    STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

    EDAD_IND = DateUtil.monthsBetween ( FCH_EMISION, this.dm.getFieldDate ( this.dm.get ( "CLIENTES2_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
    if ( Compare.lt ( EDAD_IND, 18 ) ) 
    {
      MENOR = 1;
      SS_MENOR = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE" );
    }
    RECURSOS_ACUM = 0;

    STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

    this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );

    STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
    STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

    STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

    STATUS = this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_ESTADO_CIVIL" );
    if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_ESTADO_CIVIL" ), "CASA" ) ) || ( Compare.equals ( MENOR, 1 ) ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN3_ID );

      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    }
    else
    {
      STATUS_CODE  = this.dm.reset ( OPEN3_ID );

      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNPR" );
      this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    }

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN3_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN3_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN3_ID );

    while ( Compare.equals ( STATUS_CODE, 0 )  )
    {
      if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) ) && ( ! Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), 0, 3 ), "VEH" ) )  ) 
      {
        RECURSOS_ACUM = MathService.plus ( RECURSOS_ACUM, this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO" )  );
      }

      STATUS_CODE  = this.dm.nextRow ( OPEN3_ID );

    }
    
    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    	 this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "RECURSOS", RECURSOS_ACUM  );
    }
    
    if ( Compare.gt ( RECURSOS_ACUM, 2000 ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      INELEGIBLE_REG = "*";
      RAZON = "FAMILIA EXCEDE EL MAXIMO DE RECURSOS";
      STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

      STATUS12_CODE  = this.dm.dbClose ( OPEN12_ID );
      
      if (Compare.equals(this.app.RUTINA_GBL, "RR"))
      {           
    	  this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
    	  RECURSOS_ACUM = 0;
    	  DETERMINAR_AEA.exec ( this.app );
    	  //this.doReturn ( );       	
      }
      else
      {
    	  if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) ) 
    	  {
    		  SERVICIO_STATUS = "CERRAD03";
    	  }
    	  else
    	  {
    		  SERVICIO_STATUS = "RECHAZ03";
    	  }
    	  SERVICIO_BENEFICIO = 0;
    	  DETERMINAR_AEA.exec ( this.app );

      }
	  return;
    }
  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.gt ( RECURSOS_ACUM, 2000 ) ) 
    {
      DETERMINACION_FINAL_MENU.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.gt ( RECURSOS_ACUM, 2000 ) ) 
    {
      if ( ! ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "S" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "s" ) ) ) ) 
      {
        this.doReturn ( );
        return;
      }
      if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
      {
      DETER_ELEG_AEB_UPDATE_SERV_ADL.exec ( this.app );
      }
      return;
    }

  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.gt ( RECURSOS_ACUM, 2000 ) ) 
    {
      this.callParms.clear ( );
      this.callParms.set ( this.app.SS_JEFE_GBL  );
      this.callParms.set ( this.app.SS_SERV_GBL  );
      this.callParms.set ( this.app.COD_SERV_GBL  );
      INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step5 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.gt ( RECURSOS_ACUM, 2000 ) ) 
    {
      this.callParms.reset ( );
      this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
      this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
      this.app.COD_SERV_GBL  = this.callParms.getString ( );

      RECURSOS_ACUM = 0;
      this.doReturn ( );
      return; 
    }
    SALARIO = 0;
    SEG_SOC = 0;
    OTROS = 0;
    SALA = 0;
    NPRO = 0;
    ADIE = 0;
    CONY_SALA = 0;
    CONY_NPRO = 0;
    CONY_ADIE = 0;
    REHABILITACION = 0;
    if ( Compare.equals ( MENOR, 0 ) ) 
    {
      STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
      STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

      STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "FLG_REHABILITACION_VOC" ), "S" ) ) 
      {
        REHABILITACION = 1;
      }
    }

    STATUS_CODE  = this.dm.reset ( OPEN5_ID );

    this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    if ( Compare.equals ( MENOR, 1 ) ) 
    {
      this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", SS_MENOR );
    }

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN5_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN5_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN5_ID );

    while ( Compare.equals ( STATUS_CODE, 0 )  )
    {
      if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_PAN" ), "X" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_AE" ), "X" ) )  ) ) 
      {
        this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" ) );
        if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
        }
      }
      else
      {
        if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
        }
        if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "S" ) ) 
        {
          if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) || ( ! Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "AE-C" ) ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 4.3 );
          }
          else if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE-C" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 4.3 );
          }
        }
        else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "B" ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 2.15 );
        }
        else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "Q" ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 2.0 );
        }
        else
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 1.0 );
        }
        if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
        }
      }

      STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
      STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

      STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

      if ( Compare.equals ( REHABILITACION, 0 ) ) 
      {
    	  INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
        if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BILV" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) )  ) 
        {
          if ( ( ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ), this.app.SS_SERV_GBL ) ) && ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "B" ) )  ) || ( ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ), this.app.SS_SERV_GBL ) ) && ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "G" ) )  ) ) 
          {
            SALARIO = MathService.plus ( SALARIO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            INGRESO_BRUTO = MathService.plus ( INGRESO_BRUTO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) 
            {
              SALA = MathService.plus ( SALA, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
            else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) 
            {
              ADIE = MathService.plus ( ADIE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
            else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) )  )
            {
              NPRO = MathService.plus ( NPRO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
          }
          else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) ) )   )
          {
            SALARIO_CONYUGUE = MathService.plus ( SALARIO_CONYUGUE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) 
            {
              CONY_SALA = MathService.plus ( CONY_SALA, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
            else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) 
            {
              CONY_ADIE = MathService.plus ( CONY_ADIE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
            else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) )  )
            {
              CONY_NPRO = MathService.plus ( CONY_NPRO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            }
          }
        }
        else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) ) )   )
        {
          OTROS_CONY = MathService.plus ( OTROS_CONY, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
        }
        else if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )   )
        {
          OTROS = MathService.plus ( OTROS, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
        }
      }
      else
      {
        if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_AE" ), "" ) ) 
        {
          if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BILV" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) )  ) 
          {
            if ( ( ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ), this.app.SS_SERV_GBL ) ) && ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "B" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "G" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "NA" ) )  ) ) 
            {
              SALARIO = MathService.plus ( SALARIO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              INGRESO_BRUTO = MathService.plus ( INGRESO_BRUTO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) 
              {
                SALA = MathService.plus ( SALA, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
              else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) 
              {
                ADIE = MathService.plus ( ADIE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
              else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) )  )
              {
                NPRO = MathService.plus ( NPRO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
            }
            else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) ) )   )
            {
              SALARIO_CONYUGUE = MathService.plus ( SALARIO_CONYUGUE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) 
              {
                CONY_SALA = MathService.plus ( CONY_SALA, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
              else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) 
              {
                CONY_ADIE = MathService.plus ( CONY_ADIE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
              else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) )  )
              {
                CONY_NPRO = MathService.plus ( CONY_NPRO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
              }
            }
          }
          else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) ) )   )
          {
            OTROS_CONY = MathService.plus ( OTROS_CONY, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
          }
          else if ( ( ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ), this.app.SS_SERV_GBL ) ) && ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "B" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "G" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "NA" ) )  )  )
          {
            OTROS = MathService.plus ( OTROS, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
          }
        }
      }

      STATUS_CODE  = this.dm.nextRow ( OPEN5_ID );

    }
    
    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    	 this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESOS_NUCLEO  );
    }
    
    GASTOS_NUCLEO = 0;

    STATUS_CODE  = this.dm.reset ( OPEN6_ID );

    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

    while ( Compare.equals ( STATUS_CODE, 0 )  )
    {
      GASTOS_NUCLEO = MathService.plus ( GASTOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );

      STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

    }
    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "GASTOS", GASTOS_NUCLEO  );
    } 
    OTROS2 = OTROS;
    OTROS = MathService.plus ( OTROS, OTROS_CONY  );
    if ( Compare.gt ( SALARIO_CONYUGUE, 0 ) ) 
    {
      CONYUGUE_INHERENTES = 0;
      if ( ( Compare.equals ( CONY_SALA, 0 ) ) && ( Compare.gt ( CONY_NPRO, 0 ) )  ) 
      {
        STATUS_CODE  = this.dm.reset ( OPEN6_ID );

        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "NA" );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
        STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

        STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

        while ( Compare.equals ( STATUS_CODE, 0 )  )
        {
          if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "PROA" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "PROC" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ALBE" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ESTU" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ANCI" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "MEDI" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "CUID" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "AYUD" ) )  ) 
          {
            GASTOS_INHERENTES = MathService.plus ( GASTOS_INHERENTES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
          }

          STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

        }
        CONYUGUE_INHERENTES = TruncService.trunc ( GASTOS_INHERENTES ) ;
      }
      if ( Compare.ge ( SALARIO_CONYUGUE, CONYUGUE_INHERENTES ) ) 
      {
        ACREDITABLE_CONYUGUE_2 = MathService.minus ( SALARIO_CONYUGUE, CONYUGUE_INHERENTES  );
        ACREDITABLE_CONYUGUE = MathService.minus ( SALARIO_CONYUGUE, CONYUGUE_INHERENTES  );
      }
      else
      {
        ACREDITABLE_CONYUGUE_2 = 0;
        ACREDITABLE_CONYUGUE = 0;
      }
      if ( Compare.ge ( ACREDITABLE_CONYUGUE, 75 ) ) 
      {
        ACREDITABLE_CONYUGUE_2 = MathService.minus ( ACREDITABLE_CONYUGUE, 75  );
        ACREDITABLE_CONYUGUE = MathService.minus ( ACREDITABLE_CONYUGUE, 75  );
        CONY_PROD = 75;
      }
      else
      {
        ACREDITABLE_CONYUGUE_2 = 0;
        ACREDITABLE_CONYUGUE = 0;
      }
    }
    if ( Compare.gt ( ACREDITABLE_CONYUGUE, 0 ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN6_ID );

      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "NA" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "AYUD" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

      if ( Compare.equals ( STATUS_CODE, 0 ) ) 
      {
        GASTOS_ALBE = ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) );
        ACREDITABLE_CONYUGUE_2 = 0;
        if ( Compare.ge ( ACREDITABLE_CONYUGUE, GASTOS_ALBE ) ) 
        {
          if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "AYUD" ) ) && ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), 0 ) )  ) 
          {
            AYUDA_PERMITIDA = MathService.plus ( 64, ( ( MathService.minus ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "NUM_PERSONAS_AYUDA" ), 1  ) ) * 48 )  );
            if ( Compare.ge ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), AYUDA_PERMITIDA ) ) 
            {
              GASTOS_ALBE = AYUDA_PERMITIDA;
              ACREDITABLE_CONYUGUE_2 = MathService.minus ( ACREDITABLE_CONYUGUE, AYUDA_PERMITIDA  );
              ACREDITABLE_CONYUGUE = MathService.minus ( ACREDITABLE_CONYUGUE, AYUDA_PERMITIDA  );
            }
            else
            {
              ACREDITABLE_CONYUGUE_2 = MathService.minus ( ACREDITABLE_CONYUGUE, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
              ACREDITABLE_CONYUGUE = MathService.minus ( ACREDITABLE_CONYUGUE, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
            }
          }
        }
        else
        {
          ACREDITABLE_CONYUGUE = 0;
        }
      }
    }
    CENTAVOS = 0;
    ING_TEMP = 0;
    EXCENCION_SAL = 0;
    EXCENCION_TRABAJO = 0;
    INGRESO_ACREDITABLE = SALARIO;
    CENTAVOS = MathService.minus ( INGRESO_ACREDITABLE, TruncService.trunc ( INGRESO_ACREDITABLE )   );
    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 3, 1 ), "B" ) ) 
    {
      if ( Compare.gt ( CENTAVOS, 0 ) ) 
      {
        ING_TEMP = TruncService.trunc ( MathService.plus ( INGRESO_ACREDITABLE, 1  ) ) ;
      }
      else
      {
        ING_TEMP = INGRESO_ACREDITABLE;
      }
      if ( Compare.le ( ING_TEMP, 85 ) ) 
      {
        EXCENCION_SAL = ING_TEMP;
      }
      else
      {
        EXCENCION_SAL = MathService.plus ( 85, ( ( MathService.minus ( ING_TEMP, 85  ) ) / 2 )  );
      }
      if ( ( Compare.equals ( SALA, 0 ) ) && ( Compare.gt ( NPRO, 0 ) )  ) 
      {
        if ( Compare.ge ( GASTOS_INHE, EXCENCION_SAL ) ) 
        {
          EXCENCION_TRABAJO = MathService.minus ( GASTOS_INHE, EXCENCION_SAL  );
        }
        else
        {
          EXCENCION_TRABAJO = 0;
        }
      }
      if ( ( Compare.gt ( SALA, 0 ) ) && ( Compare.equals ( NPRO, 0 ) )  ) 
      {
        if ( Compare.ge ( SALARIO, EXCENCION_SAL ) ) 
        {
          EXCENCION_TRABAJO = MathService.minus ( SALARIO, EXCENCION_SAL  );
        }
        else
        {
          EXCENCION_TRABAJO = 0;
        }
      }
    }
    if ( ( Compare.gt ( SALA, 0 ) ) && ( Compare.equals ( NPRO, 0 ) )  ) 
    {
      if ( Compare.ge ( INGRESO_ACREDITABLE, EXCENCION_SAL ) ) 
      {
        INGRESO_ACREDITABLE = MathService.minus ( INGRESO_BRUTO, EXCENCION_SAL  );
      }
      else
      {
        INGRESO_ACREDITABLE = 0;
      }
    }
    else if ( Compare.ge ( INGRESO_ACREDITABLE, EXCENCION_SAL )  )
    {
      INGRESO_ACREDITABLE = MathService.minus ( INGRESO_ACREDITABLE, EXCENCION_SAL  );
    }
    else
    {
      INGRESO_ACREDITABLE = 0;
    }
    GASTOS_INHERENTES = 0;
    GASTOS_INHE = 0;
    if ( ( Compare.equals ( SALA, 0 ) ) && ( Compare.gt ( NPRO, 0 ) )  ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN6_ID );

      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "GINP" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) )  ) 
        {
          GASTOS_INHERENTES = MathService.plus ( GASTOS_INHERENTES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

      }
      GASTOS_INHERENTES = TruncService.trunc ( GASTOS_INHERENTES ) ;
    }
    if ( Compare.ge ( INGRESO_ACREDITABLE, GASTOS_INHERENTES ) ) 
    {
      GASTOS_INHE = MathService.minus ( INGRESO_ACREDITABLE, GASTOS_INHERENTES  );
    }
    else
    {
      GASTOS_INHE = 0;
    }
    if ( Compare.ge ( INGRESO_ACREDITABLE, GASTOS_INHERENTES ) ) 
    {
      INGRESO_ACREDITABLE = MathService.minus ( INGRESO_ACREDITABLE, GASTOS_INHERENTES  );
    }
    else
    {
      INGRESO_ACREDITABLE = 0;
    }
    EXCENCION_PROD = 0;
    if ( Compare.gt ( SALARIO, 0 ) ) 
    {
      EXC_PROD = 75;
      if ( Compare.ge ( EXCENCION_TRABAJO, 75 ) ) 
      {
        EXCENCION_PROD = MathService.minus ( EXCENCION_TRABAJO, 75  );
      }
      else
      {
        EXCENCION_PROD = 0;
      }
      if ( Compare.ge ( INGRESO_ACREDITABLE, 75 ) ) 
      {
        INGRESO_ACREDITABLE = MathService.minus ( INGRESO_ACREDITABLE, 75  );
      }
      else
      {
        INGRESO_ACREDITABLE = 0;
      }
    }
    RESTE_30 = 0;
    CUIDO_MENOR = 0;
    TOTAL_CUIDO = 0;
    if ( Compare.ge ( INGRESO_ACREDITABLE, CUIDO_MENOR ) ) 
    {
      INGRESO_ACREDITABLE = MathService.minus ( INGRESO_ACREDITABLE, CUIDO_MENOR  );
    }
    else
    {
      INGRESO_ACREDITABLE = 0;
    }
    TOT_INGRE_ACREDI = INGRESO_ACREDITABLE;
    if ( Compare.gt ( OTROS_CONY, 0 ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN6_ID );

      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "NA" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "AYUD" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

      if ( Compare.equals ( STATUS_CODE, 0 ) ) 
      {
        GASTOS_ALBE = ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) );
      }
    }
    ACREDITABLE_CONYUGUE_2 = MathService.plus ( ACREDITABLE_CONYUGUE, OTROS_CONY  );
    if ( Compare.gt ( ACREDITABLE_CONYUGUE_2, 0 ) ) 
    {
      DEDUC_ALBE = 0;

      STATUS_CODE  = this.dm.reset ( OPEN6_ID );

      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "NA" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "ALBE" );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

      if ( Compare.equals ( STATUS_CODE, 0 ) ) 
      {
        if ( Compare.gt ( ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) ), 200 ) ) 
        {
          DEDUC_ALBE = 200;
          EXCENCION_ALBERGUE = 200;
        }
        else
        {
          DEDUC_ALBE = ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) );
          EXCENCION_ALBERGUE = DEDUC_ALBE;
        }
        if ( Compare.ge ( ( ACREDITABLE_CONYUGUE_2 ), DEDUC_ALBE ) ) 
        {
          ACREDITABLE_CONYUGUE_2 = MathService.minus ( ( ACREDITABLE_CONYUGUE_2 ), DEDUC_ALBE  );
        }
        else
        {
          ACREDITABLE_CONYUGUE_2 = 0;
        }
      }
    }
    if ( ! Compare.equals ( ACREDITABLE_CONYUGUE_2, 0 ) ) 
    {
      TOTAL_OTROS = MathService.plus ( MathService.plus ( TOT_INGRE_ACREDI, OTROS2  ), ACREDITABLE_CONYUGUE_2  );
    }
    else
    {
      TOTAL_OTROS = MathService.plus ( TOT_INGRE_ACREDI, OTROS2  );
    }
    INGRESO_BRUTO_PADRES = 0;
    ING_BRUTO_MENOR = 0;
    PROD = 0;
    ALBE = 0;
    AYUD = 0;
    if ( Compare.ge ( MENOR, 1 ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN5_ID );

      this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN5_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN5_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN5_ID );

      SAVE_SSN = 0;
      SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );
      PERSONA_TRABAJA_FLG = 0;
      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_PAN" ), "X" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_AE" ), "X" ) )  ) ) 
        {
          this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" ) );
          if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
          }
        }
        else
        {
          if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
          }
          if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "S" ) ) 
          {
            if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) || ( ! Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "AE-C" ) ) ) 
            {
              this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 4.3 );
            }
            else if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE-C" ) ) 
            {
              this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 4.3 );
            }
          }
          else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "B" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 2.15 );
          }
          else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "Q" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 2.0 );
          }
          else
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 1.0 );
          }
          if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) 
          {
            this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
          }
        }

        STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
        STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

        STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

        EDAD_IND = DateUtil.monthsBetween ( FCH_EMISION, this.dm.getFieldDate ( this.dm.get ( "CLIENTES2_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
        if ( Compare.gt ( EDAD_IND, 18 ) ) 
        {
          if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BILV" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "EXIN" ) ) )  ) 
          {
            NUM_PADRES_TRABAJAN = MathService.plus ( NUM_PADRES_TRABAJAN, 1  );
            INGRESO_BRUTO_PADRES = MathService.plus ( INGRESO_BRUTO_PADRES, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
            ING_BRUTO_MENOR = MathService.plus ( ING_BRUTO_MENOR, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
          }
          else
          {
            OTROS_PADRES = MathService.plus ( OTROS_PADRES, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
          }
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN5_ID );

        if ( ! Compare.equals ( SAVE_SSN, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) ) ) 
        {
          SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );
          PERSONA_TRABAJA_FLG = 0;
        }
      }
    }

    STATUS_CODE  = this.dm.reset ( OPEN6_ID );

    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "GINP" );
    this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

    while ( Compare.equals ( STATUS_CODE, 0 )  )
    {
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) 
      {
        GASTOS_IN = MathService.plus ( GASTOS_IN, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
      }

      STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

    }
    GASTOS_IN = TruncService.trunc ( GASTOS_IN ) ;
    INGRESO_BRUTO_PADRES = MathService.minus ( INGRESO_BRUTO_PADRES, GASTOS_IN  );
    if ( Compare.gt ( INGRESO_BRUTO_PADRES, 0 ) ) 
    {
      PROD = MathService.plus ( PROD, ( 75 * NUM_PADRES_TRABAJAN )  );
      INGRESO_BRUTO_PADRES = MathService.minus ( INGRESO_BRUTO_PADRES, ( 75 * NUM_PADRES_TRABAJAN )  );
    }
    INGRESO_BRUTO_PADRES = MathService.plus ( INGRESO_BRUTO_PADRES, OTROS_PADRES  );
    GASTOS_PADRES = 0;
    if ( Compare.ge ( MENOR, 1 ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN6_ID );

      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "PROA" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "GINP" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAT" ) )  ) 
        {
          if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ALBE" ) ) 
          {
            if ( Compare.gt ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), 200 ) ) 
            {
              ALBE = MathService.plus ( ALBE, 200  );
              GASTOS_PADRES = MathService.plus ( GASTOS_PADRES, 200  );
            }
            else
            {
              ALBE = MathService.plus ( ALBE, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
              GASTOS_PADRES = MathService.plus ( GASTOS_PADRES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
            }
          }
          if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "AYUD" ) ) 
          {
            if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "AYUD" ) ) && ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), 0 ) )  ) 
            {
              AYUDA_PERMITIDA = MathService.plus ( 64, ( ( MathService.minus ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "NUM_PERSONAS_AYUDA" ), 1  ) ) * 48 )  );
              if ( Compare.ge ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), AYUDA_PERMITIDA ) ) 
              {
                AYUD = AYUDA_PERMITIDA;
                GASTOS_PADRES = MathService.plus ( GASTOS_PADRES, AYUDA_PERMITIDA  );
              }
              else
              {
                AYUD = this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" );
                GASTOS_PADRES = MathService.plus ( GASTOS_PADRES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
              }
            }
          }
          if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "AYUD" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ALBE" ) )  ) 
          {
            GASTOS_PADRES = MathService.plus ( GASTOS_PADRES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
          }
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

      }
    }
    if ( Compare.ge ( INGRESO_BRUTO_PADRES, GASTOS_PADRES ) ) 
    {
      INGRESO_BRUTO_PADRES = MathService.minus ( INGRESO_BRUTO_PADRES, GASTOS_PADRES  );
    }
    else
    {
      INGRESO_BRUTO_PADRES = 0;
    }
    if ( ( Compare.equals ( MENOR, 0 ) ) && ( Compare.gt ( INGRESO_BRUTO_PADRES, 0 ) )  ) 
    {
      if ( Compare.ge ( INGRESO_BRUTO_PADRES, 75 ) ) 
      {
        INGRESO_BRUTO_PADRES = MathService.minus ( INGRESO_BRUTO_PADRES, 75  );
      }
      else
      {
        INGRESO_BRUTO_PADRES = 0;
      }
    }
    NUM_FAMILIA = 0;
    if ( Compare.ge ( MENOR, 1 ) ) 
    {
      STATUS_CODE  = this.dm.reset ( OPEN_ID );

      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
        STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

        STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

        EDAD_IND = DateUtil.monthsBetween ( FCH_EMISION, this.dm.getFieldDate ( this.dm.get ( "CLIENTES2_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
        if ( Compare.gt ( EDAD_IND, 18 ) ) 
        {
          ADULTO = MathService.plus ( ADULTO, 1  );
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

      }

      STATUS_CODE  = this.dm.reset ( OPEN_ID );

      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
      STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

      STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

      while ( Compare.equals ( STATUS_CODE, 0 )  )
      {
        STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
        STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

        STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

        EDAD_IND = DateUtil.monthsBetween ( FCH_EMISION, this.dm.getFieldDate ( this.dm.get ( "CLIENTES2_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
        if ( Compare.lt ( EDAD_IND, 18 ) ) 
        {
          NINOS = MathService.plus ( NINOS, 1  );
        }

        STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

      }
    }
    PARTE_PROP = 0;
    if ( Compare.ge ( MENOR, 1 ) ) 
    {
      if ( Compare.gt ( INGRESO_BRUTO_PADRES, 0 ) ) 
      {
        PARTE_PROP = ( INGRESO_BRUTO_PADRES / ( MathService.plus ( ADULTO, NINOS  ) ) );
      }
      else
      {
        PARTE_PROP = 0;
      }
    }
    if ( Compare.equals ( MENOR, 1 ) ) 
    {
      NINOS = 1;
      ADULTO = 0;
    }
    else
    {
      ADULTO = 1;
      NINOS = 0;
    }

    STATUS_CODE  = this.dm.reset ( OPEN_ID );

    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV", "NA" );
    this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

    STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

    if ( Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      ESTA_CONY = 1;
    }
    if ( ( Compare.equals ( MENOR, 0 ) ) && ( ( Compare.equals ( STATUS, "CASA" ) ) || ( Compare.equals ( STATUS, "CONV" ) ) )  && ( Compare.equals ( ESTA_CONY, 1 ) )  ) 
    {
      PARTE_PROP = TruncService.trunc ( ACREDITABLE_CONYUGUE_2 )  / 2;
      INGRESO_NETO = MathService.plus ( ( ( MathService.plus ( TOT_INGRE_ACREDI, OTROS2  ) ) / 2 ), PARTE_PROP  );
    }
    else
    {
      INGRESO_NETO = MathService.plus ( ( MathService.plus ( TOT_INGRE_ACREDI, OTROS2  ) ), PARTE_PROP  );
    }
    INGRESO_NETO = TruncService.trunc ( INGRESO_NETO ) ;
    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    	 this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESO_NETO  );
    }
    NECESIDAD_AJUSTADA = 0;

    STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

    if ( Compare.equals ( MENOR, 0 ) ) 
    {
      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );
    }
    else
    {
      this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", SS_MENOR );
    }
    this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
    STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

    STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

    STATUS7_CODE  = this.dm.reset ( OPEN7_ID );

    this.dm.setField ( this.dm.get ( "DETERMINA_RO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );

    STATUS7_CODE  = this.dm.limitQueryFromBuffer ( OPEN7_ID );
    STATUS7_CODE  = this.dm.retrieve ( OPEN7_ID );

    STATUS7_CODE  = this.dm.firstRow ( OPEN7_ID );

    while ( ( Compare.equals ( STATUS7_CODE, 0 ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "DETERMINA_RO_DSD" ), "FECHA_EFECTIVIDAD" ), FCH_EMISION ) )   )
    {
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_INSTITUCION" ), "HOSU" ) ) 
      {
        NECESIDAD_AJUSTADA = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "NECESIDAD_AJUSTADA_HOSU" );
      }
      else
      {
        NECESIDAD_AJUSTADA = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "NECESIDAD_AJUSTADA" );
      }

      STATUS7_CODE  = this.dm.nextRow ( OPEN7_ID );

    }
    CENTAVOS = 0;
    ING_TEMP = 0;
    EXCENCION_ALBERGUE = 0;
    if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES2_DSD" ), "COD_INSTITUCION" ), "HOSU" ) ) 
    {
      if ( ( Compare.equals ( MENOR, 0 ) ) && ( ! Compare.equals ( NECESIDAD_AJUSTADA, 0 ) )  ) 
      {
        STATUS_CODE  = this.dm.reset ( OPEN6_ID );

        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "ALBE" );
        this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
        STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

        STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

        if ( Compare.equals ( STATUS_CODE, 0 ) ) 
        {
          if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ), 0 ) ) 
          {
            CENTAVOS = TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) ) ;
            if ( Compare.gt ( CENTAVOS, 0 ) ) 
            {
              ING_TEMP = TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ) ) ;
            }
            else
            {
              ING_TEMP = this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" );
            }
            if ( ( Compare.ge ( ING_TEMP, 0.01 ) ) && ( Compare.lt ( ING_TEMP, 3 ) )  ) 
            {
              EXCENCION_ALBERGUE = 1;
            }
            else if ( Compare.gt ( ING_TEMP, 200 )  )
            {
              EXCENCION_ALBERGUE = 100;
            }
            else
            {
              EXCENCION_ALBERGUE = TruncService.round ( ING_TEMP / 2 ) ;
            }
            if ( Compare.gt ( EXCENCION_ALBERGUE, 100 ) ) 
            {
              EXCENCION_ALBERGUE = 100;
            }
          }
        }
      }
    }
    TOT_AJUSTADA = MathService.plus ( NECESIDAD_AJUSTADA, EXCENCION_ALBERGUE  );
    if ( Compare.ge ( TOT_AJUSTADA, INGRESO_NETO ) ) 
    {
      DEFICIT = MathService.minus ( TOT_AJUSTADA, TruncService.trunc ( INGRESO_NETO )   );
    }
    else
    {
      DEFICIT = 0;
    }
    DEFICIT = TruncService.trunc ( DEFICIT ) ;
    BENEFICIO_AUTO = 0;
    if ( Compare.lt ( DEFICIT, 1 ) ) 
    {
      this._condition1 = true;
    }
    else
    {
      this._condition1 = false;
    }
    if ( this._condition1 )
    {
      INELEGIBLE_REG = "*";
      RAZON = "SOLICITANTE INELEGIBLE POR INGRESOS";
      STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

      STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

      STATUS12_CODE  = this.dm.dbClose ( OPEN12_ID );
      if (Compare.equals(this.app.RUTINA_GBL, "RR"))
      {           
    	  this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
    	  RECURSOS_ACUM = 0;
    	  DETERMINAR_AEA.exec ( this.app );
    	  //this.doReturn ( );       	
      }
      else
      {
    	  if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) ) 
    	  {
    		  SERVICIO_STATUS = "CERRAD04";
    	  }
    	  else
    	  {
    		  SERVICIO_STATUS = "RECHAZ13";
    	  }
    	  SERVICIO_BENEFICIO = 0;

    	  DETERMINAR_AEA.exec ( this.app );
      }
      return;
    }

  }


  /**
   *
   */
  protected void step6 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.lt ( DEFICIT, 1 ) ) 
    {
      DETERMINACION_FINAL_MENU.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step7 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.lt ( DEFICIT, 1 ) ) 
    {
      if ( ! ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "S" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "s" ) ) ) ) 
      {
        this.doReturn ( );
        return;
      }
      if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
      {
      DETER_ELEG_AEB_UPDATE_SERV_ADL.exec ( this.app );
      }
      return;
    }

  }


  /**
   *
   */
  protected void step8 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.lt ( DEFICIT, 1 ) ) 
    {
      this.callParms.clear ( );
      this.callParms.set ( this.app.SS_JEFE_GBL  );
      this.callParms.set ( this.app.SS_SERV_GBL  );
      this.callParms.set ( this.app.COD_SERV_GBL  );
      INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step9 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.lt ( DEFICIT, 1 ) ) 
    {
      this.callParms.reset ( );
      this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
      this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
      this.app.COD_SERV_GBL  = this.callParms.getString ( );

      RECURSOS_ACUM = 0;
      this.doReturn ( );
      return; 
    }
    if ( ( Compare.ge ( DEFICIT, 1 ) ) && ( Compare.le ( DEFICIT, 5 ) )  ) 
    {
      BENEFICIO_AUTO = 5;
    }
    else
    {
      BENEFICIO_AUTO = DEFICIT;
    }
    ELEGIBLE_REG = "*";
    STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

    STATUS2_CODE  = this.dm.dbClose ( OPEN2_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

    STATUS12_CODE  = this.dm.dbClose ( OPEN12_ID );
    if (Compare.equals(this.app.RUTINA_GBL, "RR"))
    {           
    	this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", BENEFICIO_AUTO  );
    	DETERMINAR_AEA.exec ( this.app );
    	// this.doReturn ( );  
    }
    else
    {
    	if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) ) 
    	{
    		SERVICIO_STATUS = "PENDREVI";
    	}
    	else
    	{
    		SERVICIO_STATUS = "PENDCERT";
    	}
    	SERVICIO_BENEFICIO = BENEFICIO_AUTO;

    	DETERMINAR_AEA.exec ( this.app );
    }    
    return;

  }


  /**
   *
   */
  protected void step10 ( ParameterSet ps )
  {
    DETERMINACION_FINAL_MENU.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step11 ( ParameterSet ps )
  {
    if ( ! ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "S" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "s" ) ) ) ) 
    {
      this.doReturn ( );
      return;
    }
    if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
    {
    DETER_ELEG_AEB_UPDATE_SERV_ADL.exec ( this.app );
    }
    return;

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE DETERMINAR_ELEGIBILIDAD_AE_B_ADL;

VAR

OPEN_ID : NUMBER;     
OPEN2_ID : NUMBER;
OPEN3_ID : NUMBER;
OPEN4_ID : NUMBER;
OPEN5_ID : NUMBER;
OPEN6_ID : NUMBER;
OPEN7_ID : NUMBER;
OPEN12_ID : NUMBER;

STATUS_CODE : NUMBER;
STATUS2_CODE : NUMBER;
STATUS7_CODE : NUMBER;
STATUS12_CODE : NUMBER;

AYUDA_PERMITIDA : NUMBER EXPORT;
FAM_ID : NUMBER;
SERVICIO_STATUS:        CHAR(8) EXPORT;
SERVICIO_BENEFICIO:     NUMBER EXPORT;
SAVE_SSN : NUMBER;
PERSONA_TRABAJA_FLG : NUMBER;
NUM_PADRES_TRABAJAN : NUMBER;

RECURSOS_ACUM : NUMBER EXPORT;
EDAD_IND : NUMBER;
INELEGIBLE_REG : CHAR(1) EXPORT;
INELEGIBLE_EMER : CHAR(1) EXPORT;
RAZON : CHAR(50) EXPORT;
INGRESO_BRUTO : NUMBER;
SALARIO : NUMBER EXPORT;
SEG_SOC : NUMBER EXPORT;
OTROS2 : NUMBER EXPORT;
OTROS : NUMBER EXPORT;
INGRESO_NETO : NUMBER EXPORT;
CUIDO_MENOR: NUMBER EXPORT;
CUIDO : NUMBER EXPORT;
INELEGIBLE_INGRE_BRUTO : CHAR(1);
DEDUCCION_INGRESO : NUMBER;
INCAPACITADO : NUMBER;
BENEFICIO : NUMBER EXPORT;
ELEGIBLE_REG : CHAR(1) EXPORT;
ELEGIBLE_EMER : CHAR(1) EXPORT;
TOTAL_CUIDO : NUMBER EXPORT;
GASTOS_INHE : NUMBER EXPORT;
GASTOS_INHERENTES : NUMBER EXPORT;
RESTE_30 : NUMBER EXPORT;
STATUS : CHAR(4);
CENTAVOS : NUMBER;
ING_TEMP : NUMBER;
EXCENCION_SAL : NUMBER EXPORT;
EXCENCION_TRABAJO : NUMBER EXPORT;
EXCENCION_PROD : NUMBER EXPORT;
EXCENCION_ALBERGUE : NUMBER EXPORT;
DEFICIT : NUMBER EXPORT;
SALARIO_CONYUGUE : NUMBER EXPORT;
INGRESO_ACREDITABLE : NUMBER EXPORT;
TOT_INGRE_ACREDI : NUMBER EXPORT;
NECESIDAD_AJUSTADA : NUMBER EXPORT;
TOT_AJUSTADA : NUMBER EXPORT;
TOTAL_OTROS : NUMBER EXPORT;
BENEFICIO_AUTO : NUMBER EXPORT;
MENOR : NUMBER EXPORT;
PARTE_PROP : NUMBER EXPORT;
NUM_FAMILIA : NUMBER;
INGRESO_BRUTO_PADRES : NUMBER EXPORT;
GASTOS_PADRES : NUMBER EXPORT;
SS_MENOR : NUMBER;
EXC_PROD : NUMBER EXPORT;
ADULTO : NUMBER EXPORT;
NINOS : NUMBER EXPORT;
REHABILITACION : NUMBER;
SALA : NUMBER;
ADIE : NUMBER;
NPRO : NUMBER;
CONY_SALA : NUMBER;
CONY_ADIE : NUMBER;
CONY_NPRO : NUMBER;
DEDUC_ALBE : NUMBER;
GASTOS_ALBE : NUMBER EXPORT;
CONY_PROD : NUMBER EXPORT;
CONYUGUE_INHERENTES : NUMBER EXPORT;
ACREDITABLE_CONYUGUE : NUMBER EXPORT;
ACREDITABLE_CONYUGUE_2 : NUMBER EXPORT;
GASTOS_IN : NUMBER export;
OTROS_PADRES : NUMBER export;
OTROS_CONY : NUMBER EXPORT;
AE_COUNT : NUMBER;
ESTA_CONY : NUMBER EXPORT;
ing_bruto_menor : number export;
prod : number export;
albe : number export;
ayud : number export;
FCH_EMISION : DATE;

BEGIN
SET_TRACE();
{       SS_JEFE_GBL := 583171929;
        SS_SERV_GBL := 583171929;
        COD_SERV_GBL := 'EAB';}
{FCH_SOLIC_SERV_GBL:=TO_DATE('01-JAN-1993');}

        DB_OPEN(NUCLEO_SERVICIO_DSD,OPEN_ID,STATUS_CODE);
        DB_OPEN(CLIENTES2_DSD,OPEN2_ID,STATUS2_CODE);
        DB_OPEN(RECURSOS_NUCLEO_DSD,OPEN3_ID,STATUS_CODE);
        DB_OPEN(BENEFICIOS_PAN_RO_DSD,OPEN4_ID,STATUS_CODE);
        DB_OPEN(INGRESOS_NUCLEO_DSD,OPEN5_ID,STATUS_CODE);
        DB_OPEN(GASTOS_NUCLEO_DSD,OPEN6_ID,STATUS_CODE);
        DB_OPEN(DETERMINA_RO_DSD,OPEN7_ID,STATUS7_CODE);
        DB_open(GENERAL_TBL_DSD,OPEN12_ID, STATUS12_CODE);
        DB_RESET(OPEN12_ID, STATUS12_CODE);
        GENERAL_TBL_DSD.COD_GENERAL := 'DATE';
        GENERAL_TBL_DSD.COD_ID := 'EAE';
        DB_QUERY(OPEN12_ID, STATUS12_CODE);
        DB_GET_FIRST(OPEN12_ID, STATUS12_CODE);
        IF STATUS12_CODE = 0 THEN
                FCH_EMISION := TO_DATE(SUBSTR(GENERAL_TBL_DSD.DSC_CORTA,0,2) || 
'-' ||
                                SUBSTR(GENERAL_TBL_DSD.DSC_CORTA,2,3) || '-'||
                                SUBSTR(GENERAL_TBL_DSD.DSC_CORTA,5,4));
        ELSE
                FCH_EMISION := SYSTEM_DATE;

CALL CHECK_ID_AUTORIZA_ADL;

{ VERIFICAR QUE NO SEA PARTICIPANTE O SOLICITANTE EN OTRO SERVICIO }
        AE_COUNT := 0;
        DB_RESET(OPEN_ID,STATUS_CODE);
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO := SS_SERV_GBL;
        NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN_ID,STATUS_CODE);
        IF STATUS_CODE = 0
        THEN
            BEGIN
                DB_GET_FIRST(OPEN_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                        IF SUBSTR(NUCLEO_SERVICIO_DSD.COD_SERVICIO,0,2) = 'AE'
                        THEN
                                AE_COUNT := AE_COUNT + 1;
                DB_GET_NEXT(OPEN_ID,STATUS_CODE);
                END;
            END; 

{ VERIFICAR EXISTENCIA DE MENOR COMO BENEFICIARIO PRINCIPAL}
        DB_RESET(OPEN_ID,STATUS_CODE);
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
        NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV := 'BNPR';
        NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN_ID,STATUS_CODE);
        DB_RESET(OPEN2_ID,STATUS2_CODE);
        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
        CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL
_BENEFICIARIO;
        DB_QUERY(OPEN2_ID,STATUS2_CODE);
        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
        EDAD_IND := MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES2_DSD.FCH_NACIMIENTO)/12;
        IF EDAD_IND < 18
        THEN
            BEGIN
               MENOR := 1;
               SS_MENOR := CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE;
            END;

{ TOTALIZAR RECURSOS }
        RECURSOS_ACUM := 0;
        DB_RESET(OPEN2_ID,STATUS2_CODE);
        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
        CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_SERV_GBL;
        DB_QUERY(OPEN2_ID,STATUS2_CODE);
        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
        STATUS := CLIENTES2_DSD.COD_ESTADO_CIVIL;
        IF (CLIENTES2_DSD.COD_ESTADO_CIVIL = 'CASA') OR (MENOR = 1)
        THEN 
             BEGIN
                DB_RESET(OPEN3_ID,STATUS_CODE);
                RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                RECURSOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
                RECURSOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
             END;
        ELSE 
             BEGIN
                DB_RESET(OPEN3_ID,STATUS_CODE);
                RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                RECURSOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
                RECURSOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV := 'BNPR';
                RECURSOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
             END;
        DB_QUERY(OPEN3_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN3_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0
                DO BEGIN
{                       DB_RESET(OPEN2_ID,STATUS2_CODE);
                        CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := RECURSOS_NUCLEO_D
SD.SEGURO_SOCIAL_BENEFICIARIO;
                        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                        DB_QUERY(OPEN2_ID,STATUS2_CODE);
                        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
                        EDAD_IND := MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES2_DSD.FCH
_NACIMIENTO)/12;
                        IF (EDAD_IND > 18) AND }
                        IF (RECURSOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 
'NCAT') AND
                           (SUBSTR(RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO,0,3) <> 
'VEH' )
                        THEN 
                        RECURSOS_ACUM := RECURSOS_ACUM +
                                RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO;
                        DB_GET_NEXT(OPEN3_ID,STATUS_CODE);
                   END;

{       IF (STATUS = 'RELA')
        THEN
            RECURSOS_ACUM := RECURSOS_ACUM;
}
{DETERMINAR ELEGIBILIDAD POR RECURSOS }
        IF RECURSOS_ACUM > 2000
        THEN BEGIN
                INELEGIBLE_REG := '*';
                RAZON := 'FAMILIA EXCEDE EL MAXIMO DE RECURSOS';
                DB_CLOSE(OPEN_ID,STATUS_CODE);
                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                DB_CLOSE(OPEN12_ID, STATUS12_CODE);
                IF AUTORIZADA_GBL = 'S'
                THEN SERVICIO_STATUS:='CERRAD03';
                ELSE SERVICIO_STATUS:='RECHAZ03';
                SERVICIO_BENEFICIO:=0;
                CALL DETERMINAR_AEA;
{                CALL DETERMINAR_AEB_PKT;}
                        call DETERMINACION_FINAL_MENU;
                        if not((DETERMINACION_FINAL_GBL = 'S') or
                               (DETERMINACION_FINAL_GBL = 's')) then return;
                 CALL DETER_ELEG_AEB_UPDATE_SERV_ADL;
                 CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);
                RECURSOS_ACUM:=0;
                RETURN;
            END;

{ Determinar Elegibilidad por Ingreso }
        SALARIO := 0;
        SEG_SOC := 0;
        OTROS := 0;
        SALA := 0;
        NPRO := 0;
        ADIE := 0;
        CONY_SALA := 0;
        CONY_NPRO := 0;
        CONY_ADIE := 0;
        REHABILITACION := 0;
        IF MENOR = 0
        THEN 
            BEGIN
                DB_RESET(OPEN2_ID,STATUS2_CODE);
                CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_SERV_GBL;
                CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN2_ID,STATUS2_CODE);
                DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);

                IF CLIENTES2_DSD.FLG_REHABILITACION_VOC = 'S'
                THEN
                   REHABILITACION := 1;
             END;
        
        DB_RESET(OPEN5_ID,STATUS_CODE);
        INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        INGRESOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        INGRESOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        IF MENOR = 1
        THEN
           INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO := SS_MENOR;
        DB_QUERY(OPEN5_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN5_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
        BEGIN
{
   Rutina para implementar computo de ingreso a base
   de norma de 4.0(AE) y 4.3(PAN).
   Se provee tambien para entrar ingreso AE segun forma AE-98
        9-MAYO-1994   Ramon Fardonk/Jorge Rodriguez
}
   IF ((SUBSTR(COD_SERV_GBL,0,3)='PAN') AND (INGRESOS_NUCLEO_DSD.FLG_PAN = 'X'))
 OR
        ((SUBSTR(COD_SERV_GBL,0,2)='AE') AND (INGRESOS_NUCLEO_DSD.FLG_AE = 'X'))
        THEN BEGIN
               INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                 INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;
                IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                THEN BEGIN
                     INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                     TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                     END;
             END;
        ELSE BEGIN
                IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                THEN BEGIN
                     INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                     TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                     END;
               IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='S')
                  THEN BEGIN
                       IF (SUBSTR(COD_SERV_GBL,0,3)='PAN') OR
                          (SUBSTR(COD_SERV_GBL,0,4)<>'AE-C')
                          THEN BEGIN
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4.3;
                               END;
                          ELSE IF (SUBSTR(COD_SERV_GBL,0,2)='AE-C')
                               THEN BEGIN
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4
.3;
                                    END;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='B')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.15;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='Q')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.0;
                       END;
               ELSE BEGIN
{                         Entro 'M' o estaba en blanco }
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 1.0;
                    END;
                IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                THEN BEGIN
                     INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                     TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                     END;
        END;

                DB_RESET(OPEN2_ID,STATUS2_CODE);
                CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := 
                        INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
                CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN2_ID,STATUS2_CODE);
                DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);

             IF REHABILITACION = 0
             THEN 
                BEGIN
                  IF (((INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA') OR
                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADIE') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'NPRO') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRN') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAS') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAC') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BILV') OR
                       (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA')) AND
                       (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCA
T'))
                  THEN
                  BEGIN
                         IF ((INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO = S
S_SERV_GBL) AND
                             (SUBSTR(COD_SERV_GBL,3,1) = 'B'))
                         OR
                            ((INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO = S
S_SERV_GBL) AND
                             (SUBSTR(COD_SERV_GBL,3,1) = 'G'))
                         THEN 
                           BEGIN
                              SALARIO := SALARIO + 
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;
                              INGRESO_BRUTO := INGRESO_BRUTO + 
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;

                              IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA')
 OR
                                 (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB')
 OR
                                 (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA')
                              THEN
                                 SALA := SALA + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD
_INGRESO;
                              ELSE
                                 IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADI
E') 
                                 THEN
                                    ADIE := ADIE + INGRESOS_NUCLEO_DSD.VLR_CANTI
DAD_INGRESO;
                                 ELSE
                                    IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = '
NPRO') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'AGRN') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'BIAS') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'BIAC')
                                    THEN
                                       NPRO := NPRO + INGRESOS_NUCLEO_DSD.VLR_CA
NTIDAD_INGRESO;
                              END;
                         ELSE 
                             IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SER
V = 'NA') and
                                ((CLIENTES2_DSD.COD_PARENTESCO_FAM = 'CONY') OR
                                 (CLIENTES2_DSD.COD_PARENTESCO_FAM = 'JEFE'))
                             THEN
                             BEGIN
                              SALARIO_CONYUGUE := SALARIO_CONYUGUE +
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;

                              IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA')
 OR
                                 (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB')
 OR
                                 (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA')
                              THEN
                                 CONY_SALA := CONY_SALA + INGRESOS_NUCLEO_DSD.VL
R_CANTIDAD_INGRESO;
                              ELSE
                                 IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADI
E') 
                                 THEN
                                    CONY_ADIE := CONY_ADIE + INGRESOS_NUCLEO_DSD
.VLR_CANTIDAD_INGRESO;
                                 ELSE
                                    IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = '
NPRO') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'AGRN') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'BIAS') OR
                                        (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 
'BIAC')
                                    THEN
                                       CONY_NPRO := CONY_NPRO + INGRESOS_NUCLEO_
DSD.VLR_CANTIDAD_INGRESO;

                             END;
                END;
                ELSE
                    IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV = 'NA')
 AND
                       ((CLIENTES2_DSD.COD_PARENTESCO_FAM = 'CONY') OR
                        (CLIENTES2_DSD.COD_PARENTESCO_FAM = 'JEFE'))
                    THEN
                        OTROS_CONY := OTROS_CONY + 
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;
                    ELSE
                    IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCA
T') and
                       (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NA'
)
                    THEN
                       OTROS := OTROS + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;
                END;

              ELSE BEGIN
                   IF INGRESOS_NUCLEO_DSD.FLG_AE <> ''
                   THEN 
                      BEGIN
                        IF ((INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADIE') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'NPRO') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRN') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAS') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAC') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BILV') OR
                            (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA')) AND
                            (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <>
 'NCAT')
                        THEN 
                            BEGIN
                                IF ((INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIA
RIO = SS_SERV_GBL) AND
                                    (SUBSTR(COD_SERV_GBL,3,1) = 'B'))
                                OR
                                    ((SUBSTR(COD_SERV_GBL,3,1) = 'G') AND
                                     (CLIENTES2_DSD.COD_INCAPACIDAD_PRIMARIA <> 
'NA'))
                                 THEN 
                                    BEGIN
                                        SALARIO := SALARIO + 
                                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD
_REHABILITACION;
                                        INGRESO_BRUTO := INGRESO_BRUTO + 
                                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD
_REHABILITACION;

                                        IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'SALA') OR
                                           (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'AGRB') OR
                                           (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'PTRA')
                                        THEN
                                           SALA := SALA + INGRESOS_NUCLEO_DSD.VL
R_CANTIDAD_REHABILITACION;
                                        ELSE
                                           IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGR
ESO = 'ADIE') 
                                           THEN
                                                ADIE := ADIE + INGRESOS_NUCLEO_D
SD.VLR_CANTIDAD_REHABILITACION;
                                           ELSE
                                                IF (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'NPRO') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'AGRN') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'BIAS') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'BIAC')
                                                THEN
                                                        NPRO := NPRO + INGRESOS_
NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;

                                      END;
                                 ELSE
                                     IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELA
CION_SERV = 'NA') AND
                                        ((CLIENTES2_DSD.COD_PARENTESCO_FAM = 'CO
NY') OR
                                         (CLIENTES2_DSD.COD_PARENTESCO_FAM = 'JE
FE'))
                                     THEN
                                     BEGIN
                                        SALARIO_CONYUGUE := SALARIO_CONYUGUE +
                                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD
_REHABILITACION;
                                        IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'SALA') OR
                                           (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'AGRB') OR
                                           (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO
 = 'PTRA')
                                        THEN
                                                CONY_SALA := CONY_SALA + INGRESO
S_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;
                                        ELSE
                                           IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGR
ESO = 'ADIE') 
                                           THEN
                                                CONY_ADIE := CONY_ADIE + INGRESO
S_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;
                                           ELSE
                                                IF (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'NPRO') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'AGRN') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'BIAS') OR
                                                   (INGRESOS_NUCLEO_DSD.COD_TIPO
_INGRESO = 'BIAC')
                                                THEN
                                                    CONY_NPRO := CONY_NPRO + ING
RESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;
                                     END;
                            END;
                        ELSE
                        IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV = '
NA') AND
                           ((CLIENTES2_DSD.COD_PARENTESCO_FAM = 'CONY') OR
                            (CLIENTES2_DSD.COD_PARENTESCO_FAM = 'JEFE'))
                        THEN
                                OTROS_CONY := OTROS_CONY + 
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABIL
ITACION;
                        ELSE
                            IF ((INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO 
= SS_SERV_GBL) AND
                                    (SUBSTR(COD_SERV_GBL,3,1) = 'B'))
                            OR
                                    ((SUBSTR(COD_SERV_GBL,3,1) = 'G') AND
                                     (CLIENTES2_DSD.COD_INCAPACIDAD_PRIMARIA <> 
'NA'))
                            THEN
                                 OTROS := OTROS + 
                                        INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABIL
ITACION;

                        END;
                 END;                   
        DB_GET_NEXT(OPEN5_ID,STATUS_CODE);
        END;
{         SALARIO := TRUNC(SALARIO);}
{         SALARIO_CONYUGUE := TRUNC(SALARIO_CONYUGUE);}
          OTROS2:= OTROS;
          OTROS := OTROS+OTROS_CONY;
{         INGRESO_BRUTO := TRUNC(INGRESO_BRUTO);}

{ PARTE PROPORCIONAL DEL CONYUGUE }

IF (SALARIO_CONYUGUE > 0)
THEN
BEGIN
        CONYUGUE_INHERENTES := 0;
        IF (CONY_SALA = 0) AND (CONY_NPRO > 0)
        THEN
        BEGIN
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO:=COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV := 'NA';
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
        BEGIN
             IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'PROA') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'PROC') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ALBE') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ESTU') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ANCI') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'MEDI') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'CUID') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'AYUD') 
             THEN
                GASTOS_INHERENTES := GASTOS_INHERENTES + 
                        GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
             DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
        END;
        CONYUGUE_INHERENTES := TRUNC(GASTOS_INHERENTES);
        END;

        IF SALARIO_CONYUGUE >= CONYUGUE_INHERENTES
        THEN BEGIN
                ACREDITABLE_CONYUGUE_2 := SALARIO_CONYUGUE - CONYUGUE_INHERENTES
;
                ACREDITABLE_CONYUGUE := SALARIO_CONYUGUE - CONYUGUE_INHERENTES;
             END;
        ELSE BEGIN
                ACREDITABLE_CONYUGUE_2 := 0;
                ACREDITABLE_CONYUGUE := 0;
             END;

{ RESTE LOS GASTOS DE PRODUCCION AL CONYUGUE }
               IF ACREDITABLE_CONYUGUE >= 75
               THEN BEGIN
                        ACREDITABLE_CONYUGUE_2 := ACREDITABLE_CONYUGUE - 75;
                        ACREDITABLE_CONYUGUE := ACREDITABLE_CONYUGUE - 75;
                        CONY_PROD := 75;
                    END;
               ELSE BEGIN
                       ACREDITABLE_CONYUGUE_2 := 0;
                       ACREDITABLE_CONYUGUE := 0;
                    END;
END; 

{ RESTE AYUDA A FAMILIARES }
{(SUBSTR(COD_SERV_GBL,3,1) = 'D') AND (SALARIO_CONYUGUE > 0)}

        IF (ACREDITABLE_CONYUGUE > 0)
        THEN
        BEGIN
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV := 'NA';
        GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='AYUD';
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        IF STATUS_CODE = 0
        THEN 
            BEGIN
                GASTOS_ALBE := (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE);
                ACREDITABLE_CONYUGUE_2 := 0;            
                IF ACREDITABLE_CONYUGUE >= GASTOS_ALBE
                THEN BEGIN
                        IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'AYUD') AND
                           (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE <> 0)
                        THEN BEGIN
                                AYUDA_PERMITIDA := 64 + ((GASTOS_NUCLEO_DSD.NUM_
PERSONAS_AYUDA - 1)*48);
                                IF (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE >=
 AYUDA_PERMITIDA)
                                THEN BEGIN
                                      GASTOS_ALBE := AYUDA_PERMITIDA;
                                      ACREDITABLE_CONYUGUE_2 := ACREDITABLE_CONY
UGUE- AYUDA_PERMITIDA;
                                      ACREDITABLE_CONYUGUE := ACREDITABLE_CONYUG
UE - AYUDA_PERMITIDA;
                                     END;
                                ELSE BEGIN
                                      ACREDITABLE_CONYUGUE_2 := ACREDITABLE_CONY
UGUE - GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
                                      ACREDITABLE_CONYUGUE := ACREDITABLE_CONYUG
UE - GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
                                     END;
                             END;
                     END;
                ELSE
                        ACREDITABLE_CONYUGUE := 0;

             END;
        END;

{ END PARTE PROPORCIONAL CONYUGUE}

{ SE COMPARA CONTRA TABLA DE EXENCION AL INGRESO POR TRABAJO }
        CENTAVOS := 0;
        ING_TEMP := 0;
        EXCENCION_SAL := 0;
        EXCENCION_TRABAJO := 0;
        INGRESO_ACREDITABLE := SALARIO;
        CENTAVOS := INGRESO_ACREDITABLE - TRUNC(INGRESO_ACREDITABLE);
        IF SUBSTR(COD_SERV_GBL,3,1) = 'B'
        THEN 
        BEGIN
         IF CENTAVOS > 0 
          THEN 
                ING_TEMP := TRUNC(INGRESO_ACREDITABLE + 1);
          ELSE 
                ING_TEMP := INGRESO_ACREDITABLE;

          IF ING_TEMP <= 85
          THEN 
                EXCENCION_SAL := ING_TEMP;
          ELSE 
                EXCENCION_SAL := 85 + ((ING_TEMP - 85)/2);

         {EXCENCION_SAL := TRUNC(EXCENCION_SAL);}
 
         IF (SALA = 0) AND (NPRO > 0)
         THEN 
         BEGIN
                IF GASTOS_INHE >= EXCENCION_SAL
                THEN
                   EXCENCION_TRABAJO := GASTOS_INHE - EXCENCION_SAL;
                ELSE
                   EXCENCION_TRABAJO := 0;
         END;

        IF (SALA > 0) AND (NPRO = 0)
        THEN
        BEGIN
         IF SALARIO >= EXCENCION_SAL
         THEN
           EXCENCION_TRABAJO := SALARIO - EXCENCION_SAL;
         ELSE
           EXCENCION_TRABAJO := 0;
        END;

{       EXCENCION_TRABAJO := TRUNC(EXCENCION_TRABAJO);}

        END;


{       IF SUBSTR(COD_SERV_GBL,3,1) = 'G'
        THEN 
        BEGIN
         IF CENTAVOS > 0 
          THEN 
                ING_TEMP := TRUNC(INGRESO_ACREDITABLE + 1);
          ELSE 
                ING_TEMP := INGRESO_ACREDITABLE;

          IF ING_TEMP <= 20
          THEN 
                EXCENCION_SAL := ING_TEMP;
          ELSE 
                EXCENCION_SAL := 20 + ((ING_TEMP - 20)/2);

          IF EXCENCION_SAL > 50
          THEN 
                EXCENCION_SAL := 50;

         EXCENCION_SAL := TRUNC(EXCENCION_SAL);
 

         IF (SALA = 0) AND (NPRO > 0)
         THEN 
         BEGIN
                IF GASTOS_INHE >= EXCENCION_SAL
                THEN
                   EXCENCION_TRABAJO := GASTOS_INHE - EXCENCION_SAL;
                ELSE
                   EXCENCION_TRABAJO := 0;
         END;

        IF (SALA > 0) AND (NPRO = 0)
        THEN
        BEGIN
         IF SALARIO >= EXCENCION_SAL
         THEN
           EXCENCION_TRABAJO := SALARIO - EXCENCION_SAL;
         ELSE
           EXCENCION_TRABAJO := 0;
        END;

        EXCENCION_TRABAJO := TRUNC(EXCENCION_TRABAJO);

        END;
}
        IF (SALA > 0) AND (NPRO = 0)
        THEN
                IF INGRESO_ACREDITABLE >= EXCENCION_SAL
                THEN
                 INGRESO_ACREDITABLE := INGRESO_BRUTO - EXCENCION_SAL;
                ELSE
                 INGRESO_ACREDITABLE := 0;
        ELSE
                IF INGRESO_ACREDITABLE >= EXCENCION_SAL
                THEN
                    INGRESO_ACREDITABLE := INGRESO_ACREDITABLE - EXCENCION_SAL;
                ELSE
                    INGRESO_ACREDITABLE := 0;

{ RESTE GASTOS INHERENTES AL NEGOCIO PROPIO}
        GASTOS_INHERENTES := 0;
        GASTOS_INHE := 0;
        IF (SALA = 0) AND (NPRO > 0)
        THEN 
            BEGIN
                DB_RESET(OPEN6_ID,STATUS_CODE);
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_SERVICIO:=COD_SERV_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO := SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE := 'GINP';
                GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN6_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                     IF (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL
') AND
                        (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAT
') 
                     THEN
                        GASTOS_INHERENTES := GASTOS_INHERENTES + 
                                GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
                   DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
                END;
                GASTOS_INHERENTES := TRUNC(GASTOS_INHERENTES);

        END;
                IF INGRESO_ACREDITABLE >= GASTOS_INHERENTES
                THEN
                    GASTOS_INHE := INGRESO_ACREDITABLE - GASTOS_INHERENTES;
                ELSE
                    GASTOS_INHE := 0;

        IF INGRESO_ACREDITABLE >= GASTOS_INHERENTES
        THEN
           INGRESO_ACREDITABLE := INGRESO_ACREDITABLE - GASTOS_INHERENTES;
        ELSE
           INGRESO_ACREDITABLE := 0;


{ RESTE LOS GASTOS DE PRODUCCION }
        EXCENCION_PROD := 0;
        IF (SALARIO > 0)
        THEN BEGIN
                        EXC_PROD := 75;
                        IF EXCENCION_TRABAJO >= 75
                        THEN
                            EXCENCION_PROD := EXCENCION_TRABAJO - 75;
                        ELSE
                            EXCENCION_PROD := 0;

                        IF INGRESO_ACREDITABLE >= 75
                        THEN
                            INGRESO_ACREDITABLE := INGRESO_ACREDITABLE - 75;
                        ELSE
                            INGRESO_ACREDITABLE := 0;
             END;
                

{ CASOS ACTIVOS CAT. C }
        RESTE_30 := 0;

{ GASTOS POR CUIDO DE MENORES }
        CUIDO_MENOR := 0;
        TOTAL_CUIDO := 0;
{       IF MENOR <> 1
        THEN BEGIN
                DB_RESET(OPEN6_ID,STATUS_CODE);
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO:=SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='CUID';
                GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN6_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
                IF STATUS_CODE = 0 
                THEN 
                BEGIN
                        DB_RESET(OPEN2_ID,STATUS2_CODE);
                        CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_SERV_GBL;
                        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                        DB_QUERY(OPEN2_ID,STATUS2_CODE);
                        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
                        IF CLIENTES2_DSD.COD_ESTATUS_EMPLEO = 'DES2'
                        THEN 
                             BEGIN
                              IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 80
                              THEN
                                  CUIDO_MENOR := 80;
                              ELSE
                                  CUIDO_MENOR := GASTOS_NUCLEO_DSD.VLR_CANTIDAD_
DEDUCCIONE;
                             END;
                        ELSE
                             IF CLIENTES2_DSD.COD_ESTATUS_EMPLEO = 'EMPL'
                             THEN 
                                  BEGIN
                                   IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE 
> 160
                                   THEN
                                      CUIDO_MENOR := 160;
                                   ELSE
                                      CUIDO_MENOR := GASTOS_NUCLEO_DSD.VLR_CANTI
DAD_DEDUCCIONE;
                                  END;
                     END;
                END;

          IF GASTOS_INHE >= CUIDO_MENOR
          THEN
             TOTAL_CUIDO := GASTOS_INHE - CUIDO_MENOR;
          ELSE
             TOTAL_CUIDO := 0;
}
          IF INGRESO_ACREDITABLE >= CUIDO_MENOR
          THEN
             INGRESO_ACREDITABLE := INGRESO_ACREDITABLE - CUIDO_MENOR;
          ELSE
             INGRESO_ACREDITABLE := 0;

{ TOTAL INGRESOS ACREDITABLES A + B PARA CATEGORIA C }

        TOT_INGRE_ACREDI :=  INGRESO_ACREDITABLE;


{ RESTE AYUDA A FAMILIARES DEL CONYUGUE CON INGRESOS NO DEBENGADOS }
{(SUBSTR(COD_SERV_GBL,3,1) = 'D') AND (SALARIO_CONYUGUE > 0)}

        IF OTROS_CONY > 0
        THEN
        BEGIN
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV := 'NA';
        GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='AYUD';
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        IF STATUS_CODE = 0
        THEN 
            BEGIN
                    GASTOS_ALBE := (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE);

{               IF OTROS >= GASTOS_ALBE
                THEN
                        OTROS := OTROS - GASTOS_ALBE;
                ELSE
                        OTROS := 0;}

             END;
        END;

       ACREDITABLE_CONYUGUE_2 := ACREDITABLE_CONYUGUE + OTROS_CONY;

{ RESTE LOS GASTOS DE ALBERGUE DEL CONYUGUE }
       IF (ACREDITABLE_CONYUGUE_2 > 0)
        THEN
        BEGIN
        DEDUC_ALBE := 0;
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV := 'NA';
        GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='ALBE';
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        IF STATUS_CODE = 0
        THEN 
            BEGIN

               IF (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE) > 200
                THEN BEGIN
                        DEDUC_ALBE := 200;
                        EXCENCION_ALBERGUE := 200;
                     END;
                ELSE BEGIN
                        DEDUC_ALBE := (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE
);
                        EXCENCION_ALBERGUE := DEDUC_ALBE;
                     END;
        
               IF (ACREDITABLE_CONYUGUE_2) >= DEDUC_ALBE
                   THEN BEGIN
                        ACREDITABLE_CONYUGUE_2 := (ACREDITABLE_CONYUGUE_2) - DED
UC_ALBE;
                     END;
                ELSE BEGIN
                        ACREDITABLE_CONYUGUE_2 := 0;
                     END;

             END;

        END;


{ TOTAL OTROS INGRESOS }
        IF ACREDITABLE_CONYUGUE_2 <> 0
        THEN
        TOTAL_OTROS := TOT_INGRE_ACREDI + OTROS2 + ACREDITABLE_CONYUGUE_2;
        ELSE
        TOTAL_OTROS := TOT_INGRE_ACREDI + OTROS2;


DEBUG_LOG(TO_CHAR(TOTAL_OTROS));
{ CALCULAR PARTE PROPORCIONAL DE LOS PADRES CUANDO MENOR 
  ES EL BENEFICIARIO PRINCIPAL }
        INGRESO_BRUTO_PADRES := 0;
        ing_bruto_menor :=0;
        prod := 0;
        albe := 0;
        ayud := 0;
        IF MENOR >= 1
        THEN 
            BEGIN
                DB_RESET(OPEN5_ID,STATUS_CODE);
                INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                INGRESOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
                INGRESOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN5_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN5_ID,STATUS_CODE);
                SAVE_SSN:=0;
                SAVE_SSN:=INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
                PERSONA_TRABAJA_FLG:=0;
                WHILE STATUS_CODE = 0 DO
                BEGIN
                {
                   Rutina para implementar computo de ingreso a base
                   de norma de 4.0(AE) y 4.3(PAN).
                   Se provee tambien para entrar ingreso AE segun forma AE-98
                }
               IF ((SUBSTR(COD_SERV_GBL,0,3)='PAN') AND (INGRESOS_NUCLEO_DSD.FLG
_PAN = 'X')) OR
                ((SUBSTR(COD_SERV_GBL,0,2)='AE') AND (INGRESOS_NUCLEO_DSD.FLG_AE
 = 'X'))
                THEN BEGIN
                      INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                      INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION;
                      IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                      THEN BEGIN
                            INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                            TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                           END;
                     END;
                ELSE BEGIN
                IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                THEN BEGIN
                     INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                     TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                     END;
               IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='S')
                  THEN BEGIN
                       IF (SUBSTR(COD_SERV_GBL,0,3)='PAN') OR
                          (SUBSTR(COD_SERV_GBL,0,4)<>'AE-C')
                          THEN BEGIN
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4.3;
                               END;
                          ELSE IF (SUBSTR(COD_SERV_GBL,0,2)='AE-C')
                               THEN BEGIN
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4
.3;
                                    END;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='B')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.15;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='Q')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.0;
                       END;
               ELSE BEGIN
{                         Entro 'M' o estaba en blanco }
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 1.0;
                    END;
                IF (SUBSTR(COD_SERV_GBL,0,3)='PAN')
                THEN BEGIN
                     INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                     TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
                     END;
                END;
                     DB_RESET(OPEN2_ID,STATUS2_CODE);
                     CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := INGRESOS_NUCLEO_DSD.
SEGURO_SOCIAL_BENEFICIARIO;
                     CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                     DB_QUERY(OPEN2_ID,STATUS2_CODE);
                     DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);

                     EDAD_IND := MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES2_DSD.FCH_NA
CIMIENTO)/12;
                     IF EDAD_IND > 18
                     THEN 
                        BEGIN
                          IF ((INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADIE') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'NPRO') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRN') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAS') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAC') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BILV') OR
                              (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA')) A
ND
                              ( (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SER
V = 'EXIN'))
{(INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV = 'NA') OR}
                          THEN BEGIN
                                    NUM_PADRES_TRABAJAN:=NUM_PADRES_TRABAJAN+1;
                                    INGRESO_BRUTO_PADRES := INGRESO_BRUTO_PADRES
 + 
                                           INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGR
ESO;
                                    ing_bruto_menor := ing_bruto_menor +
                                           INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGR
ESO;

                               END;
                          ELSE
                                OTROS_PADRES := OTROS_PADRES +
                                           INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGR
ESO;
                          END;
                DB_GET_NEXT(OPEN5_ID,STATUS_CODE);
                IF SAVE_SSN <> INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO
                THEN BEGIN
                        SAVE_SSN:=INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO
;
                        PERSONA_TRABAJA_FLG:=0;
                     END;
                 END;
            END;
{                 INGRESO_BRUTO_PADRES := TRUNC(INGRESO_BRUTO_PADRES);}

                DB_RESET(OPEN6_ID,STATUS_CODE);
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_SERVICIO:=COD_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE := 'GINP';
                GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN6_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                     IF (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV = 'NA')
                     THEN
                        GASTOS_IN := GASTOS_IN + 
                                GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
                   DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
                END;
                GASTOS_IN := TRUNC(GASTOS_IN);

        INGRESO_BRUTO_PADRES := INGRESO_BRUTO_PADRES - GASTOS_IN;

        IF INGRESO_BRUTO_PADRES > 0
        THEN begin
                prod := prod + (75 * NUM_PADRES_TRABAJAN);
                INGRESO_BRUTO_PADRES := INGRESO_BRUTO_PADRES - (75 * NUM_PADRES_
TRABAJAN);
             end;

        INGRESO_BRUTO_PADRES := INGRESO_BRUTO_PADRES + OTROS_PADRES;

{ RESTE LOS GASTOS SI ES MENOR }
        GASTOS_PADRES := 0;
        IF MENOR >= 1
        THEN BEGIN
                DB_RESET(OPEN6_ID,STATUS_CODE);
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
                GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN6_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                     IF ( GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'PROA') AND
                        ( GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'GINP') AND
                        ( GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCA
L') AND
                        ( GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCA
T')
                     THEN BEGIN
                          IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'ALBE')
                          then
                          if (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 200)
                          THEN begin
                                 albe := albe + 200;
                                 GASTOS_PADRES := GASTOS_PADRES + 200;
                               end;
                          ELSE begin
                                albe := albe + GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DE
DUCCIONE;
                                GASTOS_PADRES := GASTOS_PADRES + GASTOS_NUCLEO_D
SD.VLR_CANTIDAD_DEDUCCIONE;
                               end;

                          IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'AYUD')
                          then
                               begin
                                IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'AYU
D') AND
                                   (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE <>
 0)
                                THEN BEGIN
                                     AYUDA_PERMITIDA := 64 + ((GASTOS_NUCLEO_DSD
.NUM_PERSONAS_AYUDA - 1)*48);
                                     IF (GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIO
NE >= AYUDA_PERMITIDA)
                                     THEN BEGIN
                                            ayud := AYUDA_PERMITIDA;
                                            GASTOS_PADRES := GASTOS_PADRES + AYU
DA_PERMITIDA;
                                          END;
                                     ELSE BEGIN
                                            ayud := GASTOS_NUCLEO_DSD.VLR_CANTID
AD_DEDUCCIONE;
                                            GASTOS_PADRES := GASTOS_PADRES + GAS
TOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
                                          END;
                                        
                                     END;
                               END;
                        IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'AYUD') AND
                           (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ALBE')
                        THEN 
                           GASTOS_PADRES := GASTOS_PADRES + GASTOS_NUCLEO_DSD.VL
R_CANTIDAD_DEDUCCIONE;
                        END;
                DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
                END;
             END;

                IF INGRESO_BRUTO_PADRES >= GASTOS_PADRES
                THEN
                    INGRESO_BRUTO_PADRES := INGRESO_BRUTO_PADRES - GASTOS_PADRES
;
                ELSE
                    INGRESO_BRUTO_PADRES := 0;

{ RESTE LOS GASTOS DE PRODUCCION }
        IF (MENOR = 0) AND (INGRESO_BRUTO_PADRES > 0)
        THEN BEGIN
                IF INGRESO_BRUTO_PADRES >= 75
                THEN
                 INGRESO_BRUTO_PADRES:= INGRESO_BRUTO_PADRES - 75;
                ELSE
                 INGRESO_BRUTO_PADRES:=0;
             END;

{ NUMERO DE MIEMBROS DE LA FAMILIA }
        NUM_FAMILIA := 0;
{       DB_OPEN(CLIENTES_RO_DSD,FAM_ID,STATUS_CODE);
        DB_RESET(FAM_ID,STATUS_CODE);
        CLIENTES_RO_DSD.SEGURO_SOCIAL_JEFE_FAMILIA:=SS_JEFE_GBL;
        CLIENTES_RO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(FAM_ID,STATUS_CODE);
        DB_GET_FIRST(FAM_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
           BEGIN
             NUM_FAMILIA:=NUM_FAMILIA+1;
             DB_GET_NEXT(FAM_ID,STATUS_CODE);
           END;
        DB_CLOSE(FAM_ID,STATUS_CODE);
}
        IF MENOR >= 1
        THEN BEGIN
                DB_RESET(OPEN_ID,STATUS_CODE);
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
                NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                    DB_RESET(OPEN2_ID,STATUS2_CODE);
                    CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE :=
                            NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
                    CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                    DB_QUERY(OPEN2_ID,STATUS2_CODE);
                    DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
                    EDAD_IND := MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES2_DSD.FCH_NAC
IMIENTO)/12;
                    IF (EDAD_IND > 18)
                    THEN BEGIN
                            ADULTO := ADULTO + 1;
                         END;
                DB_GET_NEXT(OPEN_ID,STATUS_CODE);
                END;

                DB_RESET(OPEN_ID,STATUS_CODE);
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
                NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN_ID,STATUS_CODE);
                WHILE STATUS_CODE = 0 DO
                BEGIN
                    DB_RESET(OPEN2_ID,STATUS2_CODE);
                    CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE :=
                            NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
                    CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                    DB_QUERY(OPEN2_ID,STATUS2_CODE);
                    DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
                    EDAD_IND := MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES2_DSD.FCH_NAC
IMIENTO)/12;
                    IF (EDAD_IND < 18)
                    THEN BEGIN
                           NINOS := NINOS + 1;
                         END;
                DB_GET_NEXT(OPEN_ID,STATUS_CODE);
                END;
             END;

{ PARTE PROPORCINAL CAT. B }
        PARTE_PROP := 0;
        IF MENOR >= 1
        THEN
           IF INGRESO_BRUTO_PADRES > 0
           THEN
              PARTE_PROP := (INGRESO_BRUTO_PADRES / (ADULTO + NINOS));
           ELSE
              PARTE_PROP := 0;

        IF MENOR = 1
        THEN
            BEGIN
             NINOS := 1;
             ADULTO := 0;
            END;
        ELSE
           BEGIN
            ADULTO := 1;
            NINOS := 0;
           END;
        
{ TOTAL INGRESO NETO }
        DB_RESET(OPEN_ID,STATUS_CODE);
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
        NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV := 'NA';
        NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN_ID,STATUS_CODE);
        IF STATUS_CODE = 0
        THEN
            ESTA_CONY := 1;

        IF (MENOR = 0) AND ((STATUS = 'CASA') OR (STATUS = 'CONV')) AND 
           (ESTA_CONY = 1)
        THEN
            BEGIN 
              PARTE_PROP := TRUNC(ACREDITABLE_CONYUGUE_2)/2;
              INGRESO_NETO := ((TOT_INGRE_ACREDI + OTROS2)/2)+ PARTE_PROP ;
            END;
        ELSE
              INGRESO_NETO := (TOT_INGRE_ACREDI + OTROS2)+ PARTE_PROP ;

        INGRESO_NETO := TRUNC(INGRESO_NETO);

{ NECESIDADES BASICAS AJUSTADAS }
        NECESIDAD_AJUSTADA := 0;
        DB_RESET(OPEN2_ID,STATUS2_CODE);
        IF MENOR = 0
        THEN
           CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_SERV_GBL;
        ELSE
           CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_MENOR;
        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN2_ID,STATUS2_CODE);
        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);

        DB_RESET(OPEN7_ID,STATUS7_CODE);
        DETERMINA_RO_DSD.COD_SERVICIO := COD_SERV_GBL;
        DB_QUERY(OPEN7_ID,STATUS7_CODE);
        DB_GET_FIRST(OPEN7_ID,STATUS7_CODE);
        WHILE (STATUS7_CODE = 0) AND
        (DETERMINA_RO_DSD.FECHA_EFECTIVIDAD <= FCH_EMISION) DO
        BEGIN
                IF CLIENTES2_DSD.COD_INSTITUCION = 'HOSU'
                THEN
                   NECESIDAD_AJUSTADA := DETERMINA_RO_DSD.NECESIDAD_AJUSTADA_HOS
U;
                ELSE
                   NECESIDAD_AJUSTADA := DETERMINA_RO_DSD.NECESIDAD_AJUSTADA;

                DB_GET_NEXT(OPEN7_ID,STATUS7_CODE);
        END;

{ ALBERGUE AJUSTADO }
        CENTAVOS := 0;
        ING_TEMP := 0;
        EXCENCION_ALBERGUE := 0;
IF CLIENTES2_DSD.COD_INSTITUCION <> 'HOSU'
THEN
BEGIN
        IF (MENOR = 0) AND (NECESIDAD_AJUSTADA <> 0)
        THEN
        BEGIN
            DB_RESET(OPEN6_ID,STATUS_CODE);
            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
            GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO:=SS_SERV_GBL;
            GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='ALBE';
            GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
            DB_QUERY(OPEN6_ID,STATUS_CODE);
            DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
            IF STATUS_CODE = 0
            THEN BEGIN
                IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE <> 0
                THEN
                BEGIN
                  CENTAVOS := TRUNC(GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE);
                  IF CENTAVOS > 0
                  THEN
                        ING_TEMP := TRUNC(GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCI
ONE);
                  ELSE
                        ING_TEMP := GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;

                IF (ING_TEMP >= 0.01) AND (ING_TEMP < 3) 
                THEN
                        EXCENCION_ALBERGUE := 1;
                ELSE
                   IF ing_temp > 200 
                   THEN
                        EXCENCION_ALBERGUE := 100;
                   else
                        excencion_albergue :=ROUND(ing_temp/2);

                  IF EXCENCION_ALBERGUE > 100 
                  THEN
                        EXCENCION_ALBERGUE := 100;
                 END;
                END; {IF GASTO <> 0}
        END;
END;
{            EXCENCION_ALBERGUE := TRUNC(EXCENCION_ALBERGUE); }


{ TOTAL NECESIDADES AJUSTADAS }

        TOT_AJUSTADA := NECESIDAD_AJUSTADA + EXCENCION_ALBERGUE;

{ CALCULAR EL DEFICIT }
DEBUG_LOG(TO_CHAR(tot_ajustada));
DEBUG_LOG(TO_CHAR(ingreso_neto));

        IF TOT_AJUSTADA >= INGRESO_NETO
        THEN
           DEFICIT := TOT_AJUSTADA - TRUNC(INGRESO_NETO);
        ELSE
           DEFICIT := 0;

        DEFICIT := TRUNC(DEFICIT);

{ BENEFICIO AUTORIZADO }
        BENEFICIO_AUTO := 0;
        IF DEFICIT < 1
        THEN
            BEGIN
                INELEGIBLE_REG := '*';
                RAZON := 'SOLICITANTE INELEGIBLE POR INGRESOS';
                DB_CLOSE(OPEN_ID,STATUS_CODE);
                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                DB_CLOSE(OPEN12_ID, STATUS12_CODE);
                IF AUTORIZADA_GBL = 'S'
                THEN SERVICIO_STATUS:='CERRAD04';
                ELSE SERVICIO_STATUS:='RECHAZ13';
                SERVICIO_BENEFICIO:=0;
                CALL DETERMINAR_AEA;
                {CALL DETERMINAR_AEB_PKT;}
                        call DETERMINACION_FINAL_MENU;
                        if not((DETERMINACION_FINAL_GBL = 'S') or
                           (DETERMINACION_FINAL_GBL = 's')) then return;
                CALL DETER_ELEG_AEB_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);
                RECURSOS_ACUM:=0;
                RETURN;
             END;

        IF (DEFICIT >= 1) AND (DEFICIT <= 5)
        THEN
            BENEFICIO_AUTO := 5;
        ELSE
            BENEFICIO_AUTO := DEFICIT;

        ELEGIBLE_REG := '*';
        DB_CLOSE(OPEN_ID,STATUS_CODE);
        DB_CLOSE(OPEN2_ID,STATUS2_CODE);
        DB_CLOSE(OPEN3_ID,STATUS_CODE);
        DB_CLOSE(OPEN4_ID,STATUS_CODE);
        DB_CLOSE(OPEN5_ID,STATUS_CODE);
        DB_CLOSE(OPEN6_ID,STATUS_CODE);
        DB_CLOSE(OPEN7_ID,STATUS_CODE);
        DB_CLOSE(OPEN12_ID, STATUS12_CODE);
        IF AUTORIZADA_GBL = 'S' THEN
                SERVICIO_STATUS:='PENDREVI';
        ELSE
                SERVICIO_STATUS:='PENDCERT';

        SERVICIO_BENEFICIO := BENEFICIO_AUTO;
                CALL DETERMINAR_AEA;
{CALL DETERMINAR_AEB_PKT;}
                        call DETERMINACION_FINAL_MENU;
                        if not((DETERMINACION_FINAL_GBL = 'S') or
                           (DETERMINACION_FINAL_GBL = 's')) then return;
        CALL DETER_ELEG_AEB_UPDATE_SERV_ADL;

SET_NOTRACE();

END;


    



--------------------------------------------------------------------- */
