package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_TIPO_REGISTRO_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double EDAD = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setEDAD  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_TIPO_REGISTRO_ADL ) __app.getADL ( CHECK_TIPO_REGISTRO_ADL.class ) ).EDAD = value.getDouble ( );
  }  
    



  /**  */
  public static double getEDAD  ( RallyApplication __app )
  {
    return ( ( CHECK_TIPO_REGISTRO_ADL ) __app.getADL ( CHECK_TIPO_REGISTRO_ADL.class ) ).EDAD;
  }


  /**  */
  public static Double getEDADDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_TIPO_REGISTRO_ADL ) __app.getADL ( CHECK_TIPO_REGISTRO_ADL.class ) ).EDAD );
  }


  /**  */
  public static void setEDAD  ( RallyApplication __app, double value )
  {
    ( ( CHECK_TIPO_REGISTRO_ADL ) __app.getADL ( CHECK_TIPO_REGISTRO_ADL.class ) ).EDAD = value;
  }


  /**  */
  public static void setEDAD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_TIPO_REGISTRO_ADL ) __app.getADL ( CHECK_TIPO_REGISTRO_ADL.class ) ).EDAD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CHECK_TIPO_REGISTRO_ADL get ( RallyApplication __app )
  {
    CHECK_TIPO_REGISTRO_ADL adl = new CHECK_TIPO_REGISTRO_ADL ( );
    __app.register ( adl, "CHECK_TIPO_REGISTRO_ADL" );
    __app.setADL ( CHECK_TIPO_REGISTRO_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CHECK_TIPO_REGISTRO_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CHECK_TIPO_REGISTRO_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CHECK_TIPO_REGISTRO_ADL" );
    if ( rObj != null && rObj instanceof CHECK_TIPO_REGISTRO_ADL )
    {
      this.app.setADL ( CHECK_TIPO_REGISTRO_ADL.class, ( CHECK_TIPO_REGISTRO_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CHECK_TIPO_REGISTRO_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CHECK_TIPO_REGISTRO_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    EDAD = DateUtil.monthsBetween ( TruncService.lastDay ( this.app.SYSTEM_DATE ) , this.app.form ( "INFOR_BIO_FRM" ).getDateItem ( "FCH_NACIMIENTO" )) / 12;
    if ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "TIPO_REGISTRO" ), "NA" ) ) || ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "TIPO_REGISTRO" ), "EXEN" ) ) ) 
    {
      this.app.form ( "INFOR_BIO_FRM" ).setItem ( "ACEPTA_REGISTRO_EMPLEO", "N"  );
    }
    if ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "TIPO_REGISTRO" ), "OBLI" ) ) && ( ( Compare.lt ( EDAD, 21 ) ) || ( Compare.ge ( EDAD, 51 ) ) )  ) 
    {
      this.app.setError ( 0, 8100 );
      this.app.errorFlag = false;
    }
    else if ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "TIPO_REGISTRO" ), "VOLU" ) ) && ( ( Compare.ge ( EDAD, 21 ) ) && ( Compare.lt ( EDAD, 51 ) )  )   )
    {
      this.app.setError ( 1, 8150 );
      this.app.errorFlag = false;
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE CHECK_TIPO_REGISTRO_ADL;
VAR 

  EDAD : NUMBER;

BEGIN

EDAD := MONTHS_BETWEEN(LAST_DAY(SYSTEM_DATE),INFOR_BIO_FRM.FCH_NACIMIENTO)/12;  
  

IF (INFOR_BIO_FRM.TIPO_REGISTRO = 'NA') OR
   (INFOR_BIO_FRM.TIPO_REGISTRO = 'EXEN')
   THEN
     INFOR_BIO_FRM.ACEPTA_REGISTRO_EMPLEO := 'N';

IF  (INFOR_BIO_FRM.TIPO_REGISTRO = 'OBLI') AND ((EDAD < 21) OR (EDAD >= 51))
  THEN  
   BEGIN
    ERROR(8100);
    SET_FAILURE();
   END;
ELSE
  IF  (INFOR_BIO_FRM.TIPO_REGISTRO = 'VOLU') AND ((EDAD >= 21) AND (EDAD < 51))
    THEN  
      BEGIN
       ERROR(8150);
       SET_FAILURE();
      END;
END;
    



--------------------------------------------------------------------- */
