package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class DETER_ELEG_AEC1_UPDATE_SERV_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double STATUS_ID = 0;

  public double STATUS_CODE = 0;

  public double OPEN_ID = 0;

  public double OPEN_ID3 = 0;



  public DataStore CLIENTES2_DSD = null;

  public DataStore SERVICIOS2_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN_ID3  ( RallyApplication __app, Parameter value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID3 = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getCLIENTES2_DSD  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).CLIENTES2_DSD;
  }


  /**  */
  public static void setCLIENTES2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).CLIENTES2_DSD = value;
  }


  /**  */
  public static void setCLIENTES2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).CLIENTES2_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getSERVICIOS2_DSD  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).SERVICIOS2_DSD;
  }


  /**  */
  public static void setSERVICIOS2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).SERVICIOS2_DSD = value;
  }


  /**  */
  public static void setSERVICIOS2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).SERVICIOS2_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getSTATUS_ID  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_ID;
  }


  /**  */
  public static Double getSTATUS_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_ID );
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, double value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_ID = value;
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_CODE  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_CODE;
  }


  /**  */
  public static Double getSTATUS_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_CODE );
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, double value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_CODE = value;
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).STATUS_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN_ID3  ( RallyApplication __app )
  {
    return ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID3;
  }


  /**  */
  public static Double getOPEN_ID3Double ( RallyApplication __app )
  {
    return new Double ( ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID3 );
  }


  /**  */
  public static void setOPEN_ID3  ( RallyApplication __app, double value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID3 = value;
  }


  /**  */
  public static void setOPEN_ID3  ( RallyApplication __app, Object value )
  {
    ( ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) __app.getADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class ) ).OPEN_ID3 = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static DETER_ELEG_AEC1_UPDATE_SERV_ADL get ( RallyApplication __app )
  {
    DETER_ELEG_AEC1_UPDATE_SERV_ADL adl = new DETER_ELEG_AEC1_UPDATE_SERV_ADL ( );
    __app.register ( adl, "DETER_ELEG_AEC1_UPDATE_SERV_ADL" );
    __app.setADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    DETER_ELEG_AEC1_UPDATE_SERV_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    DETER_ELEG_AEC1_UPDATE_SERV_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "DETER_ELEG_AEC1_UPDATE_SERV_ADL" );
    if ( rObj != null && rObj instanceof DETER_ELEG_AEC1_UPDATE_SERV_ADL )
    {
      this.app.setADL ( DETER_ELEG_AEC1_UPDATE_SERV_ADL.class, ( DETER_ELEG_AEC1_UPDATE_SERV_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "DETER_ELEG_AEC1_UPDATE_SERV_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "DETER_ELEG_AEC1_UPDATE_SERV_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    CLIENTES2_DSD = this.dm.create ( "CLIENTES2_DSD" );
    OPEN_ID3 = CLIENTES2_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    SERVICIOS2_DSD = this.dm.create ( "SERVICIOS2_DSD" );
    OPEN_ID = SERVICIOS2_DSD.getId ( );
    STATUS_ID = RallyDataStoreException.getDefault ( );

    STATUS_ID  = this.dm.reset ( OPEN_ID );

    if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) ) 
    {
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
      STATUS_ID  = this.dm.retrieve ( OPEN_ID );

      STATUS_ID  = this.dm.firstRow ( OPEN_ID );

      if ( ( Compare.lt ( DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_BENEFICIO ( this.app ), this.dm.getFieldDouble ( this.dm.get ( "SERVICIOS2_DSD" ), "VLR_BENEFICIO_ANTERIOR" ) ) ) && ( ! Compare.equals ( this.app.RECERT_TIPO_GBL, "P" ) )  && ( ! Compare.equals ( this.app.RECERT_TIPO_GBL, "S" ) )  && ( ! Compare.equals ( this.app.RECERT_TIPO_GBL, "D" ) )  && ( ! Compare.equals ( this.app.RECERT_TIPO_GBL, "A" ) )  && ( Compare.equals ( this.app.RUTINA_GBL, "MC" ) )  ) 
      {
        DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.setSERVICIO_STATUS ( this.app, "ACCNEG" );
        this.app.FLAG_UPD_GBL = "S";

        STATUS_CODE  = this.dm.reset ( OPEN_ID3 );

        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_JEFE_FAMILIA", this.app.SS_JEFE_GBL );
        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID3 );
        STATUS_CODE  = this.dm.retrieve ( OPEN_ID3 );

        STATUS_CODE  = this.dm.firstRow ( OPEN_ID3 );

        if ( Compare.equals ( STATUS_CODE, 0 ) ) 
        {
          this.app.FLAG_UPD_GBL = "N";
          this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "COD_STATUS", "ACCNEG" );
          this.dm.setField ( this.dm.get ( "CLIENTES2_DSD" ), "FCH_STATUS", TruncService.trunc ( this.app.SYSTEM_DATE, "DDD" )  );

          STATUS_CODE  = this.dm.update ( OPEN_ID3 );

          OPEN_ID3  = this.dm.dbCommit ( );
        }
      }
    }
    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 0, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.reset ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 1, STATUS_ID );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_ID  = this.dm.retrieve ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 2, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.firstRow ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 3, STATUS_ID );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_STATUS_SERVICIO", DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_STATUS ( this.app ) );
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "VLR_BENEFICIOS", DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_BENEFICIO ( this.app ) );
    if ( Compare.equals ( DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_STATUS ( this.app ), "ACTIVO" ) ) 
    {
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "VLR_BENEFICIO_ANTERIOR", DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_BENEFICIO ( this.app ) );
    }
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "FCH_DECISION", this.app.SYSTEM_DATE );
    this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "ID_TECNICO_DETER_ELEGIBILIDAD", this.app.ID_TECNICO_GBL );
    if ( ( Compare.equals ( RallyStringService.subString ( DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_STATUS ( this.app ), 0, 4 ), "CERR" ) ) || ( Compare.equals ( RallyStringService.subString ( DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.getSERVICIO_STATUS ( this.app ), 0, 4 ), "RECH" ) ) ) 
    {
      this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "FCH_CERRADO", TruncService.trunc ( this.app.SYSTEM_DATE, "DDD" )  );
    }

    STATUS_ID  = this.dm.update ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 4, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.dbCommit ( );
    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 5, STATUS_ID );
      this.doReturn ( );
      return; 
    }
    STATUS_ID  = this.dm.dbClose ( OPEN_ID );

    STATUS_CODE  = this.dm.dbClose ( OPEN_ID3 );

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE DETER_ELEG_AEC1_UPDATE_SERV_ADL;

VAR

        STATUS_ID:      NUMBER(9,0);
        STATUS_CODE:    NUMBER(9,0);
        OPEN_ID:        NUMBER(9,0);
        OPEN_ID3:       NUMBER(9,0);

BEGIN
SET_TRACE();
  DB_OPEN(CLIENTES2_DSD,OPEN_ID3,STATUS_CODE);
 DB_OPEN(SERVICIOS2_DSD,OPEN_ID,STATUS_ID);
 DB_RESET(OPEN_ID,STATUS_ID);
        IF AUTORIZADA_GBL = 'S'
        THEN BEGIN
         SERVICIOS2_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
         SERVICIOS2_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
         SERVICIOS2_DSD.COD_SERVICIO := COD_SERV_GBL;
         SERVICIOS2_DSD.RMO_OFICINA := RMO_GBL;
         DB_QUERY(OPEN_ID,STATUS_ID);
         DB_GET_FIRST(OPEN_ID,STATUS_ID);
         IF (DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_BENEFICIO < SERVICIOS2_D
SD.VLR_BENEFICIO_ANTERIOR) AND 
            (RECERT_TIPO_GBL <> 'P') AND (RECERT_TIPO_GBL <> 'S') AND
            (RECERT_TIPO_GBL <> 'D') AND (RECERT_TIPO_GBL <> 'A') AND
            (RUTINA_GBL = 'MC')
            THEN BEGIN
                      DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_STATUS := 'ACCN
EG';
                      FLAG_UPD_GBL := 'S';
                        { actualizar status del jefe del servicio }
                        DB_RESET(OPEN_ID3,STATUS_CODE);
                        CLIENTES2_DSD.SEGURO_SOCIAL_JEFE_FAMILIA := SS_JEFE_GBL;
                        CLIENTES2_DSD.SEGURO_SOCIAL_CLIENTE := SS_SERV_GBL;
                        CLIENTES2_DSD.RMO_OFICINA := RMO_GBL;
                        DB_QUERY(OPEN_ID3,STATUS_CODE);
                        DB_GET_FIRST(OPEN_ID3,STATUS_CODE);
                        IF STATUS_CODE = 0
                        THEN
                         BEGIN
                                FLAG_UPD_GBL := 'N';
                                CLIENTES2_DSD.COD_STATUS := 'ACCNEG';
                                CLIENTES2_DSD.FCH_STATUS := TRUNC(SYSTEM_DATE,'D
DD');
                                DB_UPDATE(OPEN_ID3,STATUS_CODE);
                                DB_COMMIT(OPEN_ID3);
                         END;
                 END;
        END;

IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
DB_RESET(OPEN_ID,STATUS_ID);
IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
SERVICIOS2_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GBL;
SERVICIOS2_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_GBL;
SERVICIOS2_DSD.COD_SERVICIO:=COD_SERV_GBL;
SERVICIOS2_DSD.RMO_OFICINA := RMO_GBL;
DB_QUERY(OPEN_ID,STATUS_ID);
IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
DB_GET_FIRST(OPEN_ID,STATUS_ID);
IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
SERVICIOS2_DSD.COD_STATUS_SERVICIO:=
     DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_STATUS;

SERVICIOS2_DSD.VLR_BENEFICIOS:=
     DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_BENEFICIO;

if  DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_STATUS = 'ACTIVO' THEN
        SERVICIOS2_DSD.VLR_BENEFICIO_ANTERIOR:=
     DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_BENEFICIO;

SERVICIOS2_DSD.FCH_DECISION:=SYSTEM_DATE;
SERVICIOS2_DSD.ID_TECNICO_DETER_ELEGIBILIDAD:=ID_TECNICO_GBL;

IF (SUBSTR(DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_STATUS,0,4) = 'CERR') OR
   (SUBSTR(DETERMINAR_ELEGIBILIDAD_AE_C1_ADL.SERVICIO_STATUS,0,4) = 'RECH')
 THEN
BEGIN
        SERVICIOS2_DSD.FCH_CERRADO := TRUNC(SYSTEM_DATE,'DDD');
END;

DB_UPDATE(OPEN_ID,STATUS_ID);
IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
DB_COMMIT(STATUS_ID);
IF STATUS_ID <> 0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;

DB_CLOSE(OPEN_ID,STATUS_ID);
DB_CLOSE(OPEN_ID3,STATUS_CODE);
 SET_NOTRACE();
END;


    



--------------------------------------------------------------------- */
