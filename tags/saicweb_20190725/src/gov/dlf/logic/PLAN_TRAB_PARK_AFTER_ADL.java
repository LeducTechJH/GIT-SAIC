package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class PLAN_TRAB_PARK_AFTER_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;
 
  public boolean _condition2 = false;
 
  public boolean _condition3 = false;
 
  public boolean _condition4 = false;
 
  public boolean _condition5 = false;
 
  public boolean _condition6 = false;
 
  public boolean _condition7 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double COMANDO = 0;

  public double CONT_AUX = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setCOMANDO  ( RallyApplication __app, Parameter value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).COMANDO = value.getDouble ( );
  }  

  
  /**  */
  public static void setCONT_AUX  ( RallyApplication __app, Parameter value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).CONT_AUX = value.getDouble ( );
  }  
    



  /**  */
  public static double getCOMANDO  ( RallyApplication __app )
  {
    return ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).COMANDO;
  }


  /**  */
  public static Double getCOMANDODouble ( RallyApplication __app )
  {
    return new Double ( ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).COMANDO );
  }


  /**  */
  public static void setCOMANDO  ( RallyApplication __app, double value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).COMANDO = value;
  }


  /**  */
  public static void setCOMANDO  ( RallyApplication __app, Object value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).COMANDO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCONT_AUX  ( RallyApplication __app )
  {
    return ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).CONT_AUX;
  }


  /**  */
  public static Double getCONT_AUXDouble ( RallyApplication __app )
  {
    return new Double ( ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).CONT_AUX );
  }


  /**  */
  public static void setCONT_AUX  ( RallyApplication __app, double value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).CONT_AUX = value;
  }


  /**  */
  public static void setCONT_AUX  ( RallyApplication __app, Object value )
  {
    ( ( PLAN_TRAB_PARK_AFTER_ADL ) __app.getADL ( PLAN_TRAB_PARK_AFTER_ADL.class ) ).CONT_AUX = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static PLAN_TRAB_PARK_AFTER_ADL get ( RallyApplication __app )
  {
    PLAN_TRAB_PARK_AFTER_ADL adl = new PLAN_TRAB_PARK_AFTER_ADL ( );
    __app.register ( adl, "PLAN_TRAB_PARK_AFTER_ADL" );
    __app.setADL ( PLAN_TRAB_PARK_AFTER_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    PLAN_TRAB_PARK_AFTER_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    PLAN_TRAB_PARK_AFTER_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "PLAN_TRAB_PARK_AFTER_ADL" );
    if ( rObj != null && rObj instanceof PLAN_TRAB_PARK_AFTER_ADL )
    {
      this.app.setADL ( PLAN_TRAB_PARK_AFTER_ADL.class, ( PLAN_TRAB_PARK_AFTER_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "PLAN_TRAB_PARK_AFTER_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      case 5:  { this.currentStep ++; this.step5 ( this.keyParms ); break; }
      case 6:  { this.currentStep ++; this.step6 ( this.keyParms ); break; }
      case 7:  { this.currentStep ++; this.step7 ( this.keyParms ); break; }
      case 8:  { this.currentStep ++; this.step8 ( this.keyParms ); break; }
      case 9:  { this.currentStep ++; this.step9 ( this.keyParms ); break; }
      case 10:  { this.currentStep ++; this.step10 ( this.keyParms ); break; }
      case 11:  { this.currentStep ++; this.step11 ( this.keyParms ); break; }
      case 12:  { this.currentStep ++; this.step12 ( this.keyParms ); break; }
      case 13:  { this.currentStep ++; this.step13 ( this.keyParms ); break; }
      case 14:  { this.currentStep ++; this.step14 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "PLAN_TRAB_PARK_AFTER_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    COMANDO = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    this.app.COMANDO_GBL = COMANDO;
    if ( Compare.equals ( this.app.PASSAGEM_GBL, "F" ) ) 
    {
      this.app.PASSAGEM_GBL = "T";
      this.doReturn ( );
      return; 
    }
    this.app.PASSAGEM_GBL = "T";
    if ( ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.FRFUNCTION ) ) && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.INSAFTER ) )  && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.RNEXT ) )  && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.RPREV ) )  && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.EXITACTION ) )  && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.PRNEXT ) )  && ( ! Compare.equals ( COMANDO, RallyAppCommandFactory.PRPREV ) )  ) 
    {
      this.app.setError ( 0, 5504 );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.FRFUNCTION ) ) 
    {
      this.app.CONT_PLAN_GBL = this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" );
      this.doReturn ( );
      return; 
    }
    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.INSAFTER ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      if ( Compare.lt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" )) ) 
      {
        this.app.setError ( 1, 5501 );
        this.app.errorFlag = false;
        this.doReturn ( );
        return; 
      }
      if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "PLAN_TOT" )) ) 
      {
        this.app.setError ( 2, 5502 );
        this.app.errorFlag = false;
        this.doReturn ( );
        return; 
      }
      this.app.TIPO_OPER_GBL = "I";
      this.app.CONT_PLAN_GBL = MathService.plus ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 1  );
      this.app.callCommand ( RallyAppCommandFactory.IGNORE );
      return;
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.INSAFTER ) ) 
    {
      PLAN_TRAB_PARK_CALEND_LF_ADL.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.INSAFTER ) ) 
    {
      this.doReturn ( );
      return; 
    }
    this.app.CONT_AUX_GBL = 1;
    this.app.FIRST_TIME_GBL = "N";
    if ( Compare.gt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 6 ) ) 
    {
      this._condition1 = true;
    }
    else
    {
      this._condition1 = false;
    }
    if ( this._condition1 )
    {
      if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RNEXT ) ) 
      {
        this._condition2 = true;
      }
      else
      {
        this._condition2 = false;
      }
      if ( this._condition2 )
      {
        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" )) ) 
        {
          this.app.setError ( 3, 5506 );
          this.app.errorFlag = false;
          this.doReturn ( );
          return; 
        }
        else
        {
          CONT_AUX = MathService.minus ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.FIRST_GBL  );
          if ( Compare.gt ( CONT_AUX, 5 ) ) 
          {
            this._condition3 = true;
          }
          else
          {
            this._condition3 = false;
          }
          if ( this._condition3 )
          {
            this.app.callCommand ( RallyAppCommandFactory.RGNEXT );
            return;
          }
        }
      }
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.gt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 6 ) ) 
    {
      if ( this._condition2 )    //      if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RNEXT ) ) 
      {
        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" )) ) 
        {
        }
        else
        {
          if ( this._condition3 )    //          if ( Compare.gt ( CONT_AUX, 5 ) ) 
          {
            this.app.FIRST_GBL = MathService.plus ( this.app.FIRST_GBL, 1  );
          }
          this.app.PASSAGEM_GBL = "F";
          this.app.callCommand ( RallyAppCommandFactory.IGNORE );
          return;
        }
      }
    }

  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.gt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 6 ) ) 
    {
      if ( this._condition2 )    //      if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RNEXT ) ) 
      {
        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" )) ) 
        {
        }
        else
        {
          this.app.executeCommand ( RallyAppCommandFactory.RNEXT );
          return;
        }
      }
    }

  }


  /**
   *
   */
  protected void step5 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( Compare.gt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 6 ) ) 
    {
      if ( this._condition2 )    //      if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RNEXT ) ) 
      {
        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" )) ) 
        {
        }
        else
        {
          return;/* 
          this.doReturn ( );
          return;*/ 
        }
      }
    }
    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RPREV ) ) 
    {
      this._condition4 = true;
    }
    else
    {
      this._condition4 = false;
    }
    if ( this._condition4 )
    {
      if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 1 ) ) 
      {
        this.app.setError ( 4, 5507 );
        this.app.errorFlag = false;
        this.doReturn ( );
        return; 
      }
      else
      {
        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.FIRST_GBL ) ) 
        {
          this._condition5 = true;
        }
        else
        {
          this._condition5 = false;
        }
        if ( this._condition5 )
        {
          this.app.callCommand ( RallyAppCommandFactory.RGNEXT );
          return;
        }
      }
    }

  }


  /**
   *
   */
  protected void step6 ( ParameterSet ps )
  {
    if ( this._condition4 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RPREV ) ) 
    {
      if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 1 ) ) 
      {
      }
      else
      {
        if ( this._condition5 )    //        if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), this.app.FIRST_GBL ) ) 
        {
          this.app.FIRST_GBL = MathService.minus ( this.app.FIRST_GBL, 1  );
        }
        this.app.PASSAGEM_GBL = "F";
        this.app.callCommand ( RallyAppCommandFactory.IGNORE );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step7 ( ParameterSet ps )
  {
    if ( this._condition4 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RPREV ) ) 
    {
      if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 1 ) ) 
      {
      }
      else
      {
        this.app.executeCommand ( RallyAppCommandFactory.RPREV );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step8 ( ParameterSet ps )
  {
    if ( this._condition4 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.RPREV ) ) 
    {
      if ( Compare.equals ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_CONT" ), 1 ) ) 
      {
      }
      else
      {
        return;/* 
        this.doReturn ( );
        return;*/ 
      }
    }
    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRNEXT ) ) 
    {
      this._condition6 = true;
    }
    else
    {
      this._condition6 = false;
    }
    if ( this._condition6 )
    {
      if ( Compare.lt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" ), CONT_AUX ) ) 
      {
        this.app.setError ( 5, 5517 );
        this.app.errorFlag = false;
        this.doReturn ( );
        return; 
      }
      else
      {
        this.app.callCommand ( RallyAppCommandFactory.RGNEXT );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step9 ( ParameterSet ps )
  {
    if ( this._condition6 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRNEXT ) ) 
    {
      if ( Compare.lt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" ), CONT_AUX ) ) 
      {
      }
      else
      {
        this.app.FIRST_GBL = MathService.plus ( this.app.FIRST_GBL, 7  );
        this.app.PASSAGEM_GBL = "F";
        this.app.callCommand ( RallyAppCommandFactory.IGNORE );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step10 ( ParameterSet ps )
  {
    if ( this._condition6 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRNEXT ) ) 
    {
      if ( Compare.lt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" ), CONT_AUX ) ) 
      {
      }
      else
      {
        this.app.executeCommand ( RallyAppCommandFactory.PRNEXT );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step11 ( ParameterSet ps )
  {
    if ( this._condition6 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRNEXT ) ) 
    {
      if ( Compare.lt ( this.app.form ( "PLAN_TRABAJO_FRM" ).getDoubleItem ( "CALEND_TOT" ), CONT_AUX ) ) 
      {
      }
      else
      {
        return;/* 
        this.doReturn ( );
        return;*/ 
      }
    }
    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRPREV ) ) 
    {
      this._condition7 = true;
    }
    else
    {
      this._condition7 = false;
    }
    if ( this._condition7 )
    {
      if ( Compare.equals ( this.app.FIRST_GBL, 1 ) ) 
      {
        this.app.setError ( 6, 5518 );
        this.app.errorFlag = false;
        this.doReturn ( );
        return; 
      }
      else
      {
        this.app.callCommand ( RallyAppCommandFactory.RGNEXT );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step12 ( ParameterSet ps )
  {
    if ( this._condition7 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRPREV ) ) 
    {
      if ( Compare.equals ( this.app.FIRST_GBL, 1 ) ) 
      {
      }
      else
      {
        this.app.FIRST_GBL = MathService.minus ( this.app.FIRST_GBL, 7  );
        this.app.PASSAGEM_GBL = "F";
        this.app.callCommand ( RallyAppCommandFactory.IGNORE );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step13 ( ParameterSet ps )
  {
    if ( this._condition7 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRPREV ) ) 
    {
      if ( Compare.equals ( this.app.FIRST_GBL, 1 ) ) 
      {
      }
      else
      {
        this.app.executeCommand ( RallyAppCommandFactory.PRPREV );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step14 ( ParameterSet ps )
  {
    if ( this._condition7 )    //    if ( Compare.equals ( COMANDO, RallyAppCommandFactory.PRPREV ) ) 
    {
      if ( Compare.equals ( this.app.FIRST_GBL, 1 ) ) 
      {
      }
      else
      {
        return;/* 
        this.doReturn ( );
        return;*/ 
      }
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE PLAN_TRAB_PARK_AFTER_ADL;

VAR
        COMANDO         : NUMBER EXPORT;
        CONT_AUX        : NUMBER (2);

BEGIN
SET_TRACE();
        COMANDO := GET_CMD();
        COMANDO_GBL := COMANDO;

        IF (PASSAGEM_GBL = 'F') THEN 
        BEGIN
                PASSAGEM_GBL := 'T';
                RETURN;
        END;

        PASSAGEM_GBL := 'T';

        IF (COMANDO <> FRFUNCTION) AND (COMANDO <> INSAFTER) AND
           (COMANDO <> RNEXT) AND (COMANDO <> RPREV) AND
           (COMANDO <> EXITACTION) AND
           (COMANDO <> PRNEXT) AND (COMANDO <> PRPREV) THEN
        BEGIN
                ERROR (5504);
                SET_FAILURE();
                RETURN;
        END;

        IF (COMANDO = FRFUNCTION) THEN 
        BEGIN
                CONT_PLAN_GBL := PLAN_TRABAJO_FRM.CALEND_CONT; 
                RETURN;
        END;

        IF (COMANDO = INSAFTER) THEN
        BEGIN
                IF (PLAN_TRABAJO_FRM.CALEND_CONT < PLAN_TRABAJO_FRM.CALEND_TOT)
                THEN BEGIN
                        ERROR (5501);
                        SET_FAILURE();
                        RETURN;
                END;                                                            
                IF (PLAN_TRABAJO_FRM.CALEND_CONT = PLAN_TRABAJO_FRM.PLAN_TOT)
                THEN BEGIN
                        ERROR (5502);
                        SET_FAILURE();
                        RETURN;
                END;               

                TIPO_OPER_GBL := 'I';

                CONT_PLAN_GBL := PLAN_TRABAJO_FRM.CALEND_CONT + 1;
                CALL_CMD ('IGNORE');
                CALL PLAN_TRAB_PARK_CALEND_LF_ADL;
                RETURN;
        END;

        CONT_AUX_GBL := 1;
        FIRST_TIME_GBL := 'N';

IF (PLAN_TRABAJO_FRM.CALEND_CONT > 6) THEN
        BEGIN

            IF (COMANDO = RNEXT) THEN
            BEGIN
                IF (PLAN_TRABAJO_FRM.CALEND_CONT = PLAN_TRABAJO_FRM.CALEND_TOT)
                THEN BEGIN
                        ERROR (5506);
                        SET_FAILURE();
                        RETURN;
                     END;
                ELSE
                BEGIN
                        CONT_AUX := PLAN_TRABAJO_FRM.CALEND_CONT - FIRST_GBL;
                        IF (CONT_AUX > 5) THEN
                        BEGIN   
                                CALL_CMD (RGNEXT);
                                FIRST_GBL := FIRST_GBL + 1;
                        END;
                        PASSAGEM_GBL := 'F';
                        CALL_CMD ('IGNORE');
                        EXECUTE_CMD (RNEXT);
                        RETURN;
                END;
            END;
        END;                                                       

            IF (COMANDO = RPREV) THEN
            BEGIN
                IF (PLAN_TRABAJO_FRM.CALEND_CONT = 1) THEN
                BEGIN
                        ERROR (5507);
                        SET_FAILURE();
                        RETURN;
                END;
                ELSE
                BEGIN
                        IF (PLAN_TRABAJO_FRM.CALEND_CONT = FIRST_GBL) THEN
                        BEGIN   
                                CALL_CMD (RGNEXT);
                                FIRST_GBL := FIRST_GBL - 1;
                        END;
                        PASSAGEM_GBL := 'F';
                        CALL_CMD ('IGNORE');
                        EXECUTE_CMD (RPREV);
                        RETURN;
                END;                                                           
            END;

            IF (COMANDO = PRNEXT) THEN
            BEGIN
                IF (PLAN_TRABAJO_FRM.CALEND_TOT < CONT_AUX) THEN
                BEGIN
                        ERROR (5517);
                        SET_FAILURE();
                        RETURN;
                END;
                ELSE
                BEGIN
                        CALL_CMD (RGNEXT);
                        FIRST_GBL := FIRST_GBL + 7;
                        PASSAGEM_GBL := 'F';
                        CALL_CMD ('IGNORE');
                        EXECUTE_CMD (PRNEXT);
                        RETURN;
                END;                                                           
            END;

            IF (COMANDO = PRPREV) THEN
            BEGIN
                IF (FIRST_GBL = 1) THEN
                BEGIN
                        ERROR (5518);
                        SET_FAILURE();
                        RETURN;
                END;
                ELSE
                BEGIN
                        CALL_CMD (RGNEXT);
                        FIRST_GBL := FIRST_GBL - 7;
                        PASSAGEM_GBL := 'F';
                        CALL_CMD ('IGNORE');
                        EXECUTE_CMD (PRPREV);
                        RETURN;
                END;                                                           
            END;
SET_NOTRACE();
END;                                                    
    



--------------------------------------------------------------------- */
