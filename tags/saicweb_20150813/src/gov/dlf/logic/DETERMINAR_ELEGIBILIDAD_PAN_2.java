package gov.dlf.logic;

import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

//import org.eclipse.jdt.internal.compiler.ast.ThisReference;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.rallyengine.appcommands.AppCommand;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class DETERMINAR_ELEGIBILIDAD_PAN_2
extends ADL
{
	// -------------------------------------------------------------------
	// ----------   Class Attributes   -----------------------------------

	/**  */
	public static boolean staticCall = false;


	// -------------------------------------------------------------------
	// ----------   Instance Attributes   --------------------------------

	/**  */
	public SAIC_DMQ_ORA_Application app;
	/**  */
	public RallyDataManager dm = null;



	// -------------------------------------------------------------------
	// ----------   Instance Condition Attributes   ----------------------

	public boolean _condition0 = false;

	public boolean _condition1 = false;

	public boolean _condition2 = false;

	public boolean _condition3 = false;

	public boolean _condition4 = false;

	public boolean _condition5 = false;

	public boolean _condition6 = false;

	public boolean _condition7 = false;

	public boolean _condition8 = false;

	public boolean _condition9 = false;

	public boolean _condition10 = false;

	public boolean _condition11 = false;

	public boolean _condition12 = false;

	public boolean _condition13 = false;

	public boolean _condition14 = false;

	public boolean _condition15 = false;

	public boolean _condition16 = false;

	public boolean condition_17 = false;

	public boolean condition_18 = false;


	// -------------------------------------------------------------------
	// ----------   Instance Export Attributes   -------------------------

	public double OPEN_ID = 0;

	public double OPEN2_ID = 0;

	public double OPEN3_ID = 0;

	public double OPEN4_ID = 0;

	public double OPEN5_ID = 0;

	public double OPEN6_ID = 0;

	public double OPEN7_ID = 0;

	public double OPEN8_ID = 0;

	public double AJUSTE_PAN_ID = 0;

	public double AJUSTE_PAN_STATUS = 0;

	public double STATUS_CODE = 0;

	public double STATUS2_CODE = 0;

	public double STATUS7_CODE = 0;

	public double STATUS8_CODE = 0;

	public double SERVICIO_BENEFICIO = 0;

	public double ELEG_BRUTO_FLG = 0;

	public double INEL_BRUTO_FLG = 0;

	public double GASTOS_FLG = 0;

	public double AGRB_AMT = 0;

	public double AGRB_TOT = 0;

	public double AGRB_FLG = 0;

	public double SAVE_SSN = 0;

	public double RECURSOS_ACUM = 0;

	public double DIA_SOLIC_LV = 0;

	public double EDAD_IND = 0;

	public double ANCIANO = 0;

	public double INCA_FLG = 0;

	// Indicate minor exist in the nucleus
	public double  MENOR_FLG = 0.0;

	//Minor 2 year olds counts
	public double  MENOR_MENOR2YEARS = 0.0;

	public double  MENOR_MAYOR2YEARS = 0.0;

	//Indicate spouses exist in the nucleus
	public double  CONY_FLG = 0.0;

	public double GASTOS = 0.0;

	public double GASTOS_MEDICOS = 0.0;

	public double ANCIANO_COUNT = 0.0;

	public double INCAPACITADO_COUNT = 0.0;

	// Count of minors of nucleus
	public double MENOR_COUNT = 0.0;

	public double DEAMBULANTE_COUNT = 0.0;

	// Count of spouses exist in the nucleus
	public double CONY_COUNT = 0.0;

	public double INGRESO_BRUTO = 0.0;

	public double SALARIO = 0.0;

	// Retirement Incomes
	public double RETIRO = 0.0;

	public double SEG_SOC_BRUTO = 0.0;

	public double SEG_SOC = 0.0;

	//Incomes Spouses
	public double INGRESO_CONY = 0.0;

	// State Retirement Pension
	public double RETI = 0.0;

	// Federal Retirement Pension
	public double RETF = 0.0;

	// Private Retirement Pension
	public double RETP = 0.0;

	// Other benefit for disability
	public double BENEINCA = 0.0;

	public double OTROS = 0;

	public double DEDUC_SAL = 0;

	public double SAL_NET = 0;

	public double INGRESO_NETO = 0;

	public double RECURSOS_NUCLEO = 0;

	public double GASTOS_NUCLEO = 0;

	public double ESTUDIANTE_COUNT = 0;

	public double DEDUC_FIJA = 0;

	public double CUIDO_MENOR = 0;

	public double CUIDO = 0;

	public double STANDARD = 0;

	public double EXENCION_SALARIO  = 0;

	public double EXENCION_SAL_MENOR  = 0;

	public double EXENCION_SAL_MAYOR  = 0;

	public double EXENCION_RETP_MAX  = 0;

	public double EXENCION_RETP  = 0;

	public double EXENCION_RETF  = 0;

	public double EXENCION_RETI  = 0;

	public double EXENCION_SEG_SOC  = 0;

	public double UNIDAD = 0;

	//*****
	public double UNIDAD_NCAL = 0;
	public double NCAL_COUNT = 0;
	//*****

	public double DEDUCCION_INGRESO = 0;

	public double INCAPACITADO = 0;

	public double BENEFICIO = 0;

	public double ING_MENOS_40 = 0;

	public double DEDUC_60 = 0;

	public double TOTAL_60 = 0;

	public double DEDUC_INCA = 0;

	public double TOTAL_INCA = 0;

	public double DEDUC_EST = 0;

	public double TOTAL_EST = 0;

	public double TOTAL_OTRO = 0;

	public double TOTAL_CUIDO = 0;

	public double RECURSOS_LIQUIDOS = 0;

	public double RECURSOS_BRUTO = 0;

	public double BENEFICIO_PRORRATEADO = 0;

	public double BENEFICIO_TEMP = 0;

	public double GASTOS_INHERENTES = 0;

	public double GASTOS_INHE = 0;

	public double SALA = 0;

	public double ADIE = 0;

	public double NPRO = 0;

	public double MENOR = 0;

	public double INGRESOS_NUCLEO = 0;

	public double BONO_ANCIANO = 0;

	public double GASTOS_AGRICULTURA = 0;

	public double INGRESO_TEMP = 0;

	public double COUNTER = 0;

	public double SERV_STATUS = 0;

	public double SERV_ID = 0;

	public String OLD_COD_SERV = null;

	public String SERVICIO_STATUS = null;

	public String INELEGIBLE_REG = null;

	public String INELEGIBLE_EMER = null;

	public String RAZON = null;

	public String INELEGIBLE_INGRE_BRUTO = null;

	public String ELEGIBLE_REG = null;

	public String ELEGIBLE_EMER = null;

	public Date NULL_DATE = null;

	public Date FCH_DETERMINA=null;

	public DataStore NUCLEO_SERVICIO_DSD = null;

	public DataStore CLIENTES_READ_LOC_DSD = null;

	public DataStore RECURSOS_NUCLEO_DSD = null;

	public DataStore BENEFICIOS_PAN_RO_DSD = null;

	public DataStore INGRESOS_NUCLEO_DSD = null;

	public DataStore GASTOS_NUCLEO_DSD = null;

	public DataStore DETERMINA_RO_DSD = null;

	public DataStore CLIENTE_AGENCIA_RO_DSD = null;

	public DataStore SERVICIOS2_DSD = null;

	public DataStore AJUSTE_PAN_RO_DSD = null;




	// -------------------------------------------------------------------
	// ----------   Instance Attributes' Access Methods   ----------------


	/**  */
	public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN2_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN2_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN3_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN3_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN4_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN4_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN5_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN5_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN6_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN6_ID = value.getDouble ( );
	}


	/**  */
	public static void setOPEN7_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN7_ID = value.getDouble ( );
	}

	/**  */
	public static void setOPEN8_ID  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN8_ID = value.getDouble ( );
	}

	/**  */
	public static void setSTATUS_CODE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS_CODE = value.getDouble ( );
	}


	/**  */
	public static void setSTATUS2_CODE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS2_CODE = value.getDouble ( );
	}


	/**  */
	public static void setSTATUS7_CODE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS7_CODE = value.getDouble ( );
	}

	/**  */
	public static void setSTATUS8_CODE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS8_CODE = value.getDouble ( );
	}

	/**  */
	public static void setSERVICIO_STATUS  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_STATUS = value.getString ( );
	}


	/**  */
	public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_BENEFICIO = value.getDouble ( );
	}


	/**  */
	public static void setELEG_BRUTO_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEG_BRUTO_FLG = value.getDouble ( );
	}


	/**  */
	public static void setINEL_BRUTO_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INEL_BRUTO_FLG = value.getDouble ( );
	}


	/**  */
	public static void setGASTOS_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_FLG = value.getDouble ( );
	}


	public static void setAGRB_AMT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_AMT = value.getDouble ( );
	}


	/**  */
	public static void setAGRB_TOT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_TOT = value.getDouble ( );
	}


	/**  */
	public static void setAGRB_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_FLG = value.getDouble ( );
	}


	/**  */
	public static void setSAVE_SSN  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAVE_SSN = value.getDouble ( );
	}


	/**  */
	public static void setRECURSOS_ACUM  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_ACUM = value.getDouble ( );
	}


	/**  */
	public static void setDIA_SOLIC_LV  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DIA_SOLIC_LV = value.getDouble ( );
	}


	/**  */
	public static void setEDAD_IND  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EDAD_IND = value.getDouble ( );
	}


	/**  */
	public static void setANCIANO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO = value.getDouble ( );
	}

	/**  */
	public static void setMENOR_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_FLG = value.getDouble ( );
	}

	/**  */
	public static void setCONY_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_FLG = value.getDouble ( );
	}


	/**  */
	public static void setINCA_FLG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCA_FLG = value.getDouble ( );
	}


	/**  */
	public static void setINELEGIBLE_REG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_REG = value.getString ( );
	}


	/**  */
	public static void setINELEGIBLE_EMER  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_EMER = value.getString ( );
	}


	/**  */
	public static void setRAZON  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RAZON = value.getString ( );
	}


	/**  */
	public static void setGASTOS  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS = value.getDouble ( );
	}

	/**  */
	public static void setGASTOS_MEDICOS  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_MEDICOS = value.getDouble ( );
	}

	/**  */
	public static void setANCIANO_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO_COUNT = value.getDouble ( );
	}

	/**  */
	public static void setMENOR_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_COUNT = value.getDouble ( );
	}

	/**  */
	public static void setDEAMBULANTE_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEAMBULANTE_COUNT = value.getDouble ( );
	}

	/**  */
	public static void setCONY_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_COUNT = value.getDouble ( );
	}

	/**  */
	public static void setINCAPACITADO_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO_COUNT = value.getDouble ( );
	}


	/**  */
	public static void setINGRESO_BRUTO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_BRUTO = value.getDouble ( );
	}


	/**  */
	public static void setSALARIO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALARIO = value.getDouble ( );
	}

	/**  */
	public static void setRETIRO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETIRO = value.getDouble ( );
	}

	/**  */
	public static void setSEG_SOC_BRUTO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC_BRUTO = value.getDouble ( );
	}


	/**  */
	public static void setSEG_SOC  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC = value.getDouble ( );
	}

	public static void setINGRESO_CONY  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_CONY = value.getDouble ( );
	}


	/**  */
	public static void setOTROS  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OTROS = value.getDouble ( );
	}

	/**  */
	public static void setRETI  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETI = value.getDouble ( );
	}

	/**  */
	public static void setRETP  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETP = value.getDouble ( );
	}

	/**  */
	public static void setRETF  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETF = value.getDouble ( );
	}

	/**  */
	public static void setBENEINCA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEINCA = value.getDouble ( );
	}

	/**  */
	public static void setDEDUC_SAL  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_SAL = value.getDouble ( );
	}


	/**  */
	public static void setSAL_NET  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAL_NET = value.getDouble ( );
	}


	/**  */
	public static void setINGRESO_NETO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_NETO = value.getDouble ( );
	}


	/**  */
	public static void setESTUDIANTE_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ESTUDIANTE_COUNT = value.getDouble ( );
	}


	/**  */
	public static void setDEDUC_FIJA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_FIJA = value.getDouble ( );
	}


	/**  */
	public static void setCUIDO_MENOR  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO_MENOR = value.getDouble ( );
	}


	/**  */
	public static void setCUIDO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO = value.getDouble ( );
	}


	/**  */
	public static void setSTANDARD  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STANDARD = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_SALARIO   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SALARIO  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_SAL_MAYOR   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MAYOR  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_SAL_MENOR   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MENOR  = value.getDouble ( );
	}


	/**  */
	public static void setEXENCION_RETP_MAX   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP_MAX  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_RETP   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_RETI   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETI  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_RETF   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETF  = value.getDouble ( );
	}

	/**  */
	public static void setEXENCION_SEG_SOC   ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SEG_SOC = value.getDouble ( );
	}

	/**  */
	public static void setUNIDAD  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD = value.getDouble ( );
	}

	//*****
	public static void setUNIDAD_NCAL  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD_NCAL = value.getDouble ( );
	}
	public static void setNCAL_COUNT  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NCAL_COUNT = value.getDouble ( );
	}
	//*****

	/**  */
	public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_INGRE_BRUTO = value.getString ( );
	}


	/**  */
	public static void setDEDUCCION_INGRESO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUCCION_INGRESO = value.getDouble ( );
	}


	/**  */
	public static void setINCAPACITADO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO = value.getDouble ( );
	}


	/**  */
	public static void setBENEFICIO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO = value.getDouble ( );
	}


	/**  */
	public static void setELEGIBLE_REG  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_REG = value.getString ( );
	}


	/**  */
	public static void setELEGIBLE_EMER  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_EMER = value.getString ( );
	}


	/**  */
	public static void setING_MENOS_40  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ING_MENOS_40 = value.getDouble ( );
	}


	/**  */
	public static void setDEDUC_60  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_60 = value.getDouble ( );
	}


	/**  */
	public static void setTOTAL_60  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_60 = value.getDouble ( );
	}


	/**  */
	public static void setDEDUC_INCA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_INCA = value.getDouble ( );
	}


	/**  */
	public static void setTOTAL_INCA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_INCA = value.getDouble ( );
	}


	/**  */
	public static void setDEDUC_EST  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_EST = value.getDouble ( );
	}


	/**  */
	public static void setTOTAL_EST  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_EST = value.getDouble ( );
	}


	/**  */
	public static void setTOTAL_OTRO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_OTRO = value.getDouble ( );
	}


	/**  */
	public static void setTOTAL_CUIDO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_CUIDO = value.getDouble ( );
	}


	/**  */
	public static void setRECURSOS_LIQUIDOS  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_LIQUIDOS = value.getDouble ( );
	}


	/**  */
	public static void setRECURSOS_BRUTO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_BRUTO = value.getDouble ( );
	}


	/**  */
	public static void setBENEFICIO_PRORRATEADO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_PRORRATEADO = value.getDouble ( );
	}


	/**  */
	public static void setBENEFICIO_TEMP  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_TEMP = value.getDouble ( );
	}


	/**  */
	public static void setGASTOS_INHERENTES  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHERENTES = value.getDouble ( );
	}


	/**  */
	public static void setGASTOS_INHE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHE = value.getDouble ( );
	}


	/**  */
	public static void setSALA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALA = value.getDouble ( );
	}


	/**  */
	public static void setADIE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ADIE = value.getDouble ( );
	}


	/**  */
	public static void setNPRO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NPRO = value.getDouble ( );
	}


	/**  */
	public static void setNULL_DATE  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NULL_DATE = value.getDate ( );
	}


	/**  */
	public static void setMENOR  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR = value.getDouble ( );
	}


	/**  */
	public static void setBONO_ANCIANO  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BONO_ANCIANO = value.getDouble ( );
	}

	/**  */
	public static void setGASTOS_AGRICULTURA  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_AGRICULTURA = value.getDouble ( );
	}

	/**  */
	public static void setINGRESO_TEMP  ( RallyApplication __app, Parameter value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_TEMP = value.getDouble ( );
	}



	/**  */
	public static String getSERVICIO_STATUS  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_STATUS;
	}


	/**  */
	public static void setSERVICIO_STATUS  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_STATUS = value;
	}


	/**  */
	public static void setSERVICIO_STATUS  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_STATUS = ( String ) value;
	}



	/**  */
	public static String getINELEGIBLE_REG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_REG;
	}


	/**  */
	public static void setINELEGIBLE_REG  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_REG = value;
	}


	/**  */
	public static void setINELEGIBLE_REG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_REG = ( String ) value;
	}



	/**  */
	public static String getINELEGIBLE_EMER  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_EMER;
	}


	/**  */
	public static void setINELEGIBLE_EMER  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_EMER = value;
	}


	/**  */
	public static void setINELEGIBLE_EMER  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_EMER = ( String ) value;
	}



	/**  */
	public static String getRAZON  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RAZON;
	}


	/**  */
	public static void setRAZON  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RAZON = value;
	}


	/**  */
	public static void setRAZON  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RAZON = ( String ) value;
	}



	/**  */
	public static String getINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_INGRE_BRUTO;
	}


	/**  */
	public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_INGRE_BRUTO = value;
	}


	/**  */
	public static void setINELEGIBLE_INGRE_BRUTO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INELEGIBLE_INGRE_BRUTO = ( String ) value;
	}



	/**  */
	public static String getELEGIBLE_REG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_REG;
	}


	/**  */
	public static void setELEGIBLE_REG  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_REG = value;
	}


	/**  */
	public static void setELEGIBLE_REG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_REG = ( String ) value;
	}



	/**  */
	public static String getELEGIBLE_EMER  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_EMER;
	}


	/**  */
	public static void setELEGIBLE_EMER  ( RallyApplication __app, String value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_EMER = value;
	}


	/**  */
	public static void setELEGIBLE_EMER  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEGIBLE_EMER = ( String ) value;
	}



	/**  */
	public static Date getNULL_DATE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NULL_DATE;
	}


	/**  */
	public static void setNULL_DATE  ( RallyApplication __app, Date value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NULL_DATE = value;
	}


	/**  */
	public static void setNULL_DATE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NULL_DATE = ( Date ) value;
	}



	/**  */
	public static DataStore getNUCLEO_SERVICIO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NUCLEO_SERVICIO_DSD;
	}


	/**  */
	public static void setNUCLEO_SERVICIO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NUCLEO_SERVICIO_DSD = value;
	}


	/**  */
	public static void setNUCLEO_SERVICIO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NUCLEO_SERVICIO_DSD = ( DataStore ) value;
	}



	/**  */
	public static DataStore getCLIENTES_READ_LOC_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTES_READ_LOC_DSD;
	}


	/**  */
	public static void setCLIENTES_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTES_READ_LOC_DSD = value;
	}


	/**  */
	public static void setCLIENTES_READ_LOC_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTES_READ_LOC_DSD = ( DataStore ) value;
	}



	/**  */
	public static DataStore getRECURSOS_NUCLEO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_NUCLEO_DSD;
	}


	/**  */
	public static void setRECURSOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_NUCLEO_DSD = value;
	}


	/**  */
	public static void setRECURSOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_NUCLEO_DSD = ( DataStore ) value;
	}



	/**  */
	public static DataStore getBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIOS_PAN_RO_DSD;
	}


	/**  */
	public static void setBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIOS_PAN_RO_DSD = value;
	}


	/**  */
	public static void setBENEFICIOS_PAN_RO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIOS_PAN_RO_DSD = ( DataStore ) value;
	}



	/**  */
	public static DataStore getINGRESOS_NUCLEO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESOS_NUCLEO_DSD;
	}


	/**  */
	public static void setINGRESOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESOS_NUCLEO_DSD = value;
	}


	/**  */
	public static void setINGRESOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESOS_NUCLEO_DSD = ( DataStore ) value;
	}


	/**  */
	public static DataStore getCLIENTE_AGENCIA_RO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTE_AGENCIA_RO_DSD;
	}


	/**  */
	public static void setCLIENTE_AGENCIA_RO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTE_AGENCIA_RO_DSD = value;
	}


	/**  */
	public static void setCLIENTE_AGENCIA_RO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CLIENTE_AGENCIA_RO_DSD = ( DataStore ) value;
	}


	/**  */
	public static DataStore getGASTOS_NUCLEO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_NUCLEO_DSD;
	}


	/**  */
	public static void setGASTOS_NUCLEO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_NUCLEO_DSD = value;
	}


	/**  */
	public static void setGASTOS_NUCLEO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_NUCLEO_DSD = ( DataStore ) value;
	}



	/**  */
	public static DataStore getDETERMINA_RO_DSD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DETERMINA_RO_DSD;
	}


	/**  */
	public static void setDETERMINA_RO_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DETERMINA_RO_DSD = value;
	}


	/**  */
	public static void setDETERMINA_RO_DSD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DETERMINA_RO_DSD = ( DataStore ) value;
	}




	/**  */
	public static double getOPEN_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN_ID;
	}


	/**  */
	public static Double getOPEN_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN_ID );
	}


	/**  */
	public static void setOPEN_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN_ID = value;
	}


	/**  */
	public static void setOPEN_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN2_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN2_ID;
	}


	/**  */
	public static Double getOPEN2_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN2_ID );
	}


	/**  */
	public static void setOPEN2_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN2_ID = value;
	}


	/**  */
	public static void setOPEN2_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN2_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN3_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN3_ID;
	}


	/**  */
	public static Double getOPEN3_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN3_ID );
	}


	/**  */
	public static void setOPEN3_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN3_ID = value;
	}


	/**  */
	public static void setOPEN3_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN3_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN4_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN4_ID;
	}


	/**  */
	public static Double getOPEN4_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN4_ID );
	}


	/**  */
	public static void setOPEN4_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN4_ID = value;
	}


	/**  */
	public static void setOPEN4_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN4_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN5_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN5_ID;
	}


	/**  */
	public static Double getOPEN5_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN5_ID );
	}


	/**  */
	public static void setOPEN5_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN5_ID = value;
	}


	/**  */
	public static void setOPEN5_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN5_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN6_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN6_ID;
	}


	/**  */
	public static Double getOPEN6_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN6_ID );
	}


	/**  */
	public static void setOPEN6_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN6_ID = value;
	}


	/**  */
	public static void setOPEN6_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN6_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN7_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN7_ID;
	}


	/**  */
	public static Double getOPEN7_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN7_ID );
	}


	/**  */
	public static void setOPEN7_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN7_ID = value;
	}


	/**  */
	public static void setOPEN7_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN7_ID = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getOPEN8_ID  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN8_ID;
	}


	/**  */
	public static Double getOPEN8_IDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN8_ID );
	}


	/**  */
	public static void setOPEN8_ID  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN8_ID = value;
	}


	/**  */
	public static void setOPEN8_ID  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OPEN8_ID = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getSTATUS_CODE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS_CODE;
	}


	/**  */
	public static Double getSTATUS_CODEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS_CODE );
	}


	/**  */
	public static void setSTATUS_CODE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS_CODE = value;
	}


	/**  */
	public static void setSTATUS_CODE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS_CODE = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSTATUS2_CODE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS2_CODE;
	}


	/**  */
	public static Double getSTATUS2_CODEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS2_CODE );
	}


	/**  */
	public static void setSTATUS2_CODE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS2_CODE = value;
	}


	/**  */
	public static void setSTATUS2_CODE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS2_CODE = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSTATUS7_CODE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS7_CODE;
	}


	/**  */
	public static Double getSTATUS7_CODEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS7_CODE );
	}


	/**  */
	public static void setSTATUS7_CODE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS7_CODE = value;
	}


	/**  */
	public static void setSTATUS7_CODE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS7_CODE = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSTATUS8_CODE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS8_CODE;
	}


	/**  */
	public static Double getSTATUS8_CODEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS8_CODE );
	}


	/**  */
	public static void setSTATUS8_CODE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS8_CODE = value;
	}


	/**  */
	public static void setSTATUS8_CODE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STATUS8_CODE = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getSERVICIO_BENEFICIO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_BENEFICIO;
	}


	/**  */
	public static Double getSERVICIO_BENEFICIODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_BENEFICIO );
	}


	/**  */
	public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_BENEFICIO = value;
	}


	/**  */
	public static void setSERVICIO_BENEFICIO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SERVICIO_BENEFICIO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getELEG_BRUTO_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEG_BRUTO_FLG;
	}


	/**  */
	public static Double getELEG_BRUTO_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEG_BRUTO_FLG );
	}


	/**  */
	public static void setELEG_BRUTO_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEG_BRUTO_FLG = value;
	}


	/**  */
	public static void setELEG_BRUTO_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ELEG_BRUTO_FLG = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINEL_BRUTO_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INEL_BRUTO_FLG;
	}


	/**  */
	public static Double getINEL_BRUTO_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INEL_BRUTO_FLG );
	}


	/**  */
	public static void setINEL_BRUTO_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INEL_BRUTO_FLG = value;
	}


	/**  */
	public static void setINEL_BRUTO_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INEL_BRUTO_FLG = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getINGRESOS_NUCLEO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL.class ) ).INGRESOS_NUCLEO;
	}


	/**  */
	public static Double getINGRESOS_NUCLEODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL.class ) ).INGRESOS_NUCLEO );
	}


	/**  */
	public static void setINGRESOS_NUCLEO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL.class ) ).INGRESOS_NUCLEO = value;
	}


	/**  */
	public static void setINGRESOS_NUCLEO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_3_NOUPD_ADL.class ) ).INGRESOS_NUCLEO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getGASTOS_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_FLG;
	}


	/**  */
	public static Double getGASTOS_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_FLG );
	}


	/**  */
	public static void setGASTOS_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_FLG = value;
	}


	/**  */
	public static void setGASTOS_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_FLG = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getAGRB_AMT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_AMT;
	}


	/**  */
	public static Double getAGRB_AMTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_AMT );
	}


	/**  */
	public static void setAGRB_AMT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_AMT = value;
	}


	/**  */
	public static void setAGRB_AMT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_AMT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getAGRB_TOT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_TOT;
	}


	/**  */
	public static Double getAGRB_TOTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_TOT );
	}


	/**  */
	public static void setAGRB_TOT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_TOT = value;
	}


	/**  */
	public static void setAGRB_TOT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_TOT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getAGRB_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_FLG;
	}


	/**  */
	public static Double getAGRB_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_FLG );
	}


	/**  */
	public static void setAGRB_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_FLG = value;
	}


	/**  */
	public static void setAGRB_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).AGRB_FLG = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSAVE_SSN  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAVE_SSN;
	}


	/**  */
	public static Double getSAVE_SSNDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAVE_SSN );
	}


	/**  */
	public static void setSAVE_SSN  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAVE_SSN = value;
	}


	/**  */
	public static void setSAVE_SSN  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAVE_SSN = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getRECURSOS_ACUM  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_ACUM;
	}


	/**  */
	public static Double getRECURSOS_ACUMDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_ACUM );
	}


	/**  */
	public static void setRECURSOS_ACUM  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_ACUM = value;
	}


	/**  */
	public static void setRECURSOS_ACUM  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_ACUM = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDIA_SOLIC_LV  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DIA_SOLIC_LV;
	}


	/**  */
	public static Double getDIA_SOLIC_LVDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DIA_SOLIC_LV );
	}


	/**  */
	public static void setDIA_SOLIC_LV  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DIA_SOLIC_LV = value;
	}


	/**  */
	public static void setDIA_SOLIC_LV  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DIA_SOLIC_LV = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getEDAD_IND  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EDAD_IND;
	}


	/**  */
	public static Double getEDAD_INDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EDAD_IND );
	}


	/**  */
	public static void setEDAD_IND  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EDAD_IND = value;
	}


	/**  */
	public static void setEDAD_IND  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EDAD_IND = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getANCIANO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO;
	}


	/**  */
	public static Double getANCIANODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO );
	}


	/**  */
	public static void setANCIANO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO = value;
	}


	/**  */
	public static void setANCIANO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINCA_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCA_FLG;
	}


	/**  */
	public static Double getINCA_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCA_FLG );
	}


	/**  */
	public static void setINCA_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCA_FLG = value;
	}


	/**  */
	public static void setINCA_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCA_FLG = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getMENOR_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_FLG;
	}


	/**  */
	public static Double getMENOR_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_FLG );
	}


	/**  */
	public static void setMENOR_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_FLG = value;
	}

	/**  */
	public static void setMENOR_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_FLG = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getCONY_FLG  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_FLG;
	}


	/**  */
	public static Double getCONY_FLGDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_FLG );
	}


	/**  */
	public static void setCONY_FLG  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_FLG = value;
	}

	/**  */
	public static void setCONY_FLG  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_FLG = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getGASTOS  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS;
	}

	/**  */
	public static double getGASTOS_MEDICOS  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_MEDICOS;
	}

	/**  */
	public static Double getGASTOSDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS );
	}


	/**  */
	public static void setGASTOS  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS = value;
	}


	/**  */
	public static void setGASTOS  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static Double getGASTOS_MEDICOSDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_MEDICOS );
	}


	/**  */
	public static void setGASTOS_MEDICOS  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_MEDICOS = value;
	}


	/**  */
	public static void setGASTOS_MEDICOS  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_MEDICOS = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getANCIANO_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO_COUNT;
	}


	/**  */
	public static Double getANCIANO_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO_COUNT );
	}


	/**  */
	public static void setANCIANO_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO_COUNT = value;
	}


	/**  */
	public static void setANCIANO_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ANCIANO_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getMENOR_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_COUNT;
	}


	/**  */
	public static Double getMENOR_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_COUNT );
	}


	/**  */
	public static void setMENOR_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_COUNT = value;
	}


	/**  */
	public static void setMENOR_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEAMBULANTE_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEAMBULANTE_COUNT;
	}


	/**  */
	public static Double getDEAMBULANTE_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEAMBULANTE_COUNT );
	}


	/**  */
	public static void setDEAMBULANTE_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEAMBULANTE_COUNT = value;
	}


	/**  */
	public static void setDEAMBULANTE_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEAMBULANTE_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getCONY_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_COUNT;
	}


	/**  */
	public static Double getCONY_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_COUNT );
	}


	/**  */
	public static void setCONY_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_COUNT = value;
	}


	/**  */
	public static void setCONY_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CONY_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINCAPACITADO_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO_COUNT;
	}


	/**  */
	public static Double getINCAPACITADO_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO_COUNT );
	}


	/**  */
	public static void setINCAPACITADO_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO_COUNT = value;
	}


	/**  */
	public static void setINCAPACITADO_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINGRESO_BRUTO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_BRUTO;
	}


	/**  */
	public static Double getINGRESO_BRUTODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_BRUTO );
	}


	/**  */
	public static void setINGRESO_BRUTO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_BRUTO = value;
	}


	/**  */
	public static void setINGRESO_BRUTO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_BRUTO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSALARIO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALARIO;
	}


	/**  */
	public static Double getSALARIODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALARIO );
	}


	/**  */
	public static void setSALARIO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALARIO = value;
	}


	/**  */
	public static void setSALARIO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALARIO = ( ( Double ) value ).doubleValue ( );
	}



	/**  */
	public static double getRETIRO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETIRO;
	}


	/**  */
	public static Double getRETIRODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETIRO );
	}


	/**  */
	public static void setRETIRO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETIRO = value;
	}


	/**  */
	public static void setRETIRO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETIRO = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getSEG_SOC_BRUTO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC_BRUTO;
	}


	/**  */
	public static Double getSEG_SOC_BRUTODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC_BRUTO );
	}


	/**  */
	public static void setSEG_SOC_BRUTO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC_BRUTO = value;
	}


	/**  */
	public static void setSEG_SOC_BRUTO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC_BRUTO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSEG_SOC  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC;
	}


	/**  */
	public static Double getSEG_SOCDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC );
	}


	/**  */
	public static void setSEG_SOC  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC = value;
	}


	/**  */
	public static void setSEG_SOC  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SEG_SOC = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getINGRESO_CONY  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_CONY;
	}


	/**  */
	public static Double getINGRESO_CONYDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_CONY );
	}


	/**  */
	public static void setINGRESO_CONY  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_CONY = value;
	}


	/**  */
	public static void setINGRESO_CONY  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_CONY = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getRETI  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETI;
	}


	/**  */
	public static Double getRETIDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETI );
	}


	/**  */
	public static void setRETI  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETI = value;
	}


	/**  */
	public static void setRETI  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETI = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getRETP  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETP;
	}


	/**  */
	public static Double getRETPDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETP );
	}


	/**  */
	public static void setRETP  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETP = value;
	}


	/**  */
	public static void setRETP  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETP = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getRETF  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETF;
	}


	/**  */
	public static Double getRETFDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETF );
	}


	/**  */
	public static void setRETF  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETF = value;
	}


	/**  */
	public static void setRETF  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RETF = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getBENEINCA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEINCA;
	}


	/**  */
	public static Double getBENEINCADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEINCA );
	}


	/**  */
	public static void setBENEINCA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEINCA = value;
	}


	/**  */
	public static void setBENEINCA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEINCA = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getOTROS  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OTROS;
	}


	/**  */
	public static Double getOTROSDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OTROS );
	}


	/**  */
	public static void setOTROS  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OTROS = value;
	}


	/**  */
	public static void setOTROS  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).OTROS = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUC_SAL  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_SAL;
	}


	/**  */
	public static Double getDEDUC_SALDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_SAL );
	}


	/**  */
	public static void setDEDUC_SAL  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_SAL = value;
	}


	/**  */
	public static void setDEDUC_SAL  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_SAL = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSAL_NET  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAL_NET;
	}


	/**  */
	public static Double getSAL_NETDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAL_NET );
	}


	/**  */
	public static void setSAL_NET  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAL_NET = value;
	}


	/**  */
	public static void setSAL_NET  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SAL_NET = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINGRESO_NETO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_NETO;
	}


	/**  */
	public static Double getINGRESO_NETODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_NETO );
	}


	/**  */
	public static void setINGRESO_NETO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_NETO = value;
	}


	/**  */
	public static void setINGRESO_NETO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_NETO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getESTUDIANTE_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ESTUDIANTE_COUNT;
	}


	/**  */
	public static Double getESTUDIANTE_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ESTUDIANTE_COUNT );
	}


	/**  */
	public static void setESTUDIANTE_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ESTUDIANTE_COUNT = value;
	}


	/**  */
	public static void setESTUDIANTE_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ESTUDIANTE_COUNT = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUC_FIJA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_FIJA;
	}


	/**  */
	public static Double getDEDUC_FIJADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_FIJA );
	}


	/**  */
	public static void setDEDUC_FIJA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_FIJA = value;
	}


	/**  */
	public static void setDEDUC_FIJA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_FIJA = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getCUIDO_MENOR  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO_MENOR;
	}


	/**  */
	public static Double getCUIDO_MENORDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO_MENOR );
	}


	/**  */
	public static void setCUIDO_MENOR  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO_MENOR = value;
	}


	/**  */
	public static void setCUIDO_MENOR  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO_MENOR = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getCUIDO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO;
	}


	/**  */
	public static Double getCUIDODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO );
	}


	/**  */
	public static void setCUIDO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO = value;
	}


	/**  */
	public static void setCUIDO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).CUIDO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSTANDARD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STANDARD;
	}


	/**  */
	public static Double getSTANDARDDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STANDARD );
	}


	/**  */
	public static void setSTANDARD  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STANDARD = value;
	}


	/**  */
	public static void setSTANDARD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).STANDARD = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getEXENCION_SALARIO   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SALARIO ;
	}


	/**  */
	public static Double getEXENCION_SALARIODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SALARIO  );
	}


	/**  */
	public static void setEXENCION_SALARIO   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SALARIO  = value;
	}


	/**  */
	public static void setEXENCION_SALARIO   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SALARIO  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getEXENCION_SAL_MAYOR   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MAYOR ;
	}


	/**  */
	public static Double getEXENCION_SAL_MAYORDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MAYOR  );
	}


	/**  */
	public static void setEXENCION_SAL_MAYOR   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MAYOR  = value;
	}


	/**  */
	public static void setEXENCION_SAL_MAYOR   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MAYOR  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getEXENCION_SAL_MENOR   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MENOR ;
	}

	/**  */
	public static Double getEXENCION_SAL_MENORDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MENOR  );
	}


	/**  */
	public static void setEXENCION_SAL_MENOR   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MENOR  = value;
	}


	/**  */
	public static void setEXENCION_SAL_MENOR   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SAL_MENOR  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getEXENCION_RETP   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP ;
	}

	/**  */
	public static Double getEXENCION_RETPDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP  );
	}


	/**  */
	public static void setEXENCION_RETP   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP  = value;
	}

	/**  */
	public static void setEXENCION_RETP   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP  = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getEXENCION_RETF   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETF ;
	}

	/**  */
	public static Double getEXENCION_RETFDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETF  );
	}


	/**  */
	public static void setEXENCION_RETF   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETF  = value;
	}

	/**  */
	public static void setEXENCION_RETF   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETF  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getEXENCION_RETP_MAX   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP_MAX ;
	}


	/**  */
	public static Double getEXENCION_RETP_MAXDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP_MAX  );
	}

	/**  */
	public static void setEXENCION_RETP_MAX   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP_MAX  = value;
	}

	/**  */
	public static void setEXENCION_RETP_MAX   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETP_MAX  = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getEXENCION_RETI   ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETI ;
	}


	/**  */
	public static Double getEXENCION_RETIDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETI  );
	}


	/**  */
	public static void setEXENCION_RETI   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_RETI  = value;
	}

	/**  */
	public static void getEXENCION_SEG_SOC   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SEG_SOC  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static Double getEXENCION_SEG_SOCDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SEG_SOC  );
	}


	/**  */
	public static void setEXENCION_SEG_SOC   ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SEG_SOC  = value;
	}

	/**  */
	public static void setEXENCION_SEG_SOC   ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).EXENCION_SEG_SOC  = ( ( Double ) value ).doubleValue ( );
	}

	/**  */
	public static double getUNIDAD  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD;
	}

	//*****
	public static double getUNIDAD_NCAL  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD_NCAL;
	}
	public static Double getUNIDAD_NCALDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD_NCAL );
	}
	public static void setUNIDAD_NCAL  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD_NCAL = value;
	}
	public static void setUNIDAD_NCAL  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD_NCAL = ( ( Double ) value ).doubleValue ( );
	}

	public static double getNCAL_COUNT  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NCAL_COUNT;
	}
	public static Double getNCAL_COUNTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NCAL_COUNT );
	}
	public static void setNCAL_COUNT  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NCAL_COUNT = value;
	}
	public static void setNCAL_COUNT  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NCAL_COUNT = ( ( Double ) value ).doubleValue ( );
	}
	//*****

	/**  */
	public static Double getUNIDADDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD );
	}


	/**  */
	public static void setUNIDAD  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD = value;
	}


	/**  */
	public static void setUNIDAD  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).UNIDAD = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUCCION_INGRESO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUCCION_INGRESO;
	}


	/**  */
	public static Double getDEDUCCION_INGRESODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUCCION_INGRESO );
	}


	/**  */
	public static void setDEDUCCION_INGRESO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUCCION_INGRESO = value;
	}


	/**  */
	public static void setDEDUCCION_INGRESO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUCCION_INGRESO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getINCAPACITADO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO;
	}


	/**  */
	public static Double getINCAPACITADODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO );
	}


	/**  */
	public static void setINCAPACITADO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO = value;
	}


	/**  */
	public static void setINCAPACITADO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INCAPACITADO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getBENEFICIO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO;
	}


	/**  */
	public static Double getBENEFICIODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO );
	}


	/**  */
	public static void setBENEFICIO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO = value;
	}


	/**  */
	public static void setBENEFICIO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getING_MENOS_40  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ING_MENOS_40;
	}


	/**  */
	public static Double getING_MENOS_40Double ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ING_MENOS_40 );
	}


	/**  */
	public static void setING_MENOS_40  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ING_MENOS_40 = value;
	}


	/**  */
	public static void setING_MENOS_40  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ING_MENOS_40 = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUC_60  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_60;
	}


	/**  */
	public static Double getDEDUC_60Double ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_60 );
	}


	/**  */
	public static void setDEDUC_60  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_60 = value;
	}


	/**  */
	public static void setDEDUC_60  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_60 = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getTOTAL_60  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_60;
	}


	/**  */
	public static Double getTOTAL_60Double ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_60 );
	}


	/**  */
	public static void setTOTAL_60  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_60 = value;
	}


	/**  */
	public static void setTOTAL_60  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_60 = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUC_INCA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_INCA;
	}


	/**  */
	public static Double getDEDUC_INCADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_INCA );
	}


	/**  */
	public static void setDEDUC_INCA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_INCA = value;
	}


	/**  */
	public static void setDEDUC_INCA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_INCA = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getTOTAL_INCA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_INCA;
	}


	/**  */
	public static Double getTOTAL_INCADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_INCA );
	}


	/**  */
	public static void setTOTAL_INCA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_INCA = value;
	}


	/**  */
	public static void setTOTAL_INCA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_INCA = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getDEDUC_EST  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_EST;
	}


	/**  */
	public static Double getDEDUC_ESTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_EST );
	}


	/**  */
	public static void setDEDUC_EST  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_EST = value;
	}


	/**  */
	public static void setDEDUC_EST  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).DEDUC_EST = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getTOTAL_EST  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_EST;
	}


	/**  */
	public static Double getTOTAL_ESTDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_EST );
	}


	/**  */
	public static void setTOTAL_EST  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_EST = value;
	}


	/**  */
	public static void setTOTAL_EST  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_EST = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getTOTAL_OTRO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_OTRO;
	}


	/**  */
	public static Double getTOTAL_OTRODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_OTRO );
	}


	/**  */
	public static void setTOTAL_OTRO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_OTRO = value;
	}


	/**  */
	public static void setTOTAL_OTRO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_OTRO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getTOTAL_CUIDO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_CUIDO;
	}


	/**  */
	public static Double getTOTAL_CUIDODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_CUIDO );
	}


	/**  */
	public static void setTOTAL_CUIDO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_CUIDO = value;
	}


	/**  */
	public static void setTOTAL_CUIDO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).TOTAL_CUIDO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getRECURSOS_LIQUIDOS  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_LIQUIDOS;
	}


	/**  */
	public static Double getRECURSOS_LIQUIDOSDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_LIQUIDOS );
	}


	/**  */
	public static void setRECURSOS_LIQUIDOS  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_LIQUIDOS = value;
	}


	/**  */
	public static void setRECURSOS_LIQUIDOS  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_LIQUIDOS = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getRECURSOS_BRUTO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_BRUTO;
	}


	/**  */
	public static Double getRECURSOS_BRUTODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_BRUTO );
	}


	/**  */
	public static void setRECURSOS_BRUTO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_BRUTO = value;
	}


	/**  */
	public static void setRECURSOS_BRUTO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).RECURSOS_BRUTO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getBENEFICIO_PRORRATEADO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_PRORRATEADO;
	}


	/**  */
	public static Double getBENEFICIO_PRORRATEADODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_PRORRATEADO );
	}


	/**  */
	public static void setBENEFICIO_PRORRATEADO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_PRORRATEADO = value;
	}


	/**  */
	public static void setBENEFICIO_PRORRATEADO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_PRORRATEADO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getBENEFICIO_TEMP  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_TEMP;
	}


	/**  */
	public static Double getBENEFICIO_TEMPDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_TEMP );
	}


	/**  */
	public static void setBENEFICIO_TEMP  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_TEMP = value;
	}


	/**  */
	public static void setBENEFICIO_TEMP  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BENEFICIO_TEMP = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getGASTOS_INHERENTES  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHERENTES;
	}


	/**  */
	public static Double getGASTOS_INHERENTESDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHERENTES );
	}


	/**  */
	public static void setGASTOS_INHERENTES  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHERENTES = value;
	}


	/**  */
	public static void setGASTOS_INHERENTES  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHERENTES = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getGASTOS_INHE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHE;
	}


	/**  */
	public static Double getGASTOS_INHEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHE );
	}


	/**  */
	public static void setGASTOS_INHE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHE = value;
	}


	/**  */
	public static void setGASTOS_INHE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_INHE = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getSALA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALA;
	}


	/**  */
	public static Double getSALADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALA );
	}


	/**  */
	public static void setSALA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALA = value;
	}


	/**  */
	public static void setSALA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).SALA = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getADIE  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ADIE;
	}


	/**  */
	public static Double getADIEDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ADIE );
	}


	/**  */
	public static void setADIE  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ADIE = value;
	}


	/**  */
	public static void setADIE  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).ADIE = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getNPRO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NPRO;
	}


	/**  */
	public static Double getNPRODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NPRO );
	}


	/**  */
	public static void setNPRO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NPRO = value;
	}


	/**  */
	public static void setNPRO  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).NPRO = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getMENOR  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR;
	}


	/**  */
	public static Double getMENORDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR );
	}


	/**  */
	public static void setMENOR  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR = value;
	}


	/**  */
	public static void setMENOR  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).MENOR = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getBONO_ANCIANO  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BONO_ANCIANO;
	}


	/**  */
	public static Double getBONO_ANCIANODouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BONO_ANCIANO );
	}


	/**  */
	public static void setBONO_ANCIANO  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).BONO_ANCIANO = value;
	}


	/**  */
	public static void setGASTOS_AGRICULTURA  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_AGRICULTURA = ( ( Double ) value ).doubleValue ( );
	}
	///
	/**  */
	public static double getGASTOS_AGRICULTURA  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_AGRICULTURA;
	}


	/**  */
	public static Double getGASTOS_AGRICULTURADouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_AGRICULTURA );
	}


	/**  */
	public static void setGASTOS_AGRICULTURA  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).GASTOS_AGRICULTURA = value;
	}

	///
	/**  */
	public static double getINGRESO_TEMP  ( RallyApplication __app )
	{
		return ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_TEMP;
	}


	/**  */
	public static Double getINGRESO_TEMPDouble ( RallyApplication __app )
	{
		return new Double ( ( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_TEMP );
	}


	/**  */
	public static void setINGRESO_TEMP  ( RallyApplication __app, double value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_TEMP = value;
	}


	/**  */
	public static void setINGRESO_TEMP  ( RallyApplication __app, Object value )
	{
		( ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) __app.getADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class ) ).INGRESO_TEMP = ( ( Double ) value ).doubleValue ( );
	}

	// -------------------------------------------------------------------
	// ----------   Methods   --------------------------------------------

	/**
	 *
	 * @param __app
	 * @return
	 */
	public static DETERMINAR_ELEGIBILIDAD_PAN_2 get ( RallyApplication __app )
	{
		DETERMINAR_ELEGIBILIDAD_PAN_2 adl = new DETERMINAR_ELEGIBILIDAD_PAN_2 ( );
		__app.register ( adl, "DETERMINAR_ELEGIBILIDAD_PAN_2" );
		__app.setADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class, adl );
		adl.setApplication ( __app );
		return adl;
	}


	/**
	 *
	 * @param __app
	 * @param ps
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app, ParameterSet ps )
	{
		DETERMINAR_ELEGIBILIDAD_PAN_2.get ( __app ).process ( ps );
	}


	/**
	 *
	 * @param __app
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app )
	{
		ParameterSet ps = null;
		DETERMINAR_ELEGIBILIDAD_PAN_2.exec ( __app, ps );
	}


	/**
	 * Overrides the ancestor's method
	 *
	 * @param __app
	 */
	public void setApplication ( RallyApplication __app )
	{
		this.app = ( SAIC_DMQ_ORA_Application ) __app;
		if ( this.app != null )
		{
			this.dm = ( RallyDataManager ) this.app.getDataManager ( );
		}
	}


	/**
	 * Overrides the ancestor's method
	 *
	 * @param parms
	 */
	public void execute ( ParameterSet parms )
	{
		this.process ( parms );
	}




	/**
	 *
	 */
	protected void doReturn ( )
	{
		this.unregister ( );
	}


	/**
	 *
	 */
	public void unregister ( )
	{
		this.app.unregister ( this );
		IRegisteredObject rObj = this.app.get ( "DETERMINAR_ELEGIBILIDAD_PAN_2" );
		if ( rObj != null && rObj instanceof DETERMINAR_ELEGIBILIDAD_PAN_2 )
		{
			this.app.setADL ( DETERMINAR_ELEGIBILIDAD_PAN_2.class, ( DETERMINAR_ELEGIBILIDAD_PAN_2 ) rObj );
		}
	}


	/**
	 * Overrides the ancestor's method
	 *
	 * @param ps
	 */
	protected void process ( ParameterSet ps )
	{
		Debug.println ( Debug.TRACE, "DETERMINAR_ELEGIBILIDAD_PAN_2 Step " + this.currentStep );
		super.process ( ps );
		switch ( this.currentStep )
		{
		case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
		case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
		case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
		case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
		case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
		case 5:  { this.currentStep ++; this.step5 ( this.keyParms ); break; }
		case 6:  { this.currentStep ++; this.step6 ( this.keyParms ); break; }
		case 7:  { this.currentStep ++; this.step7 ( this.keyParms ); break; }
		case 8:  { this.currentStep ++; this.step8 ( this.keyParms ); break; }
		case 9:  { this.currentStep ++; this.step9 ( this.keyParms ); break; }
		case 10:  { this.currentStep ++; this.step10 ( this.keyParms ); break; }
		case 11:  { this.currentStep ++; this.step11 ( this.keyParms ); break; }
		case 12:  { this.currentStep ++; this.step12 ( this.keyParms ); break; }
		case 13:  { this.currentStep ++; this.step13 ( this.keyParms ); break; }
		case 14:  { this.currentStep ++; this.step14 ( this.keyParms ); break; }
		case 15:  { this.currentStep ++; this.step15 ( this.keyParms ); break; }
		case 16:  { this.currentStep ++; this.step16 ( this.keyParms ); break; }
		case 17:  { this.currentStep ++; this.step17 ( this.keyParms ); break; }
		case 18:  { this.currentStep ++; this.step18 ( this.keyParms ); break; }
		case 19:  { this.currentStep ++; this.step19 ( this.keyParms ); break; }
		case 20:  { this.currentStep ++; this.step20 ( this.keyParms ); break; }
		case 21:  { this.currentStep ++; this.step21 ( this.keyParms ); break; }
		case 22:  { this.currentStep ++; this.step22 ( this.keyParms ); break; }
		case 23:  { this.currentStep ++; this.step23 ( this.keyParms ); break; }
		case 24:  { this.currentStep ++; this.step24 ( this.keyParms ); break; }
		case 25:  { this.currentStep ++; this.step25 ( this.keyParms ); break; }
		case 26:  { this.currentStep ++; this.step26 ( this.keyParms ); break; }
		case 27:  { this.currentStep ++; this.step27 ( this.keyParms ); break; }
		case 28:  { this.currentStep ++; this.step28 ( this.keyParms ); break; }
		case 29:  { this.currentStep ++; this.step29 ( this.keyParms ); break; }
		case 30:  { this.currentStep ++; this.step30 ( this.keyParms ); break; }
		case 31:  { this.currentStep ++; this.step31 ( this.keyParms ); break; }
		case 32:  { this.currentStep ++; this.step32 ( this.keyParms ); break; }
		default:
		{
			this.currentStep = 0;
			Debug.println ( Debug.TRACE, "DETERMINAR_ELEGIBILIDAD_PAN_2 ended" );
			this.unregister ( );
			break;
		}
		}
		if ( this.currentStep > 0 ) this.app.goOn ( );
	}



	/**
	 *
	 */
	protected void step0 ( ParameterSet ps )
	{

		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			ANCIANO_COUNT = 0;
			this.app.CANT_ANCIANO = 0;
			COUNTER = 0;
			OLD_COD_SERV = this.app.COD_SERV_GBL;
			if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "E" ) )
			{
				SERVICIOS2_DSD = this.dm.create ( "SERVICIOS2_DSD" );
				SERV_ID = SERVICIOS2_DSD.getId ( );
				SERV_STATUS = RallyDataStoreException.getDefault ( );

				SERV_STATUS  = this.dm.reset ( SERV_ID );

				this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
				this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
				this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
				this.dm.setField ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );

				SERV_STATUS  = this.dm.limitQueryFromBuffer ( SERV_ID );
				SERV_STATUS  = this.dm.retrieve ( SERV_ID );

				SERV_STATUS  = this.dm.firstRow ( SERV_ID );
				if ( ! Compare.equals ( SERV_STATUS, 0 ) )
				{
					this.app.setError ( 0, 510 );
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", 0  );
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					this.doReturn ( );
					return;
				}
				while ( ( Compare.equals ( COUNTER, 0 ) ) && ( Compare.equals ( SERV_STATUS, 0 ) )   )
				{
					//if ( Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO" ), 0, 4 ), "PANE" ) )
					if (Compare.equals (RallyStringService.subString ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "SERVICIOS_COD_SERVICIO"),0,4),"PANE"))
					{
						this.app.COD_SERV_GBL =  this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "SERVICIOS_COD_SERVICIO");
						this.app.FCH_SOLIC_SERV_GBL = this.dm.getFieldDate ( this.dm.get ( "SERVICIOS2_DSD" ), "FCH_SOLICITUD" );
						if ( Compare.equals ( TruncService.trunc ( this.dm.getFieldDate ( this.dm.get ( "SERVICIOS2_DSD" ), "FCH_COMIENZO" ), "MM" ) , TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDateItem ( "MES_ANO_BENEFICIO_CORRECTO" ), "MM" )  ) )
						{
							//TODO
							//this.app.COD_SERV_GBL = this.dm.getFieldString ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO" );
							COUNTER = MathService.plus ( COUNTER, 1  );
						}
					}
					//else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO" ), "PAN" ) )
					else if (Compare.equals(this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "SERVICIOS_COD_SERVICIO"),"PAN"))
					{
						this.app.COD_SERV_GBL = this.dm.getFieldString ( this.dm.get ( "SERVICIOS2_DSD" ), "COD_SERVICIO" );
						this.app.FCH_SOLIC_SERV_GBL = this.dm.getFieldDate ( this.dm.get ( "SERVICIOS2_DSD" ), "FCH_SOLICITUD" );
					}

					SERV_STATUS  = this.dm.nextRow ( SERV_ID );

				}
				SERV_STATUS  = this.dm.dbClose ( SERV_ID );

			}
		}

		NUCLEO_SERVICIO_DSD = this.dm.create ( "NUCLEO_SERVICIO_DSD" );
		OPEN_ID = NUCLEO_SERVICIO_DSD.getId ( );
		STATUS_CODE = RallyDataStoreException.getDefault ( );
		CLIENTES_READ_LOC_DSD = this.dm.create ( "CLIENTES_READ_LOC_DSD" );
		OPEN2_ID = CLIENTES_READ_LOC_DSD.getId ( );
		STATUS2_CODE = RallyDataStoreException.getDefault ( );
		RECURSOS_NUCLEO_DSD = this.dm.create ( "RECURSOS_NUCLEO_DSD" );
		OPEN3_ID = RECURSOS_NUCLEO_DSD.getId ( );
		STATUS_CODE = RallyDataStoreException.getDefault ( );
		BENEFICIOS_PAN_RO_DSD = this.dm.create ( "BENEFICIOS_PAN_RO_DSD" );
		OPEN4_ID = BENEFICIOS_PAN_RO_DSD.getId ( );
		STATUS_CODE = RallyDataStoreException.getDefault ( );
		if ( ! Compare.equals ( STATUS_CODE, 0 ) )
		{
			this.app.setError ( 0, STATUS_CODE );
		}
		AJUSTE_PAN_RO_DSD = this.dm.create ( "AJUSTE_PAN_RO_DSD" );
		AJUSTE_PAN_ID = AJUSTE_PAN_RO_DSD.getId ( );
		AJUSTE_PAN_STATUS = RallyDataStoreException.getDefault ( );
		INGRESOS_NUCLEO_DSD = this.dm.create ( "INGRESOS_NUCLEO_DSD" );
		OPEN5_ID = INGRESOS_NUCLEO_DSD.getId ( );
		STATUS_CODE = RallyDataStoreException.getDefault ( );
		GASTOS_NUCLEO_DSD = this.dm.create ( "GASTOS_NUCLEO_DSD" );
		OPEN6_ID = GASTOS_NUCLEO_DSD.getId ( );
		STATUS_CODE = RallyDataStoreException.getDefault ( );
		DETERMINA_RO_DSD = this.dm.create ( "DETERMINA_RO_DSD" );
		OPEN7_ID = DETERMINA_RO_DSD.getId ( );
		STATUS7_CODE = RallyDataStoreException.getDefault ( );
		CLIENTE_AGENCIA_RO_DSD = this.dm.create ( "CLIENTE_AGENCIA_RO_DSD" );
		OPEN8_ID = CLIENTE_AGENCIA_RO_DSD.getId ( );
		STATUS8_CODE = RallyDataStoreException.getDefault ( );

		CHECK_ID_AUTORIZA_ADL.exec ( this.app );
		return;

	}


	/**
	 *
	 */
	protected void step1 ( ParameterSet ps )
	{
		this.app.DETERMINACION_FINAL_GBL="n";
		BONO_ANCIANO = 0;
		ANCIANO_COUNT = 0;
		GASTOS_AGRICULTURA = 0;
		STANDARD = 0;
		EXENCION_SALARIO = 0;
		EXENCION_SAL_MAYOR = 0;
		EXENCION_SAL_MENOR = 0;
		EXENCION_RETP = 0;
		EXENCION_RETP_MAX = 0;
		EXENCION_RETI = 0;
		EXENCION_RETF = 0;
		EXENCION_SEG_SOC = 0;
		BENEFICIO_PRORRATEADO = 0;

		STATUS7_CODE  = this.dm.reset ( OPEN7_ID );
		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			if  ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "R" ) )
			{
				this.dm.setField ( this.dm.get ( "DETERMINA_RO_DSD" ), "COD_SERVICIO", "PAN" );
			}
			else
			{
				this.dm.setField ( this.dm.get ( "DETERMINA_RO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
			}
		}
		else
		{
			this.dm.setField ( this.dm.get ( "DETERMINA_RO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		}
		STATUS7_CODE  = this.dm.limitQueryFromBuffer ( OPEN7_ID );
		STATUS7_CODE  = this.dm.retrieve ( OPEN7_ID );

		STATUS7_CODE  = this.dm.firstRow ( OPEN7_ID );

		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "E" ) ) )
			{
				FCH_DETERMINA = this.app.FCH_SOLIC_SERV_GBL;

			}
			else
			{
				FCH_DETERMINA = this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDateItem ( "MES_ANO_BENEFICIO_CORRECTO" );

			}

		}
		else
		{
			if ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) )
			{
				FCH_DETERMINA = this.app.SYSTEM_DATE;

			}
			else
			{
				FCH_DETERMINA = this.app.FCH_SOLIC_SERV_GBL;

			}
		}   

		while ( ( Compare.equals ( STATUS7_CODE, 0 ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "DETERMINA_RO_DSD" ), "FECHA_EFECTIVIDAD" ), FCH_DETERMINA) )   )
		{
			STANDARD = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "DEDUCCION_STANDARD" );
			EXENCION_SALARIO = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_SALARIO" );
			EXENCION_SAL_MAYOR = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_SAL_MAYOR" );
			EXENCION_SAL_MENOR = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_SAL_MENOR" );
			GASTOS_AGRICULTURA = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "GASTOS_AGRICULTURA" );

			if ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ||  ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ))
			{
				if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "27-MAR-2007" ) ) 
						||   (Compare.equals(this.app.RUTINA_GBL, "RR"))
						)
				{
					BONO_ANCIANO = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "BONO_ANCIANO" );
				}
				else
				{
					BONO_ANCIANO = 0;
				}	
			}
			else
			{
				if (   (Compare.equals(this.app.RUTINA_GBL, "RR")))
				{
					BONO_ANCIANO = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "BONO_ANCIANO" );
				}
				else
				{
					BONO_ANCIANO = 0;
				}	
			}  

			//      EXENCION_RETF = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_RETF" );
			//      EXENCION_RETP = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_RETP" );
			//      EXENCION_RETP_MAX = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_RETP_MAX" );
			//      EXENCION_RETI = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_RETI" );
			//      EXENCION_SEG_SOC = this.dm.getFieldDouble ( this.dm.get ( "DETERMINA_RO_DSD" ), "EXENCION_SEG_SOC" );

			STATUS7_CODE  = this.dm.nextRow ( OPEN7_ID );

		}
		INGRESOS_NUCLEO = 0;
		BENEINCA = 0;

		STATUS_CODE  = this.dm.reset ( OPEN5_ID );

		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN5_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN5_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN5_ID );

		while ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			if	( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )
			{
				if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_PAN" ), "X" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_AE" ), "X" ) )  ) )
				{
					INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
				}
				else
				{
					if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "S" ) )
					{
						if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) )
						{
							INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )* 4.3  );
						}
						else if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) )
						{
							INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )* 4.3  );
						}
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "B" ) )
					{
						INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )* 2.15  );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "Q" ) )
					{
						INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )* 2.0  );
					}
					else
					{
						INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )* 1.0  );
					}
				}
			}
			STATUS_CODE  = this.dm.nextRow ( OPEN5_ID );
		}
		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESOS_NUCLEO  );
		}
		RECURSOS_ACUM = 0;
		RECURSOS_LIQUIDOS = 0;
		RECURSOS_NUCLEO = 0;

		STATUS_CODE  = this.dm.reset ( OPEN3_ID );

		if ( ! Compare.equals ( STATUS_CODE, 0 ) )
		{
			this.app.setError ( 1, STATUS_CODE );
			this.doReturn ( );
			return;
		}
		this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN3_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN3_ID );

		if ( ! Compare.equals ( STATUS_CODE, 0 ) )
		{
			this.app.setError ( 2, STATUS_CODE );
			if (Compare.equals(this.app.RUTINA_GBL, "RR"))
			{
				this.app.COD_SERV_GBL = OLD_COD_SERV;
			}
			this.doReturn ( );
			return;
		}

		STATUS_CODE  = this.dm.firstRow ( OPEN3_ID );

		while ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			BENEINCA = 0;
			this.app.SS_IND_GBL = this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );

			STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_IND_GBL );

			STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
			STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

			STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

			// Benefits for disability
			STATUS8_CODE  = this.dm.reset ( OPEN8_ID );
			this.dm.setField ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_IND_GBL );

			STATUS8_CODE  = this.dm.limitQueryFromBuffer ( OPEN8_ID );
			STATUS8_CODE  = this.dm.retrieve ( OPEN8_ID );

			STATUS8_CODE  = this.dm.firstRow ( OPEN8_ID );
			while ( Compare.equals ( STATUS8_CODE, 0 )  )
			{
				if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" )) )
				{
					if (( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA"  ), "ACAA")) || 
							( Compare.equals ( this.dm.getFieldString ( this.dm.get( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA"  ), "CFSE" )) || 
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA") , "ADSR")) ||
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA" ), "SIRM")) || 
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA" ), "RETF")) ||
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA" ), "DFAM")) ||
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA"  ), "ADSS")) || 
							( Compare.equals( this.dm.getFieldString( this.dm.get( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA" ), "ADSE" )) || 
							(Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA" ), "VETE")) ||
							( Compare.equals( this.dm.getFieldString ( this.dm.get( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA"), "RETO")) || 
							( Compare.equals( this.dm.getFieldString ( this.dm.get( "CLIENTE_AGENCIA_RO_DSD" ), "COD_AGENCIA"), "SIRM")))
					{
						BENEINCA = MathService.plus ( BENEINCA, 1 )  ;
					}
				}

				STATUS8_CODE  = this.dm.nextRow ( OPEN8_ID );
			}

			if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) &&
					( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "FLG_PAN" ), "X" ) )  ) || 
					( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "AE" ) ) && 
							( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "FLG_AE" ), "X" ) )  ) )
			{
				this.dm.setField ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO", this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" ) );
			}
			else
			{
				if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "RNBE" ) ) &&
						( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )  &&
						( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) )  &&
						( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) ) &&
						Compare.equals (BENEINCA,0)  )
				{
					if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) &&
							( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), "EDIF" ) )  &&
							( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), "TECA" ) )  &&
							( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), "PERS" ) )  &&
							( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), "VEH2" ) )  )
					{
						RECURSOS_LIQUIDOS = MathService.plus ( RECURSOS_LIQUIDOS, this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO" )  );
						RECURSOS_NUCLEO  = RECURSOS_LIQUIDOS;
					}
					else
					{
						if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PAN" ) ) &&
								( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "COD_TIPO_RECURSO" ), "VEH2" ) )  )
						{
							if ( Compare.ge ( this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO" ), 4650 ) )
							{
								RECURSOS_ACUM = MathService.minus ( MathService.plus ( RECURSOS_ACUM, this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO" )  ), 4650  );
								RECURSOS_NUCLEO = RECURSOS_ACUM;
							}
						}
						else
						{
							RECURSOS_ACUM = MathService.plus ( RECURSOS_ACUM, this.dm.getFieldDouble ( this.dm.get ( "RECURSOS_NUCLEO_DSD" ), "VLR_CANTIDAD_RECURSO" )  );
							RECURSOS_NUCLEO = RECURSOS_ACUM;
						}
					}
				}

			}

			STATUS_CODE  = this.dm.nextRow ( OPEN3_ID );

		}
		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "RECURSOS", RECURSOS_NUCLEO  );
			GASTOS_NUCLEO = 0;

			STATUS_CODE  = this.dm.reset ( OPEN6_ID );

			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
			STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

			STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

			while ( Compare.equals ( STATUS_CODE, 0 )  )
			{
				GASTOS_NUCLEO = MathService.plus ( GASTOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );

				STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

			}
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "GASTOS", GASTOS_NUCLEO  );
			if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "E" ) )
			{
				AJUSTE_PAN_STATUS  = this.dm.reset ( AJUSTE_PAN_ID );

				this.dm.setField ( this.dm.get ( "AJUSTE_PAN_RO_DSD" ), "MES_PORCIENTO", this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDateItem ( "MES_ANO_BENEFICIO_CORRECTO" ));

				AJUSTE_PAN_STATUS  = this.dm.limitQueryFromBuffer ( AJUSTE_PAN_ID );
				AJUSTE_PAN_STATUS  = this.dm.retrieve ( AJUSTE_PAN_ID );

				AJUSTE_PAN_STATUS  = this.dm.firstRow ( AJUSTE_PAN_ID );

				if ( ! Compare.equals ( AJUSTE_PAN_STATUS, 0 ) )
				{
					this.app.setError ( 2, 507 );
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", 0  );
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					this.doReturn ( );
					return;
				}
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", this.dm.getFieldDouble ( this.dm.get ( "AJUSTE_PAN_RO_DSD" ), "PORCIENTO" )  );
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "POS_NEG_AJUSTE", this.dm.getFieldString ( this.dm.get ( "AJUSTE_PAN_RO_DSD" ), "AUMENTO_DISMINUCION" )  );
				this.app.COD_SERV_GBL = OLD_COD_SERV;
			}

		}



		UNIDAD = 0;
		//*****
		UNIDAD_NCAL = 0;
		NCAL_COUNT = 0;
		//*****
		ANCIANO = 0;
		INCA_FLG = 0;
		MENOR_FLG = 0;
		CONY_FLG = 0;
		INGRESO_BRUTO = 0;
		INELEGIBLE_REG = "";
		ELEG_BRUTO_FLG = 0;
		RAZON = "";
		NULL_DATE = TruncService.setNull ( NULL_DATE  );

		STATUS_CODE  = this.dm.reset ( OPEN_ID );

		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

		while ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			this.app.SS_IND_GBL = this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );
			//*****
			if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "RNBE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  )
			{
				UNIDAD_NCAL = MathService.plus ( UNIDAD_NCAL, 1  );
			}
			//*****
			if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "RNBE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  )
			{
				UNIDAD = MathService.plus ( UNIDAD, 1  );
				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "NUMERO_MIEMBROS",  UNIDAD  );
				}
			}

			STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_IND_GBL );
			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
			STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

			STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

			if ( ! Compare.equals ( STATUS2_CODE, 0 ) )
			{
				this.app.setError ( 3, STATUS2_CODE );

				STATUS2_CODE  = this.dm.rollBack ( );
				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					this.app.COD_SERV_GBL = OLD_COD_SERV;
				}
				this.doReturn ( );
				return;
			}
			if ( Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ), NULL_DATE ) )
			{
				EDAD_IND = 0;
			}
			else
			{
				EDAD_IND = DateUtil.monthsBetween ( TruncService.lastDay ( FCH_DETERMINA ) , this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
			}
			if ( ( Compare.ge ( EDAD_IND, 60 ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )    
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )  )  // na
			{
				ANCIANO = 1;
			}

			// Change of Amendment # 3 PAN oct-2008
			if ( ( Compare.lt ( EDAD_IND, 18 ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL") )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA") )  ) // na
			{
				MENOR_FLG = 1.0;
			}


			if ( Compare.lt ( EDAD_IND, 14 ) )
			{
				MENOR = 1;
			}
			if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )  )// na
			{
				INCA_FLG = 1;
			}
			// Mod by JOR 10/30/2010
			//if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" )) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  )
			if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" )) )
				// End Mod by JOR 10/30/2010
			{
				CONY_FLG = 1;
			}

			STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

		}
		if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
			this._condition0 = true;
		}
		else
		{
			this._condition0 = false;
		}

		if ( this._condition0 )
		{
			if ( Compare.gt ( RECURSOS_ACUM, 3000 ) )
			{
				this._condition1 = true;
			}
			else
			{
				this._condition1 = false;
			}
			if ( this._condition1 )
			{
				if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
				{
					INELEGIBLE_EMER = "*";
				}
				else
				{
					INELEGIBLE_REG = "*";
				}
				RAZON = "FAMILIA EXCEDE EL MAXIMO DE RECURSOS";
				STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

				AJUSTE_PAN_STATUS  = this.dm.dbClose ( AJUSTE_PAN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );


				SERVICIO_BENEFICIO = 0;
				BENEFICIO = 0;
				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{           
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					RECURSOS_ACUM = 0;
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					DETERMINACION_PKT.exec ( this.app );
					this.doReturn ( );       	
				}
				else
				{
					if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
					{
						SERVICIO_STATUS = "CERRAD03";
					}
					else
					{
						SERVICIO_STATUS = "RECHAZ03";
					}
					DETERMINACION_PKT.exec ( this.app );      	
				}

				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step2 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
			if ( this._condition1 )    //      if ( Compare.gt ( RECURSOS_ACUM, 3000 ) )
			{
				DETERMINACION_FINAL_MENU.exec ( this.app );
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step3 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
			if ( this._condition1 )    //      if ( Compare.gt ( RECURSOS_ACUM, 3000 ) )
			{
				if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
				{
					this.doReturn ( );
					return;
				}
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
				}
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step4 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
			if ( this._condition1 )    //      if ( Compare.gt ( RECURSOS_ACUM, 3000 ) )
			{
				this.callParms.clear ( );
				this.callParms.set ( this.app.SS_JEFE_GBL  );
				this.callParms.set ( this.app.SS_SERV_GBL  );
				this.callParms.set ( this.app.COD_SERV_GBL  );
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
				}
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step5 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
			if ( this._condition1 )    //      if ( Compare.gt ( RECURSOS_ACUM, 3000 ) )
			{
				this.callParms.reset ( );
				this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
				this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
				this.app.COD_SERV_GBL  = this.callParms.getString ( );

				RECURSOS_ACUM = 0;
				this.doReturn ( );
				return;
			}
		}
		else if ( Compare.gt ( RECURSOS_ACUM, 2000 )  )
		{
			this._condition2 = true;
		}
		else
		{
			this._condition2 = false;
		}
		if ( this._condition2 )
		{
			if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
			{
				INELEGIBLE_EMER = "*";
			}
			else
			{
				INELEGIBLE_REG = "*";
			}
			RAZON = "FAMILIA EXCEDE EL MAXIMO DE RECURSOS";
			STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

			AJUSTE_PAN_STATUS  = this.dm.dbClose ( AJUSTE_PAN_ID );


			SERVICIO_BENEFICIO = 0;
			BENEFICIO = 0;
			if (Compare.equals(this.app.RUTINA_GBL, "RR"))
			{           
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
				RECURSOS_ACUM = 0;
				this.app.COD_SERV_GBL = OLD_COD_SERV;
				DETERMINACION_PKT.exec ( this.app );
				this.doReturn ( );       	
			}
			else
			{
				if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
				{
					SERVICIO_STATUS = "CERRAD03";
				}
				else
				{
					SERVICIO_STATUS = "RECHAZ03";
				}
				DETERMINACION_PKT.exec ( this.app );      	
			}
			return;
		}

	}


	/**
	 *
	 */
	protected void step6 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
		}
		else if ( this._condition2 )    //    else if ( Compare.gt ( RECURSOS_ACUM, 2000 )  )
		{

			DETERMINACION_FINAL_MENU.exec ( this.app );
			return;
		}

	}


	/**
	 *
	 */
	protected void step7 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
		}
		else if ( this._condition2 )    //    else if ( Compare.gt ( RECURSOS_ACUM, 2000 )  )
		{
			if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
			{
				this.doReturn ( );
				return;
			}
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{
				DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
			}
			return;
		}

	}


	/**
	 *
	 */
	protected void step8 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
		}
		else if ( this._condition2 )    //    else if ( Compare.gt ( RECURSOS_ACUM, 2000 )  )
		{
			this.callParms.clear ( );
			this.callParms.set ( this.app.SS_JEFE_GBL  );
			this.callParms.set ( this.app.SS_SERV_GBL  );
			this.callParms.set ( this.app.COD_SERV_GBL  );
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{
				INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
			}
			return;
		}

	}


	/**
	 *
	 */
	protected void step9 ( ParameterSet ps )
	{
		if ( this._condition0 )    //    if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) )
		{
		}
		else if ( this._condition2 )    //    else if ( Compare.gt ( RECURSOS_ACUM, 2000 )  )
		{
			this.callParms.reset ( );
			this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
			this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
			this.app.COD_SERV_GBL  = this.callParms.getString ( );

			RECURSOS_ACUM = 0;
			this.doReturn ( );
			return;
		}
		SALARIO = 0;
		INGRESOS_NUCLEO = 0;
		RETIRO = 0;
		INGRESO_CONY = 0;
		SEG_SOC = 0;
		OTROS = 0;
		SALA = 0;
		NPRO = 0;
		ADIE = 0;
		RETI = 0;
		RETP = 0;
		RETF = 0;

		STATUS_CODE  = this.dm.reset ( OPEN5_ID );

		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN5_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN5_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN5_ID );

		AGRB_AMT = GASTOS_AGRICULTURA;
		AGRB_TOT = 0;
		AGRB_FLG = 0;
		while ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			//TODO
			if	( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )
			{
				if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_PAN" ), "X" ) )  ) || ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_AE" ), "X" ) )  ) )
				{
					this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" ) )  );
				}
				else
				{
					this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
					if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "S" ) )
					{
						if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 3 ), "PAN" ) ) || ( ! Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "AE-C" ) ) )
						{
							this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) ) * 4.3 );
						}
						else if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) )
						{
							this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) * 4.3 );
						}
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "B" ) )
					{
						this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) ) * 2.15 );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "FLG_FRECUENCIA" ), "Q" ) )
					{
						this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) ) * 2.0 );
					}
					else
					{
						this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) ) * 1.0 );
					}
					this.dm.setField ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO", TruncService.trunc ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
				}
				if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "RNBE" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  )
				{
					if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "PTRA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "JTPA" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BILV" ) ) )
					{
						SALARIO = MathService.plus ( SALARIO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SEGS" )  )
					{
						SEG_SOC = MathService.plus ( SEG_SOC, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
						SEG_SOC_BRUTO = MathService.plus ( SEG_SOC_BRUTO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" )   ||  Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "MARI" )   ||  Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ACUA" )  )
					{
						SALARIO = MathService.plus ( SALARIO, ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
						INGRESO_BRUTO = MathService.plus ( INGRESO_BRUTO, ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
						AGRB_TOT = MathService.plus ( AGRB_TOT, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
						AGRB_FLG = 1;
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETI") || (Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "OTPE"))  ||( Compare.equals ( this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETP" )) || ( Compare.equals(this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "RETM" )) || ( Compare.equals( this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "RETF" )) || ( Compare.equals(this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "VETE")))
					{
						RETIRO = MathService.plus ( RETIRO, ( this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" ) )  );
					}
					else
					{
						OTROS = MathService.plus ( OTROS, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "SALA" ) )
					{
						SALA = MathService.plus ( SALA, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ADIE" ) )
					{
						ADIE = MathService.plus ( ADIE, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "NPRO" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRN" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAC" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "BIAS" ) )  )
					{
						NPRO = MathService.plus ( NPRO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( ( Compare.equals  ( this.dm.getFieldString ( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETI" ) ) || (Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "OTPE")) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETM" ) ))
					{
						RETI = MathService.plus ( RETI, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if (  ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "RETF" ) ) || ( Compare.equals(this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "VETE")) )
					{
						RETF = MathService.plus ( RETF, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					else if ( Compare.equals ( this.dm.getFieldString ( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "RETP" ) )
					{
						RETP = MathService.plus ( RETP, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}

					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "AGRB" )   && ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "MARI" )   && ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO" ), "ACUA" )  )
					{
						INGRESO_BRUTO = MathService.plus ( INGRESO_BRUTO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
					}
					STATUS2_CODE  = this.dm.reset ( OPEN2_ID );
					this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );

					STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
					STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

					STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );
					if ( Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ), NULL_DATE ) )
					{
						EDAD_IND = 0;
					}
					else
					{
						EDAD_IND = DateUtil.monthsBetween ( TruncService.lastDay ( FCH_DETERMINA ) , this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
					}
					if  ( ( Compare.lt ( EDAD_IND, 60 ) ) &&
							( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )
							&& ( ! Compare.equals(this.dm.getFieldString( this.dm.get( "INGRESOS_NUCLEO_DSD" ), "COD_TIPO_INGRESO"), "SEGS"))
							&& ( Compare.equals ( CONY_FLG, 1 ) )
							&& (( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ))
									||  ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) )))
					{
						//***** Start mods by L. Leduc / JOR - 5/4/2010 *****
						INGRESO_CONY = MathService.plus ( INGRESO_CONY, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
						//INGRESO_CONY = MathService.plus ( INGRESO_CONY, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_REHABILITACION" )  );
						//***** End mods by L. Leduc / JOR - 5/4/2010 *****
					}
					INGRESOS_NUCLEO = MathService.plus ( INGRESOS_NUCLEO, this.dm.getFieldDouble ( this.dm.get ( "INGRESOS_NUCLEO_DSD" ), "VLR_CANTIDAD_INGRESO" )  );
				}
			}
			STATUS_CODE  = this.dm.nextRow ( OPEN5_ID );

		}
		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PAN" ) )
		{
			if ( ( Compare.equals ( AGRB_FLG, 1 ) ) && ( Compare.ge ( AGRB_TOT, GASTOS_AGRICULTURA ) )  )
			{
				INGRESO_BRUTO = MathService.minus ( INGRESO_BRUTO, GASTOS_AGRICULTURA  );
				SALARIO = MathService.minus ( SALARIO, GASTOS_AGRICULTURA  );
				AGRB_TOT = 0;
				AGRB_FLG = 0;
			}
			else
			{
				INGRESO_BRUTO = MathService.minus ( INGRESO_BRUTO, AGRB_TOT  );
				SALARIO = MathService.minus ( SALARIO, AGRB_TOT  );
				AGRB_TOT = 0;
				AGRB_FLG = 0;
			}
		}
		else
		{
			AGRB_TOT = 0;
			AGRB_FLG = 0;
		}
		if ( Compare.gt ( NPRO, 0 ) )
		{
			GASTOS_INHERENTES = 0;
			GASTOS_INHE = 0;

			STATUS_CODE  = this.dm.reset ( OPEN6_ID );

			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
			this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
			STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

			STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

			while ( Compare.equals ( STATUS_CODE, 0 )  )
			{
				if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "PROA" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "PROC" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ALBE" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ESTU" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "ANCI" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "MEDI" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "CUID" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), "OTRO" ) )  
						&& ( ! Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), 0, 3 ), "CMN" ) )  
						&& ( ! Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE" ), 0, 3 ), "CMY" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )  // na
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  )
				{
					GASTOS_INHERENTES = MathService.plus ( GASTOS_INHERENTES, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" )  );
				}

				STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

			}
			GASTOS_INHERENTES = TruncService.trunc ( GASTOS_INHERENTES ) ;
			if ( Compare.ge ( SALARIO, GASTOS_INHERENTES ) )
			{
				SALARIO = MathService.minus ( SALARIO, GASTOS_INHERENTES  );
			}
			else
			{
				SALARIO = 0;
			}
			if ( Compare.ge ( INGRESO_BRUTO, GASTOS_INHERENTES ) )
			{
				INGRESO_BRUTO = MathService.minus ( INGRESO_BRUTO, GASTOS_INHERENTES  );
			}
			else
			{
				INGRESO_BRUTO = 0;
			}
		}

		RECURSOS_BRUTO = RECURSOS_LIQUIDOS;
		if ( Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "E" ) ) 
			{
				this.condition_17 = true;
			}
			else
			{
				this.condition_17 = false; 		
			}
			if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "R" ) ) 
			{
				this.condition_18 = true;
			}
			else
			{
				this.condition_18 = false; 		
			}	
		}
		else
		{
			this.condition_17 = false; 		
			this.condition_18 = true; 		
		}
		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" )   || this.condition_17 )
		{
			if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-MAR-2007" ) ) )
			{
				INGRESO_BRUTO = 0;
				RECURSOS_BRUTO = 0;
			}
		}
		else
		{
			if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "13-MAR-2007" ) ) )
			{
				INGRESO_BRUTO = 0;
				RECURSOS_BRUTO = 0;
			}
		}
		BENEFICIO_TEMP = 0;
		INGRESO_TEMP = 0;

		STATUS_CODE  = this.dm.reset ( OPEN4_ID );

		this.dm.setField ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "NUM_MIEMBROS_UNIDAD_FAM", UNIDAD );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN4_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN4_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN4_ID );

		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" )   || this.condition_17 )
		{
			if ( ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-MAR-2007" ) ) ) && ( Compare.lt (  FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-ABR-2007" ) ) )  )
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , TruncService.lastDay ( FCH_DETERMINA )  ) )   )
				{
					BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					Debug.println ( Debug.TRACE, "BENEFICIO is set in line 3730" );

					INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_INGRESO_BRUTO" );

					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
			else
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( MathService.plus ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , 1  ), FCH_DETERMINA) )   )
				{
					BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					Debug.println ( Debug.TRACE, "BENEFICIO is set in line 3741" );

					INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_INGRESO_BRUTO" );

					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
		}
		else
		{
			while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ),FCH_DETERMINA ) )   )
			{
				BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
				BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
				INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_INGRESO_BRUTO" );
				//double netto = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_INGRESO_NETO" );
				//if ( INGRESO_TEMP < netto ) INGRESO_TEMP = netto;
				STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );
			}
		}


		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) || this.condition_17  )
		{
			this._condition3 = true;
		}
		else
		{
			this._condition3 = false;
		}

		if ( this._condition3 )
		{
			DIA_SOLIC_LV = FormattingFactory.parseStringToDouble ( StringService.toStringValue  ( FCH_DETERMINA ,"dd" ,StringService.Language.SPANISH ) );
			if ( Compare.equals (  this.app.COD_SERV_GBL, "PANED"  ))
			{
				if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 15 ) )  )
				{
					BENEFICIO_PRORRATEADO = MathService.plus ( BENEFICIO_TEMP, ( BONO_ANCIANO * ANCIANO_COUNT )  );
				}
				else if ( ( Compare.ge ( DIA_SOLIC_LV, 16 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
				{
					BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.50 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
				}
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 10 ) )  )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( BENEFICIO_TEMP, ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 11 ) ) && ( Compare.le ( DIA_SOLIC_LV, 20 ) )   )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.66 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 21 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.34 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			if ( Compare.gt ( ( MathService.plus ( INGRESO_BRUTO, RECURSOS_BRUTO  ) ), BENEFICIO_PRORRATEADO ) )
			{
				this._condition4 = true;
			}
			else
			{
				this._condition4 = false;
			}
			if ( this._condition4 )
			{
				INELEGIBLE_EMER = "*";
				RAZON = "FAMILIA EXCEDE MAXIMO INGRESO BRUTO";
				STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );


				BENEFICIO = 0;
				SERVICIO_BENEFICIO = 0;
				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{           
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					INGRESO_BRUTO = 0;
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					DETERMINACION_PKT.exec ( this.app );
					this.doReturn ( );      
				}    
				else
				{
					if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
					{
						SERVICIO_STATUS = "CERRAD04";
					}
					else
					{
						SERVICIO_STATUS = "RECHAZ13";
					}
					DETERMINACION_PKT.exec ( this.app );      	
				}

				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step10 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition4 )    //      if ( Compare.gt ( ( MathService.plus ( INGRESO_BRUTO, RECURSOS_BRUTO  ) ), BENEFICIO_PRORRATEADO ) )
			{

				DETERMINACION_FINAL_MENU.exec ( this.app );
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step11 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition4 )    //      if ( Compare.gt ( ( MathService.plus ( INGRESO_BRUTO, RECURSOS_BRUTO  ) ), BENEFICIO_PRORRATEADO ) )
			{
				if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
				{
					this.doReturn ( );
					return;
				}
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{        	  
					DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
				}
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step12 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition4 )    //      if ( Compare.gt ( ( MathService.plus ( INGRESO_BRUTO, RECURSOS_BRUTO  ) ), BENEFICIO_PRORRATEADO ) )
			{
				this.callParms.clear ( );
				this.callParms.set ( this.app.SS_JEFE_GBL  );
				this.callParms.set ( this.app.SS_SERV_GBL  );
				this.callParms.set ( this.app.COD_SERV_GBL  );
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{	  
					INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
				}    
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step13 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition4 )    //      if ( Compare.gt ( ( MathService.plus ( INGRESO_BRUTO, RECURSOS_BRUTO  ) ), BENEFICIO_PRORRATEADO ) )
			{
				this.callParms.reset ( );
				this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
				this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
				this.app.COD_SERV_GBL  = this.callParms.getString ( );

				INGRESO_BRUTO = 0;
				this.doReturn ( );
				return;
			}
		}
		else
		{
			if ( Compare.gt ( INGRESO_BRUTO, ( INGRESO_TEMP ) ) )
			{
				this._condition5 = true;
			}
			else
			{
				this._condition5 = false;
			}
			if ( this._condition5 )
			{
				if ( ( Compare.equals ( ANCIANO, 0 ) ) && ( Compare.equals ( INCA_FLG, 0 ) )  )
				{
					this._condition6 = true;
				}
				else
				{
					this._condition6 = false;
				}
				if ( this._condition6 )
				{
					INELEGIBLE_REG = "*";
					RAZON = "FAMILIA EXCEDE MAXIMO INGRESO BRUTO";
					STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

					STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );


					BENEFICIO = 0;
					SERVICIO_BENEFICIO = 0;
					if (Compare.equals(this.app.RUTINA_GBL, "RR"))
					{           
						this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
						INGRESO_BRUTO = 0;
						this.app.COD_SERV_GBL = OLD_COD_SERV;
						DETERMINACION_PKT.exec ( this.app );
						this.doReturn ( );      
					}    
					else
					{
						if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
						{
							SERVICIO_STATUS = "CERRAD04";
						}
						else
						{
							SERVICIO_STATUS = "RECHAZ13";
						}
						DETERMINACION_PKT.exec ( this.app );      	
					}
					return;
				}
			}
		}

	}


	/**
	 *
	 */
	protected void step14 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
		}
		else
		{
			if ( this._condition5 )    //      if ( Compare.gt ( INGRESO_BRUTO, ( INGRESO_TEMP ) ) )
			{
				if ( this._condition6 )    //        if ( ( Compare.equals ( ANCIANO, 0 ) ) && ( Compare.equals ( INCA_FLG, 0 ) )  )
				{

					DETERMINACION_FINAL_MENU.exec ( this.app );

					return;
				}
			}
		}

	}


	/**
	 *
	 */
	protected void step15 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
		}
		else
		{
			if ( this._condition5 )    //      if ( Compare.gt ( INGRESO_BRUTO, ( INGRESO_TEMP ) ) )
			{
				if ( this._condition6 )    //        if ( ( Compare.equals ( ANCIANO, 0 ) ) && ( Compare.equals ( INCA_FLG, 0 ) )  )
				{
					if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
					{
						this.doReturn ( );
						return;
					}
					if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
					{	  
						DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
					}
					return;
				}
			}
		}

	}


	/**
	 *
	 */
	protected void step16 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
		}
		else
		{
			if ( this._condition5 )    //      if ( Compare.gt ( INGRESO_BRUTO, ( INGRESO_TEMP ) ) )
			{
				if ( this._condition6 )    //        if ( ( Compare.equals ( ANCIANO, 0 ) ) && ( Compare.equals ( INCA_FLG, 0 ) )  )
				{
					this.callParms.clear ( );
					this.callParms.set ( this.app.SS_JEFE_GBL  );
					this.callParms.set ( this.app.SS_SERV_GBL  );
					this.callParms.set ( this.app.COD_SERV_GBL  );
					if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
					{	  
						INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
					}
					return;
				}
			}
		}

	}


	/**
	 *
	 */
	protected void step17 ( ParameterSet ps )
	{
		if ( this._condition3 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
		}
		else
		{
			if ( this._condition5 )    //      if ( Compare.gt ( INGRESO_BRUTO, ( INGRESO_TEMP ) ) )
			{
				if ( this._condition6 )    //        if ( ( Compare.equals ( ANCIANO, 0 ) ) && ( Compare.equals ( INCA_FLG, 0 ) )  )
				{
					this.callParms.reset ( );
					this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
					this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
					this.app.COD_SERV_GBL  = this.callParms.getString ( );

					INGRESO_BRUTO = 0;
					this.doReturn ( );
					return;
				}
				else
				{
					ELEG_BRUTO_FLG = 0;
				}
			}
			else
			{
				ELEG_BRUTO_FLG = 1;
			}
		}
		DEDUCCION_INGRESO = 0;
		SAL_NET = 0;

		// Apply Exencion Salary

		if ( ! Compare.equals ( SALARIO, 0 ) )
		{
			DEDUCCION_INGRESO = TruncService.trunc ( ( SALARIO ) * EXENCION_SALARIO ) ;
			if ( Compare.gt ( DEDUCCION_INGRESO, EXENCION_SAL_MAYOR ) )
			{
				DEDUC_SAL = EXENCION_SAL_MAYOR;
				if ( Compare.gt ( ( SALARIO ), EXENCION_SAL_MAYOR ) )
				{
					SAL_NET = MathService.minus ( ( SALARIO ), EXENCION_SAL_MAYOR  );
					INGRESO_NETO = MathService.minus ( ( SALARIO ), EXENCION_SAL_MAYOR  );
				}
				else
				{
					SAL_NET = 0;
					INGRESO_NETO = 0;
				}
			}
			else if ( Compare.lt ( DEDUCCION_INGRESO, EXENCION_SAL_MENOR )  )
			{
				DEDUC_SAL = EXENCION_SAL_MENOR;
				if ( Compare.gt ( ( SALARIO ), EXENCION_SAL_MENOR ) )
				{
					SAL_NET = MathService.minus ( ( SALARIO ), EXENCION_SAL_MENOR  );
					INGRESO_NETO = MathService.minus ( ( SALARIO ), EXENCION_SAL_MENOR  );
				}
				else
				{
					SAL_NET = 0;
					INGRESO_NETO = 0;
				}
			}
			else
			{
				DEDUC_SAL = DEDUCCION_INGRESO;
				if ( Compare.gt ( ( SALARIO ), DEDUCCION_INGRESO ) )
				{
					SAL_NET = MathService.minus ( ( SALARIO ), DEDUCCION_INGRESO  );
					ING_MENOS_40 = MathService.minus ( ( SALARIO ), DEDUCCION_INGRESO  );
					INGRESO_NETO = MathService.minus ( ( SALARIO ), DEDUCCION_INGRESO  );
				}
				else
				{
					SAL_NET = 0;
					ING_MENOS_40 = 0;
					INGRESO_NETO = 0;
				}
			}
		}
		if ( Compare.ge (FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-MAR-2007" ) ) )
		{
			//***** START MODS BY J. OLMEDA (KPG INC) 7/17/2009 *****
			//OTROS = MathService.plus ( OTROS, TruncService.round(RECURSOS_LIQUIDOS,2)  );
			//OTROS = MathService.plus ( OTROS, TruncService.round(RECURSOS_LIQUIDOS)  );
			OTROS = MathService.plus ( OTROS, TruncService.trunc(RECURSOS_LIQUIDOS)  );
			//***** END MODS BY J. OLMEDA (KPG INC) 7/17/2009 *****
		}
		// Move source code for Ammend PAN # 3 oct-2008
		//  ING_MENOS_40 = MathService.plus ( MathService.plus ( SAL_NET, SEG_SOC  ), OTROS  );
		//  if ( Compare.lt ( ING_MENOS_40, 0 ) )
		//  {
		//    ING_MENOS_40 = 0;
		//  }
		ANCIANO_COUNT = 0;
		INCAPACITADO_COUNT = 0;
		MENOR_COUNT = 0;
		DEAMBULANTE_COUNT = 0;
		CONY_COUNT = 0;
		GASTOS = 0;
		DEDUC_60 = 0;
		DEDUC_INCA = 0;

		// Change of Amendment # 3 PAN oct-2008

		if ( ( Compare.equals ( ANCIANO, 1 ) ) || ( Compare.equals ( INCA_FLG, 1 ) ) || ( Compare.equals ( MENOR_FLG, 1 ) ) )
		{
			STATUS_CODE  = this.dm.reset ( OPEN_ID );
			GASTOS_FLG = 0;

			this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
			this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
			this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
			this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
			STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

			STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

			this.app.SS_IND_GBL = this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );
			while ( Compare.equals ( STATUS_CODE, 0 ) )
			{
				STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

				this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_IND_GBL );
				this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

				STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
				STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

				STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

				if ( Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ), NULL_DATE ) )
				{
					EDAD_IND = 0;
				}
				else
				{
					EDAD_IND = DateUtil.monthsBetween ( TruncService.lastDay ( FCH_DETERMINA ) , this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
				}
				// Mod by JOR 2/24/2010
				//if ( ( Compare.ge ( EDAD_IND, 60 ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "N" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  )
				if ( ( Compare.ge ( EDAD_IND, 60 ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "N" ) )   && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  )
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );

					// Mod by JOR 2/24/2010
					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&& (!( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
							)
					{
						ANCIANO_COUNT = MathService.plus ( ANCIANO_COUNT, 1  );
						DEDUC_60 = MathService.plus ( DEDUC_60, 100  );
						// START MODS By J. Olmeda -- 6/9/2011
						if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DEAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DECO" ) ) )  )
						{
							DEAMBULANTE_COUNT = MathService.plus ( DEAMBULANTE_COUNT, 1  );
						}
						// END MODS By J. Olmeda -- 6/9/2011
					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
					// end mod. by JOR 2/24/2010
				}
				// Mod by JOR 2/24/2010
				//else if ( ( Compare.ge ( EDAD_IND, 60 ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )   )
				else if ( ( Compare.ge ( EDAD_IND, 60 ) ) 
						&& ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )   )// na
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );

					// Mod by JOR 2/24/2010
					if (  ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&(  ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						ANCIANO_COUNT = MathService.plus ( ANCIANO_COUNT, 1  );
						DEDUC_60 = MathService.plus ( DEDUC_60, 100  );
						// START MODS By J. Olmeda -- 6/9/2011
						if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DEAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DECO" ) ) )  )
						{
							DEAMBULANTE_COUNT = MathService.plus ( DEAMBULANTE_COUNT, 1  );
						}
						// END MODS By J. Olmeda -- 6/9/2011
					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
					// end mod. by JOR 2/24/2010
				}
				// Mod by JOR 2/24/2010
				//else if ( ( Compare.lt ( EDAD_IND, 60 ) ) && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )   )
				else if ( ( Compare.lt ( EDAD_IND, 60 ) ) 
						&& ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )   )// na
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );

					// Mod by JOR 2/24/2010
					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						INCAPACITADO_COUNT = MathService.plus ( INCAPACITADO_COUNT, 1  );
						DEDUC_INCA = MathService.plus ( DEDUC_INCA, 100  );
						// START MODS By J. Olmeda -- 6/9/2011
						if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DEAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DECO" ) ) )  )
						{
							DEAMBULANTE_COUNT = MathService.plus ( DEAMBULANTE_COUNT, 1  );
						}
						// END MODS By J. Olmeda -- 6/9/2011
					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
					// end mod. by JOR 2/24/2010
				} else         				if  (( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CANC" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "SIDA" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CARD" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CORE" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "TBAC" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "ESCL" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "ENEU" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "PARK" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "DIMU" ) 
						|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "HEPC" ) 
						)  &&  ( Compare.lt ( EDAD_IND, 60 ) )  &&  ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) ))
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );

					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						//              INCAPACITADO_COUNT = MathService.plus ( INCAPACITADO_COUNT, 1  );
						DEDUC_INCA = MathService.plus ( DEDUC_INCA, 100  );

						if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DEAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DECO" ) ) )  )
						{
							DEAMBULANTE_COUNT = MathService.plus ( DEAMBULANTE_COUNT, 1  );
						}
					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
				}
				// Change of Amendment # 3 PAN oct-2008
				// Mod by JOR 2/24/2010
				//else if ( ( Compare.lt ( EDAD_IND, 60 ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  &&  ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" ) ||Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) ) && ( Compare.equals ( CONY_FLG, 1 ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) ) )
				else if ( ( Compare.lt ( EDAD_IND, 60 ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  
						&&  ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "CONY" )
								||Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PARENTESCO_FAM" ), "JEFE" ) 
								) 
								&& ( Compare.equals ( CONY_FLG, 1 ) )  
								&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) ) 
								&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) // na
						)
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );
					// Mod by JOR 2/24/2010
					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&  ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						CONY_COUNT = 1;
					}
					else
					{

						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
					// end mod. by JOR 2/24/2010
				}

				// START MODS By J. Olmeda -- 6/9/2011
				else if ( ( Compare.ge ( EDAD_IND, 18 ) ) && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DEAS" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_PROBLEMA" ), "DECO" ) ) )  )
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );
					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						DEAMBULANTE_COUNT = MathService.plus ( DEAMBULANTE_COUNT, 1  );
					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
				}
				// END MODS By J. Olmeda -- 6/9/2011

				// Mod by JOR 2/24/2010
				//else if ( ( Compare.lt ( EDAD_IND, 18 ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )   )
				else if ( ( Compare.lt ( EDAD_IND, 18 ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) ) 
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )
						&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )   )// na
				{
					SAVE_SSN = this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE" );
					// Mod by JOR 2/24/2010
					if ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) 
							&&( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ))// na
					{
						MENOR_COUNT = MathService.plus ( MENOR_COUNT, 1  );

						//Determine minors less than 2 years old and greater than 2 years old.
						/*  if ( Compare.lt(EDAD_IND, 2) )
              {
            	  MENOR_MENOR2YEARS = MathService.plus(MENOR_MENOR2YEARS, 1);
              }
              else if ( Compare.ge( EDAD_IND, 2) ) 
              {
            	  MENOR_MAYOR2YEARS = MathService.plus(MENOR_MAYOR2YEARS, 1);
              }  */

					}
					else
					{
						NCAL_COUNT =MathService.plus ( NCAL_COUNT, 1  );
					}
					// end mod. by JOR 2/24/2010
				}

				STATUS_CODE  = this.dm.reset ( OPEN6_ID );

				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.SS_IND_GBL );
				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "MEDI" );
				this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

				STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
				STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

				STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

				if ( Compare.equals ( STATUS_CODE, 0 ) )
				{
					if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) ) 
							&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) ) 
							&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) // na
							&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) )  
							&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  
							)
					{
						if ( Compare.ge ( EDAD_IND, 60 ) )
						{
							GASTOS = MathService.plus ( GASTOS, 1  );
							DEDUC_60 = MathService.plus ( DEDUC_60, 100  );
						}
						else
						{
							if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FLG_INCAPACIDAD_VERIFICADA" ), "S" ) ) 
									&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) ) 
									&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) ) // na
									&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
									)
							{
								GASTOS = MathService.plus ( GASTOS, 1  );
								DEDUC_INCA = MathService.plus ( DEDUC_INCA, 100  );
							}
							else 
							{
								//Mod. Marcos Acevedo KPG Inc. 1/17/2014
								//Verify for terminal illness and apply the proper deductions.
								if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CANC" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "SIDA" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CARD" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "CORE" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "TBAC" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "ESCL" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "ENEU" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "PARK" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "DIMU" ) 
										|| Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_PRIMARIA" ), "HEPC" ) 
										)
								{
									//TODO COMMENTED CODE FOR REVIEW BY SR. WILMER LEBRON
									//GASTOS = MathService.plus ( GASTOS, 1  );
									//DEDUC_INCA = MathService.plus ( DEDUC_INCA, 100  );    
								}
							}
						}
					}
				}

				STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

				this.app.SS_IND_GBL = this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );
			}
		}

		/// Changes Amendment # 3 PAN oct-2008
		EXENCION_RETP_MAX = 200;
		EXENCION_RETI = 0.50;
		EXENCION_RETF = 0.50;
		EXENCION_SEG_SOC = 0.50;
		EXENCION_RETP = 0.50;

		if ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" )  &&  this.condition_18) 
		{

			if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "21-SEP-2008" ) ) )
			{

				//     if ((Compare.ge(MathService.plus(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), CONY_COUNT), UNIDAD)) && (Compare.lt(MENOR_COUNT, UNIDAD)) && (Compare.equals (OTROS,0) )  && (Compare.equals (INGRESO_CONY,0)) && (Compare.equals(SALARIO,0) || Compare.equals(RETIRO,0) || Compare.equals(SEG_SOC,0) ) )
				// Modificacion segun revision del 15 de enero de 2009 permite lkas tres fuentes de ingresos

				//*****
				//if ((Compare.ge(MathService.plus(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), CONY_COUNT), UNIDAD)) && (Compare.lt(MENOR_COUNT, UNIDAD)) && (Compare.equals (OTROS,0) )  && (Compare.equals (INGRESO_CONY,0)) )
				//Mod by JOR 2/24/2010
				//if ((Compare.ge(MathService.plus(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), CONY_COUNT), UNIDAD_NCAL)) && (Compare.lt(MENOR_COUNT, UNIDAD_NCAL)) && (Compare.equals (OTROS,0) )  && (Compare.equals (INGRESO_CONY,0)) )
				//Mod by JOR an LLM 5/4/2010
				if ((Compare.ge(MathService.plus(MathService.plus(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), CONY_COUNT), NCAL_COUNT),UNIDAD_NCAL ))
						&& (Compare.lt(MENOR_COUNT, UNIDAD_NCAL))
						&& (Compare.equals (OTROS,0) )  
						&& (Compare.equals (INGRESO_CONY,0)) )
					//*****
				{

					if ((Compare.gt(SEG_SOC,0)) && (Compare.le(RETIRO,EXENCION_RETP_MAX)))
					{
						SEG_SOC =  TruncService.round(SEG_SOC*EXENCION_SEG_SOC,2);
					}
					if ( ( Compare.equals (RETI,0) || Compare.equals (RETF,0)|| Compare.equals (RETP,0))&& (Compare.equals(SEG_SOC,0)) && (Compare.equals(SALARIO,0)) )
					{
						if ((Compare.ge(RETI,RETF)) && (Compare.le(RETP+RETF,EXENCION_RETP_MAX)))
						{
							RETI =  TruncService.round(RETI*EXENCION_RETI,2);
						}
						else if ((Compare.gt(RETF,RETI)) && (Compare.le(RETP+RETI,EXENCION_RETP_MAX)))
						{
							RETF =  TruncService.round(RETF*EXENCION_RETI,2);
						}
					}
					else if ( ( Compare.equals (RETI,RETIRO) || Compare.equals (RETF,RETIRO)|| Compare.equals (RETP,RETIRO))&& (Compare.equals(SEG_SOC,0)))
					{
						if ((Compare.gt(RETI,0)) && (Compare.le(RETP,EXENCION_RETP_MAX)))
						{
							RETI =  TruncService.round(RETI*EXENCION_RETI,2);
						}
						else if ((Compare.gt(RETF,0)) && (Compare.le(RETP,EXENCION_RETP_MAX)))
						{
							RETF =  TruncService.round(RETF*EXENCION_RETF,2);
						}
					}
				}
			}
			else if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-OCT-2007" ) ) )
			{
				//*****
				//if (Compare.ge(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), UNIDAD) && (Compare.lt(MENOR_COUNT, UNIDAD)) && (Compare.equals (INGRESOS_NUCLEO,SEG_SOC) )   )
				if (Compare.ge(MathService.plus(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), MENOR_COUNT), UNIDAD_NCAL)
						&& (Compare.lt(MENOR_COUNT, UNIDAD_NCAL)) 
						&& (Compare.equals (INGRESOS_NUCLEO,SEG_SOC) )   )
					//*****
				{
					SEG_SOC =  TruncService.round(SEG_SOC*EXENCION_SEG_SOC,2);
				}
			}
			else if ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-OCT-2004" ) ) )
			{
				//*****
				//if (Compare.ge(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), UNIDAD) &&(Compare.equals (INGRESOS_NUCLEO,SEG_SOC) )   )
				if (Compare.ge(MathService.plus(ANCIANO_COUNT, INCAPACITADO_COUNT), UNIDAD_NCAL) &&(Compare.equals (INGRESOS_NUCLEO,SEG_SOC) )   )
					//*****
				{
					SEG_SOC =  TruncService.round(SEG_SOC*EXENCION_SEG_SOC,2);
				}
			}
		}
		OTROS = MathService.plus(MathService.plus(MathService.plus(RETI, RETP), RETF), OTROS);

		// Changes Amendment # 3 PAN oct-2008
		ING_MENOS_40 = MathService.plus ( MathService.plus ( SAL_NET, SEG_SOC  ), OTROS  );
		if ( Compare.lt ( ING_MENOS_40, 0 ) )
		{
			ING_MENOS_40 = 0;
		}

		if ( Compare.ge ( ING_MENOS_40, DEDUC_60 ) )
		{
			TOTAL_60 = MathService.minus ( ING_MENOS_40, DEDUC_60  );
		}
		else
		{
			TOTAL_60 = 0;
		}
		if ( Compare.ge ( TOTAL_60, DEDUC_INCA ) )
		{
			TOTAL_INCA = MathService.minus ( TOTAL_60, DEDUC_INCA  );
		}
		else
		{
			TOTAL_INCA = 0;
		}
		INGRESO_NETO = MathService.minus ( INGRESO_NETO, ( ANCIANO_COUNT * 100 )  );
		INGRESO_NETO = MathService.minus ( INGRESO_NETO, ( INCAPACITADO_COUNT * 100 )  );
		INGRESO_NETO = MathService.minus ( INGRESO_NETO, ( GASTOS * 100 )  );
		GASTOS_MEDICOS = GASTOS * 100;
		if ( Compare.lt ( INGRESO_NETO, 0 ) )
		{
			INGRESO_NETO = 0;
		}
		ESTUDIANTE_COUNT = 0;

		STATUS_CODE  = this.dm.reset ( OPEN_ID );

		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

		while ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			this.app.SS_IND_GBL = this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" );

			STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_IND_GBL );
			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
			STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

			STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );

			if ( Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ), NULL_DATE ) )
			{
				this.app.setError ( 4, 4526 );
				EDAD_IND = 0;
			}
			else
			{
				EDAD_IND = DateUtil.monthsBetween ( FCH_DETERMINA, this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
			}
			if ( ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EP1C" ) )
					|| ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EP2C" ) ) 
					|| ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EP3C" ) )
					|| ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EP4C" ) )
					|| ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EP5C" ) )
					|| ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_ESCOLARIDAD" ), "EETV" ) ) )
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) )
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )// na  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEO_SERVICIO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) )  )
			{
				ESTUDIANTE_COUNT = MathService.plus ( ESTUDIANTE_COUNT, 1  );
			}

			STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

		}
		if ( Compare.ge ( TOTAL_INCA, ( ESTUDIANTE_COUNT * 100 ) ) )
		{
			TOTAL_EST = MathService.minus ( TOTAL_INCA, ( ESTUDIANTE_COUNT * 100 )  );
		}
		else
		{
			TOTAL_EST = 0;
		}
		DEDUC_EST = ( ESTUDIANTE_COUNT * 100 );
		INGRESO_NETO = MathService.minus ( INGRESO_NETO, ( ESTUDIANTE_COUNT * 100 )  );
		if ( Compare.lt ( INGRESO_NETO, 0 ) )
		{
			INGRESO_NETO = 0;
		}
		DEDUC_FIJA = 0;
		if ( ( Compare.equals ( SALARIO, 0 ) ) && ( Compare.equals ( ANCIANO, 0 ) )  && ( Compare.equals ( INCA_FLG, 0 ) )  )
		{
			if ( ( Compare.gt ( SEG_SOC, 0 ) ) || ( Compare.gt ( OTROS, 0 ) ) )
			{
				DEDUC_FIJA = 100;
				if ( Compare.gt ( TOTAL_EST, 100 ) )
				{
					TOTAL_OTRO = MathService.minus ( TOTAL_EST, 100  );
				}
				else
				{
					TOTAL_OTRO = 0;
				}
				INGRESO_NETO = MathService.minus ( INGRESO_NETO, 100  );
				if ( Compare.lt ( INGRESO_NETO, 0 ) )
				{
					INGRESO_NETO = 0;
				}
			}
		}
		else
		{
			TOTAL_OTRO = TOTAL_EST;
		}
		CUIDO_MENOR = 0;

		STATUS_CODE  = this.dm.reset ( OPEN6_ID );

		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_TIPO_DEDUCCIONE", "CUID" ); 
		this.dm.setField ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN6_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN6_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN6_ID );

		while ( Compare.equals ( STATUS_CODE, 0 )  )
			//if ( Compare.equals ( STATUS_CODE, 0 )  )
		{
			STATUS2_CODE  = this.dm.reset ( OPEN2_ID );

			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
			this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

			STATUS2_CODE  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
			STATUS2_CODE  = this.dm.retrieve ( OPEN2_ID );

			STATUS2_CODE  = this.dm.firstRow ( OPEN2_ID );
			//ll cuido
			if ( Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ), NULL_DATE ) )
			{
				EDAD_IND = 0;
			}
			else
			{
				EDAD_IND = DateUtil.monthsBetween ( TruncService.lastDay ( FCH_DETERMINA ) , this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12;
			}

			if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "AUTE" ) )  
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NA" ) )// na
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "ACNE" ) ) 
					&& ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) ) 
					&& ( Compare.lt ( DateUtil.monthsBetween ( FCH_DETERMINA, this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "FCH_NACIMIENTO" ) ) / 12, 60 ) )  )
			{
				if(Compare.lt( EDAD_IND, 18) )
				{
					CUIDO_MENOR = MathService.plus(CUIDO_MENOR, this.dm.getFieldDouble ( this.dm.get ( "GASTOS_NUCLEO_DSD" ), "VLR_CANTIDAD_DEDUCCIONE" ));
				}
				// ll cuido

				if ( Compare.lt(EDAD_IND, 2) )
				{
					MENOR_MENOR2YEARS = MathService.plus(MENOR_MENOR2YEARS, 1);
				}
				else if ( Compare.ge( EDAD_IND, 2)  && Compare.lt( EDAD_IND, 18) ) 
				{
					MENOR_MAYOR2YEARS = MathService.plus(MENOR_MAYOR2YEARS, 1);
				}

			}


			STATUS_CODE  = this.dm.nextRow ( OPEN6_ID );

		}
		if ( Compare.gt (CUIDO_MENOR,(MENOR_MAYOR2YEARS*175)+(MENOR_MENOR2YEARS*200) ) )
		{
			CUIDO_MENOR = (MENOR_MAYOR2YEARS*175)+(MENOR_MENOR2YEARS*200);
		}

		CUIDO = TruncService.trunc ( CUIDO_MENOR ) ;
		if ( Compare.ge ( TOTAL_OTRO, CUIDO ) )
		{
			TOTAL_CUIDO = MathService.minus ( TOTAL_OTRO, CUIDO  );
		}
		else
		{
			TOTAL_CUIDO = 0;
		}
		if ( Compare.lt ( TOTAL_CUIDO, 0 ) )
		{
			INGRESO_NETO = 0;
		}
		else
		{
			INGRESO_NETO = TOTAL_CUIDO;
		}
		if ( Compare.ge ( INGRESO_NETO, STANDARD ) )
		{
			INGRESO_NETO = MathService.minus ( INGRESO_NETO, STANDARD  );
		}
		else
		{
			INGRESO_NETO = 0;
		}
		INELEGIBLE_REG = "";
		RAZON = "";
		BENEFICIO_TEMP = 0;
		INGRESO_TEMP = 0;
		STATUS_CODE  = this.dm.reset ( OPEN4_ID );

		this.dm.setField ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "NUM_MIEMBROS_UNIDAD_FAM", UNIDAD );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN4_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN4_ID );

		if ( ! Compare.equals ( STATUS_CODE, 0 ) )
		{
			this.app.setError ( 5, STATUS_CODE );
		}

		STATUS_CODE  = this.dm.firstRow ( OPEN4_ID );

		if ( ! Compare.equals ( STATUS_CODE, 0 ) )
		{
			this.app.setError ( 6, STATUS_CODE );
		}
		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" )  ||  this.condition_17)
		{
			if ( ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-MAR-2007" ) ) ) && ( Compare.lt ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-ABR-2007" ) ) )  )
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , TruncService.lastDay ( FCH_DETERMINA )  ) )   )
				{
					BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					BENEFICIO = ( this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" ) );
					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
			else
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( MathService.plus ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , 1  ), FCH_DETERMINA ) )   )
				{
					BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					BENEFICIO = ( this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" ) );
					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
		}
		else
		{
			while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ), FCH_DETERMINA ) )   )
			{
				BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
				Debug.println ( Debug.TRACE, "BENEFICIO is set in line 4539" );

				BENEFICIO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
				INGRESO_TEMP = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_INGRESO_NETO" );

				STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

			}
		}

		STATUS_CODE  = this.dm.reset ( OPEN4_ID );

		if ( Compare.gt ( INGRESO_NETO, ( INGRESO_TEMP ) ) )
		{
			this._condition7 = true;
		}
		else
		{
			this._condition7 = false;
		}
		if ( this._condition7 )
		{
			if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
			{
				INELEGIBLE_EMER = "*";
			}
			else
			{
				INELEGIBLE_REG = "*";
			}
			RAZON = "FAMILIA EXCEDE EL MAXIMO INGRESO NETO";
			STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

			STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

			AJUSTE_PAN_STATUS  = this.dm.dbClose ( AJUSTE_PAN_ID );


			BENEFICIO = 0;
			SERVICIO_BENEFICIO = 0;

			//
			if (Compare.equals(this.app.RUTINA_GBL, "RR"))
			{
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESO_NETO  );
				INGRESO_NETO = 0;
				this.app.COD_SERV_GBL = OLD_COD_SERV;
				DETERMINACION_PKT.exec ( this.app );
				this.doReturn ( );
			}
			else
			{    	  
				if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
				{
					SERVICIO_STATUS = "CERRAD04";
				}
				else
				{
					SERVICIO_STATUS = "RECHAZ13";
				}
				DETERMINACION_PKT.exec ( this.app );
			}
			return;
		}

	}


	/**
	 *
	 */
	protected void step18 ( ParameterSet ps )
	{
		if ( this._condition7 )    //    if ( Compare.gt ( INGRESO_NETO, ( INGRESO_TEMP ) ) )
		{

			DETERMINACION_FINAL_MENU.exec ( this.app );

			return;
		}

	}


	/**
	 *
	 */
	protected void step19 ( ParameterSet ps )
	{
		if ( this._condition7 )    //    if ( Compare.gt ( INGRESO_NETO, ( INGRESO_TEMP ) ) )
		{
			if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
			{
				this.doReturn ( );
				return;
			}
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{     DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
			return;
			}
		}

	}


	/**
	 *
	 */
	protected void step20 ( ParameterSet ps )
	{
		if ( this._condition7 )    //    if ( Compare.gt ( INGRESO_NETO, ( INGRESO_TEMP ) ) )
		{
			this.callParms.clear ( );
			this.callParms.set ( this.app.SS_JEFE_GBL  );
			this.callParms.set ( this.app.SS_SERV_GBL  );
			this.callParms.set ( this.app.COD_SERV_GBL  );
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{  
				INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );    
			}
			return;
		}

	}


	/**
	 *
	 */
	protected void step21 ( ParameterSet ps )
	{
		if ( this._condition7 )    //    if ( Compare.gt ( INGRESO_NETO, ( INGRESO_TEMP ) ) )
		{
			this.callParms.reset ( );
			this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
			this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
			this.app.COD_SERV_GBL  = this.callParms.getString ( );

			INGRESO_NETO = 0;
			if (Compare.equals(this.app.RUTINA_GBL, "RR"))
			{
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
				this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESO_NETO  );
				this.app.COD_SERV_GBL = OLD_COD_SERV;
			}
			this.doReturn ( );
			return;
		}
		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) || this.condition_17 )
		{
			this._condition8 = true;
		}
		else
		{
			this._condition8 = false;
		}
		if ( this._condition8 )
		{
			DIA_SOLIC_LV = FormattingFactory.parseStringToDouble ( StringService.toStringValue  ( FCH_DETERMINA ,"dd" ,StringService.Language.SPANISH ) );
			if ( Compare.equals (  this.app.COD_SERV_GBL, "PANED"  ))
			{
				if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 15 ) )  )
				{
					BENEFICIO_PRORRATEADO = MathService.plus ( BENEFICIO_TEMP, ( BONO_ANCIANO * ANCIANO_COUNT )  );
				}
				else if ( ( Compare.ge ( DIA_SOLIC_LV, 16 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
				{
					BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.50 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
				}
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 10 ) )  )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( BENEFICIO_TEMP, ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 11 ) ) && ( Compare.le ( DIA_SOLIC_LV, 20 ) )   )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.66 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 21 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
			{
				BENEFICIO_PRORRATEADO = MathService.plus ( TruncService.trunc ( BENEFICIO_TEMP * 0.34 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			if ( Compare.gt ( ( INGRESO_NETO ), BENEFICIO_PRORRATEADO ) )
			{
				this._condition9 = true;
			}
			else
			{
				this._condition9 = false;
			}
			if ( this._condition9 )
			{
				INELEGIBLE_EMER = "*";
				RAZON = "FAMILIA EXCEDE MAXIMO INGRESO NETO";
				STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );


				BENEFICIO = 0;
				SERVICIO_BENEFICIO = 0;

				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESO_NETO  );
					INGRESO_NETO = 0;
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					DETERMINACION_PKT.exec ( this.app );
					this.doReturn ( );
				}
				else
				{    
					if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
					{
						SERVICIO_STATUS = "CERRAD04";
					}
					else
					{
						SERVICIO_STATUS = "RECHAZ13";
					}
					DETERMINACION_PKT.exec ( this.app );
				}
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step22 ( ParameterSet ps )
	{
		if ( this._condition8 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition9 )    //      if ( Compare.gt ( ( INGRESO_NETO ), BENEFICIO_PRORRATEADO ) )
			{

				DETERMINACION_FINAL_MENU.exec ( this.app );

				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step23 ( ParameterSet ps )
	{
		if ( this._condition8 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition9 )    //      if ( Compare.gt ( ( INGRESO_NETO ), BENEFICIO_PRORRATEADO ) )
			{
				if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
				{
					this.doReturn ( );
					return;
				}
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{	  
					DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
				}
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step24 ( ParameterSet ps )
	{
		if ( this._condition8 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition9 )    //      if ( Compare.gt ( ( INGRESO_NETO ), BENEFICIO_PRORRATEADO ) )
			{
				this.callParms.clear ( );
				this.callParms.set ( this.app.SS_JEFE_GBL  );
				this.callParms.set ( this.app.SS_SERV_GBL  );
				this.callParms.set ( this.app.COD_SERV_GBL  );
				if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
				{	  
					INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
				}    
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step25 ( ParameterSet ps )
	{
		if ( this._condition8 )    //    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			if ( this._condition9 )    //      if ( Compare.gt ( ( INGRESO_NETO ), BENEFICIO_PRORRATEADO ) )
			{
				this.callParms.reset ( );
				this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
				this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
				this.app.COD_SERV_GBL  = this.callParms.getString ( );

				INGRESO_NETO = 0;
				this.doReturn ( );
				return;
			}
		}

		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "INGRESOS", INGRESO_NETO  );
		}
		BENEFICIO = 0;

		STATUS_CODE  = this.dm.reset ( OPEN4_ID );

		this.dm.setField ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "NUM_MIEMBROS_UNIDAD_FAM", UNIDAD );

		STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN4_ID );
		STATUS_CODE  = this.dm.retrieve ( OPEN4_ID );

		STATUS_CODE  = this.dm.firstRow ( OPEN4_ID );

		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" )  || condition_17)
		{
			if ( ( Compare.ge ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-MAR-2007" ) ) ) && ( Compare.lt ( FCH_DETERMINA, RallySpanishDatesParser.parseDateString ( "1-ABR-2007" ) ) )  )
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , TruncService.lastDay ( FCH_DETERMINA )  ) )   )
				{
					BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					Debug.println ( Debug.TRACE, "BENEFICIO is set in line 4834" );
					BENEFICIO_TEMP = ( this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" ) );
					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
			else
			{
				while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( MathService.plus ( TruncService.lastDay ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ) ) , 1  ), FCH_DETERMINA ) )   )
				{
					BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
					Debug.println ( Debug.TRACE, "BENEFICIO is set in line 4845" );
					BENEFICIO_TEMP = ( this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" ) );
					STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

				}
			}
		}
		else
		{
			while ( ( Compare.equals ( STATUS_CODE, 0 ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "FECHA_EFECTIVIDAD" ), FCH_DETERMINA ) )   )
			{
				BENEFICIO = this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" );
				Debug.println ( Debug.TRACE, "BENEFICIO is set in line 4855" );
				BENEFICIO_TEMP = ( this.dm.getFieldDouble ( this.dm.get ( "BENEFICIOS_PAN_RO_DSD" ), "VLR_BENEFICIO_MAXIMO" ) );

				STATUS_CODE  = this.dm.nextRow ( OPEN4_ID );

			}
		}
		if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ) )
		{
			this._condition10 = true;
		}
		else
		{
			this._condition10 = false;
		}
		if ( this._condition10 )
		{
			BENEFICIO = MathService.minus ( BENEFICIO, TruncService.trunc ( INGRESO_NETO * 0.3 )   );
			Debug.println ( Debug.TRACE, "BENEFICIO is set in line 4874" );

			if ( Compare.lt ( BENEFICIO, 10 ) )
			{

				BENEFICIO = 0;
				if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
				{
					INELEGIBLE_EMER = "*";
				}
				else
				{
					INELEGIBLE_REG = "*";
				}
				RAZON = "FAMILIA NO ELEGIBLE POR MINIMO ADMINISTRATIVO";
				STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

				AJUSTE_PAN_STATUS  = this.dm.dbClose ( AJUSTE_PAN_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

				STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );



				BENEFICIO = 0;
				SERVICIO_BENEFICIO = 0;
				if (Compare.equals(this.app.RUTINA_GBL, "RR"))
				{
					this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
					this.app.COD_SERV_GBL = OLD_COD_SERV;
					DETERMINACION_PKT.exec ( this.app );
				}
				else
				{   
					if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
					{
						SERVICIO_STATUS = "CERRAD28";
					}
					else
					{
						SERVICIO_STATUS = "RECHAZ19";
					}
					DETERMINACION_PKT.exec ( this.app );
				}
				return;
			}

		}

	}


	/**
	 *
	 */
	protected void step26 ( ParameterSet ps )
	{
		if ( this._condition10 )    //    if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ) )
		{
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{	
				//DETERMINACION_FINAL_MENU.exec ( this.app );       
				return;
			}
		}

	}


	/**
	 *
	 */
	protected void step27 ( ParameterSet ps )
	{
		if ( this._condition10 )    //    if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ) )
		{

			// if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			//{	  

			// if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
			//  {
			//	  this.doReturn ( );
			//	  return;
			//  }
			//  DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
			return;
			// }
		}

	}


	/**
	 *
	 */
	protected void step28 ( ParameterSet ps )
	{
		if ( this._condition10 )    //    if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ) )
		{
			this.callParms.clear ( );
			this.callParms.set ( this.app.SS_JEFE_GBL  );
			this.callParms.set ( this.app.SS_SERV_GBL  );
			this.callParms.set ( this.app.COD_SERV_GBL  );
			if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
			{	  
				INFOR_BIO_NCAL_ADL.exec ( this.app, this.callParms );
			}
			return;
		}

	}


	/**
	 *
	 */


	/**
	 *
	 */
	protected void step29 ( ParameterSet ps )
	{
		if ( this._condition10 )    //    if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) || ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) ) )
		{
			this.callParms.reset ( );
			this.app.SS_JEFE_GBL  = this.callParms.getDouble ( );
			this.app.SS_SERV_GBL  = this.callParms.getDouble ( );
			this.app.COD_SERV_GBL  = this.callParms.getString ( );

		}
		if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) )
		{
			ELEGIBLE_EMER = "*";
		}
		else
		{
			ELEGIBLE_REG = "*";
		}

		this.app.AJUSTE_GLB = 0;
		if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) && ( Compare.equals ( ELEGIBLE_EMER, "*" ) )  && ( Compare.le ( DIA_SOLIC_LV, 10 ) )  || this.condition_17)
		{
			this._condition16 = true;
		}
		else
		{
			this._condition16 = false;
		}
		if ( this._condition16 )
		{
			AJUSTE_EMERGENCIA_PKT.exec ( this.app );
			return;
		}

	}


	/**
	 *
	 */
	protected void step30 ( ParameterSet ps )
	{
		if ( this._condition16  && Compare.equals(this.app.RUTINA_GBL, "RR")) //    if ( ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) && ( Compare.equals ( ELEGIBLE_EMER, "*" ) )  ) || ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ), "E" ) ) )
		{
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", this.app.AJUSTE_GLB  );
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "POS_NEG_AJUSTE", "+"  );
		}

		DIA_SOLIC_LV = FormattingFactory.parseStringToDouble ( StringService.toStringValue  ( FCH_DETERMINA ,"dd" ,StringService.Language.SPANISH ) );
		if ( Compare.equals (  this.app.COD_SERV_GBL, "PANED"  ))
		{
			if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 15 ) )  )
			{
				BENEFICIO= MathService.plus ( BENEFICIO, ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 16 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
			{
				BENEFICIO = MathService.plus ( TruncService.trunc ( BENEFICIO * 0.50 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
			}
		}
		else  if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" )  || this.condition_17 ) && ( Compare.equals ( this.app.AJUSTE_GLB, 0.0 ) )  )
		{
			if ( ( Compare.ge ( DIA_SOLIC_LV, 1 ) ) && ( Compare.le ( DIA_SOLIC_LV, 10 ) )  )
			{
				BENEFICIO = MathService.plus ( BENEFICIO, ( BONO_ANCIANO * ANCIANO_COUNT )  );
				Debug.println ( Debug.TRACE, "BENEFICIO is set in line 5579" );

			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 11 ) ) && ( Compare.le ( DIA_SOLIC_LV, 20 ) )   )
			{
				BENEFICIO = MathService.plus ( TruncService.trunc ( BENEFICIO * 0.66 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
				Debug.println ( Debug.TRACE, "BENEFICIO is set in line 5585" );

			}
			else if ( ( Compare.ge ( DIA_SOLIC_LV, 21 ) ) && ( Compare.le ( DIA_SOLIC_LV, 31 ) )   )
			{
				BENEFICIO = MathService.plus ( TruncService.trunc ( BENEFICIO * 0.34 ) , ( BONO_ANCIANO * ANCIANO_COUNT )  );
				Debug.println ( Debug.TRACE, "BENEFICIO is set in line 5591" );

			}
		}
		else if ( ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) && ( ! Compare.equals ( this.app.AJUSTE_GLB, 0.0 ) )   )
		{
			if (Compare.equals(this.app.RUTINA_GBL, "RR")) {
				BENEFICIO = TruncService.trunc(MathService.plus(BENEFICIO, (BONO_ANCIANO * ANCIANO_COUNT)));
			}
			else
			{	 
				BENEFICIO = MathService.plus ( TruncService.trunc ( MathService.plus ( BENEFICIO, ( BONO_ANCIANO * ANCIANO_COUNT )  ) ) , TruncService.trunc ( TruncService.trunc ( MathService.plus ( BENEFICIO, ( BONO_ANCIANO * ANCIANO_COUNT )  ) )  * this.app.AJUSTE_GLB )   );
			}

			Debug.println ( Debug.TRACE, "BENEFICIO is set in line 5598" );

		}
		if ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" )  && this.condition_18 )
		{
			BENEFICIO = TruncService.trunc ( MathService.plus ( BENEFICIO, ( BONO_ANCIANO * ANCIANO_COUNT )  ) ) ;
			Debug.println ( Debug.TRACE, "BENEFICIO is set in line 5606" );

			DETERMINAR_ELEGIBILIDAD_PAN_2.setBENEFICIO ( this.app, BENEFICIO );
			DETERMINAR_ELEGIBILIDAD_PAN_2.setSERVICIO_BENEFICIO ( this.app, DETERMINAR_ELEGIBILIDAD_PAN_2.getBENEFICIO ( this.app ) );
		}

		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", BENEFICIO  );
		}

		STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN2_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN3_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN4_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN5_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN6_ID );

		AJUSTE_PAN_STATUS  = this.dm.dbClose ( AJUSTE_PAN_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN7_ID );

		STATUS_CODE  = this.dm.dbClose ( OPEN8_ID );


		SERVICIO_BENEFICIO = TruncService.trunc ( BENEFICIO ) ;
		if (Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			this.app.COD_SERV_GBL = OLD_COD_SERV;
			DETERMINACION_PKT.exec ( this.app );
		}
		else
		{    	  
			if ( Compare.equals ( this.app.AUTORIZADA_GBL, "S" ) )
			{
				SERVICIO_STATUS = "PENDREVI";
			}
			else
			{
				SERVICIO_STATUS = "PENDCERT";
			}
			DETERMINACION_PKT.exec ( this.app );
		}
		return;

	}


	/**
	 *
	 */
	protected void step31 (ParameterSet ps )
	{

		DETERMINACION_FINAL_MENU.exec ( this.app );

		return;

	}


	/**
	 *
	 */
	protected void step32( ParameterSet ps )
	{
		if ( ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "N" ) ) || ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "n" ) ) )
		{
			this.doReturn ( );
			return;
		}
		if (! Compare.equals(this.app.RUTINA_GBL, "RR"))
		{
			DETER_ELEG_PAN_UPDATE_SERV_ADL.exec ( this.app );
		}
		return;
	}
}



/* ---------------------------------------------------------------------



PROCEDURE DETERMINAR_ELEGIBILIDAD_PAN_2;

VAR

OPEN_ID : NUMBER;
OPEN2_ID : NUMBER;
OPEN3_ID : NUMBER;
OPEN4_ID : NUMBER;
OPEN5_ID : NUMBER;
OPEN6_ID : NUMBER;
OPEN7_ID : NUMBER;

STATUS_CODE : NUMBER;
STATUS2_CODE : NUMBER;
STATUS7_CODE : NUMBER;

SERVICIO_STATUS:        CHAR(8) EXPORT;
SERVICIO_BENEFICIO:     NUMBER EXPORT;

ELEG_BRUTO_FLG: NUMBER;
inel_bruto_flg: number;
GASTOS_FLG:     NUMBER;
AGRB_AMT:       NUMBER;
AGRB_TOT:       NUMBER;
AGRB_FLG:       NUMBER;
SAVE_SSN:       NUMBER;
RECURSOS_ACUM : NUMBER EXPORT;
DIA_SOLIC_LV: NUMBER;
EDAD_IND : NUMBER;
ANCIANO  : NUMBER;
INCA_FLG : NUMBER;
INELEGIBLE_REG : CHAR(1) EXPORT;
INELEGIBLE_EMER : CHAR(1) EXPORT;
RAZON : CHAR(50) EXPORT;
GASTOS : NUMBER;
ANCIANO_COUNT : NUMBER EXPORT;
INCAPACITADO_COUNT : NUMBER EXPORT;
INGRESO_BRUTO : NUMBER;
SALARIO : NUMBER EXPORT;
SEG_SOC_BRUTO : NUMBER EXPORT;
SEG_SOC : NUMBER EXPORT;
OTROS : NUMBER EXPORT;
DEDUC_SAL : NUMBER EXPORT;
SAL_NET : NUMBER EXPORT;
INGRESO_NETO : NUMBER EXPORT;
ESTUDIANTE_COUNT : NUMBER EXPORT;
DEDUC_FIJA : NUMBER EXPORT;
CUIDO_MENOR : NUMBER;
CUIDO : NUMBER EXPORT;
STANDARD : NUMBER EXPORT;
UNIDAD : NUMBER EXPORT;
INELEGIBLE_INGRE_BRUTO : CHAR(1);
DEDUCCION_INGRESO : NUMBER;
INCAPACITADO : NUMBER;
BENEFICIO : NUMBER EXPORT;
ELEGIBLE_REG : CHAR(1) EXPORT;
ELEGIBLE_EMER : CHAR(1) EXPORT;
ING_MENOS_40 : NUMBER EXPORT;
DEDUC_60 : NUMBER EXPORT;
TOTAL_60 : NUMBER EXPORT;
DEDUC_INCA : NUMBER EXPORT;
TOTAL_INCA : NUMBER EXPORT;
DEDUC_EST : NUMBER EXPORT;
TOTAL_EST : NUMBER EXPORT;
TOTAL_OTRO : NUMBER EXPORT;
TOTAL_CUIDO : NUMBER EXPORT;
RECURSOS_LIQUIDOS : NUMBER EXPORT;
RECURSOS_BRUTO : NUMBER EXPORT;
BENEFICIO_PRORRATEADO : NUMBER;
BENEFICIO_TEMP : NUMBER;
GASTOS_INHERENTES : NUMBER;
GASTOS_INHE : NUMBER;
SALA : NUMBER;
ADIE : NUMBER;
NPRO : NUMBER;
NULL_DATE : DATE;
MENOR : NUMBER;
BONO_ANCIANO : NUMBER;
INGRESO_TEMP : NUMBER;

BEGIN
SET_TRACE();
{       SS_JEFE_GBL := 123456789;
        SS_SERV_GBL := 123456789;
        COD_SERV_GBL := 'PAN12';
        FCH_SOLIC_SERV_GBL:=TO_DATE('01-JAN-1993');
}
        DB_OPEN(NUCLEO_SERVICIO_DSD,OPEN_ID,STATUS_CODE);
        DB_OPEN(CLIENTES_READ_LOC_DSD,OPEN2_ID,STATUS2_CODE);
        DB_OPEN(RECURSOS_NUCLEO_DSD,OPEN3_ID,STATUS_CODE);
        DB_OPEN(BENEFICIOS_PAN_RO_DSD,OPEN4_ID,STATUS_CODE);
                IF STATUS_CODE <> 0 THEN ERROR(STATUS_CODE);
        DB_OPEN(INGRESOS_NUCLEO_DSD,OPEN5_ID,STATUS_CODE);
        DB_OPEN(GASTOS_NUCLEO_DSD,OPEN6_ID,STATUS_CODE);
        DB_OPEN(DETERMINA_RO_DSD,OPEN7_ID,STATUS7_CODE);

        CALL CHECK_ID_AUTORIZA_ADL;

        BONO_ANCIANO := 0;
        ANCIANO_COUNT := 0;
        STANDARD := 0;
        BENEFICIO_PRORRATEADO := 0;

        DB_RESET(OPEN7_ID,STATUS7_CODE);
        DETERMINA_RO_DSD.COD_SERVICIO := COD_SERV_GBL;
        DB_QUERY(OPEN7_ID,STATUS7_CODE);
        DB_GET_FIRST(OPEN7_ID,STATUS7_CODE);
        IF COD_SERV_GBL = 'PAN'THEN
        BEGIN
        WHILE (STATUS7_CODE = 0) AND
        (DETERMINA_RO_DSD.FECHA_EFECTIVIDAD <= SYSTEM_DATE) DO
        BEGIN
                BONO_ANCIANO := DETERMINA_RO_DSD.BONO_ANCIANO;
                STANDARD := DETERMINA_RO_DSD.DEDUCCION_STANDARD;
                DB_GET_NEXT(OPEN7_ID,STATUS7_CODE);
        END;
        END;
        ELSE
        BEGIN
        WHILE (STATUS7_CODE = 0) AND
        (DETERMINA_RO_DSD.FECHA_EFECTIVIDAD <= FCH_SOLIC_SERV_GBL) DO
        BEGIN
                BONO_ANCIANO := DETERMINA_RO_DSD.BONO_ANCIANO;
                STANDARD := DETERMINA_RO_DSD.DEDUCCION_STANDARD;
                DB_GET_NEXT(OPEN7_ID,STATUS7_CODE);
        END;
        END;


{ TOTALIZAR RECURSOS }
        RECURSOS_ACUM := 0;
        DB_RESET(OPEN3_ID,STATUS_CODE);
        IF STATUS_CODE<>0
           THEN BEGIN
                  ERROR(STATUS_CODE);
                  RETURN;
                END;
        RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        RECURSOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        DEBUG_LOG('COD_SERV_GBL='||COD_SERV_GBL);
        RECURSOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        RECURSOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN3_ID,STATUS_CODE);
        IF STATUS_CODE<>0
           THEN BEGIN
                  ERROR(STATUS_CODE);
                  RETURN;
                END;
        DB_GET_FIRST(OPEN3_ID,STATUS_CODE);

        WHILE STATUS_CODE = 0 DO
        BEGIN
{ISP CAMBIO 9-NOV-2005 CODIGO INCE}
             IF ((SUBSTR(COD_SERV_GBL,0,3)='PAN') AND (RECURSOS_NUCLEO_DSD.FLG_P
AN = 'X')) OR
                ((SUBSTR(COD_SERV_GBL,0,3)='AE') AND (RECURSOS_NUCLEO_DSD.FLG_AE
 = 'X'))
               THEN
                  RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO:= 0;
             ELSE
             BEGIN

              IF (RECURSOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'RNBE') AN
D
                (RECURSOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'ACNE') AND
                (RECURSOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> '****')
              THEN
              BEGIN
                IF (SUBSTR(COD_SERV_GBL,0,4) = 'PANE') AND
                   (RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO <> 'EDIF') AND
                   (RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO <> 'TECA') AND
                   (RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO <> 'PERS') AND
                   (RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO <> 'VEH2')
                THEN RECURSOS_LIQUIDOS := RECURSOS_LIQUIDOS +
                                RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO;
                ELSE
                BEGIN
                      IF (SUBSTR(COD_SERV_GBL,0,4) = 'PAN') AND
                          (RECURSOS_NUCLEO_DSD.COD_TIPO_RECURSO='VEH2')
                       THEN BEGIN
                            IF RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO>=4650
                            THEN RECURSOS_ACUM := RECURSOS_ACUM +
                            RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO-4650;
                           END;
                       ELSE BEGIN
                               RECURSOS_ACUM := RECURSOS_ACUM +
                               RECURSOS_NUCLEO_DSD.VLR_CANTIDAD_RECURSO;
                       END;


                END;
              END;

          END;
           DB_GET_NEXT(OPEN3_ID,STATUS_CODE);
        END;

{ SE VERIFICA LA EXISTENCIA DE ANCIANOS }
        UNIDAD := 0;
        ANCIANO := 0;
        INCA_FLG := 0;
        INGRESO_BRUTO := 0;
        INELEGIBLE_REG := '';
        ELEG_BRUTO_FLG := 0;
        RAZON := '';
        MAKE_NULL(NULL_DATE);
        DB_RESET(OPEN_ID,STATUS_CODE);
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
        NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
        BEGIN
             SS_IND_GBL:=NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
             IF (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NA') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'RNBE') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'ACNE') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
AND
               (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> '****')
             THEN
                UNIDAD := UNIDAD + 1;
             DB_RESET(OPEN2_ID,STATUS2_CODE);
             CLIENTES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE := SS_IND_GBL;
             CLIENTES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
             DB_QUERY(OPEN2_ID,STATUS2_CODE);
             DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
             IF (STATUS2_CODE <> 0) THEN
             BEGIN
                ERROR (STATUS2_CODE);
                DB_ROLLBACK (STATUS2_CODE);
                RETURN;
             END;
             IF CLIENTES_READ_LOC_DSD.FCH_NACIMIENTO = NULL_DATE
             THEN
                BEGIN
                 EDAD_IND := 0;
                END;
             ELSE
                 EDAD_IND := MONTHS_BETWEEN(LAST_DAY(SYSTEM_DATE),CLIENTES_READ_
LOC_DSD.FCH_NACIMIENTO)/12;
             IF (EDAD_IND >= 60) AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
             {OR
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE')}
             THEN
                ANCIANO := 1;

             IF EDAD_IND < 14
             THEN
                MENOR := 1;
             IF (CLIENTES_READ_LOC_DSD.FLG_INCAPACIDAD_VERIFICADA = 'S') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
               { OR
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE') }
             THEN
                INCA_FLG := 1;
             DB_GET_NEXT(OPEN_ID,STATUS_CODE);
        END;
        IF (ANCIANO = 1) OR (INCA_FLG = 1)
        THEN BEGIN
               IF RECURSOS_ACUM > 3000
                 THEN BEGIN
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                        RAZON := 'FAMILIA EXCEDE EL MAXIMO DE RECURSOS';
                        {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD03';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ03';
                        SERVICIO_BENEFICIO:=0;
                        BENEFICIO := 0;

                        CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;


                        CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                        CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV
_GBL);
{ ACTUALIZAR EL SERVICIO }
                        RECURSOS_ACUM:=0;
                        RETURN;
                      END;
             END;
         ELSE
           IF RECURSOS_ACUM > 2000
           THEN BEGIN
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                RAZON := 'FAMILIA EXCEDE EL MAXIMO DE RECURSOS';
                {CALL PASE_DE_VARIABLES;}
                DB_CLOSE(OPEN_ID,STATUS_CODE);
                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                IF AUTORIZADA_GBL = 'S'
                THEN
                SERVICIO_STATUS:='CERRAD03';
                ELSE
                SERVICIO_STATUS:='RECHAZ03';
                SERVICIO_BENEFICIO:=0;
                BENEFICIO := 0;

                CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                          if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);

                RECURSOS_ACUM:=0;
                RETURN;
                END;

{ Determinar Elegibilidad por Ingreso }
        SALARIO := 0;
        SEG_SOC := 0;
        OTROS := 0;
        SALA := 0;
        NPRO := 0;
        ADIE := 0;
        DB_RESET(OPEN5_ID,STATUS_CODE);
        INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        INGRESOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        INGRESOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        INGRESOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN5_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN5_ID,STATUS_CODE);
        AGRB_AMT:=461;
        AGRB_TOT:=0;
        AGRB_FLG:=0;
        WHILE STATUS_CODE = 0 DO
        BEGIN
{
   Rutina para implementar computo de ingreso a base
   de norma de 4.0(AE) y 4.3(PAN).
   Se provee tambien para entrar ingreso AE segun forma AE-98
        9-MAYO-1994   Ramon Fardonk/Jorge Rodriguez
}
   IF ((SUBSTR(COD_SERV_GBL,0,3)='PAN') AND (INGRESOS_NUCLEO_DSD.FLG_PAN = 'X'))
 OR
        ((SUBSTR(COD_SERV_GBL,0,2)='AE') AND (INGRESOS_NUCLEO_DSD.FLG_AE = 'X'))
        THEN BEGIN


               INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                 TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_REHABILITACION);
             END;

        ELSE BEGIN
               INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                 TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
               IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='S')
                  THEN BEGIN
                       IF (SUBSTR(COD_SERV_GBL,0,3)='PAN') OR
                           (SUBSTR(COD_SERV_GBL,0,4)<>'AE-C')
                          THEN BEGIN
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4.3;
                               END;
                          ELSE IF (SUBSTR(COD_SERV_GBL,0,2)='AE')
                               THEN BEGIN
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                                    INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 4
.3;
                                    END;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='B')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.15;
                       END;
               ELSE IF (INGRESOS_NUCLEO_DSD.FLG_FRECUENCIA='Q')
                  THEN BEGIN
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 2.0;
                       END;
               ELSE BEGIN
{                         Entro 'M' o estaba en blanco }
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                       INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO * 1.0;
                    END;
                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO:=
                  TRUNC(INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO);
        END;

            IF (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'RNBE') AND
               (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'ACNE') AND
               (INGRESOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> '****')

              THEN
              BEGIN
                IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADIE') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'NPRO') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRN') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'PTRA') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'RETE') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'JTPA') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAC') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAS') OR
                   (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BILV')
                THEN
                   SALARIO := SALARIO + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
;
                ELSE
                   IF INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SEGS'
                   THEN
                       BEGIN
                        SEG_SOC := SEG_SOC + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_IN
GRESO;
                        SEG_SOC_BRUTO := SEG_SOC_BRUTO + INGRESOS_NUCLEO_DSD.VLR
_CANTIDAD_INGRESO;
                       END;
                   ELSE
                        IF INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRB'
                        THEN
                           BEGIN
                            SALARIO := SALARIO + (INGRESOS_NUCLEO_DSD.VLR_CANTID
AD_INGRESO);
                            INGRESO_BRUTO := INGRESO_BRUTO +
                                      (INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO)
;
                            AGRB_TOT := AGRB_TOT + INGRESOS_NUCLEO_DSD.VLR_CANTI
DAD_INGRESO;
                            AGRB_FLG := 1;
                            {IF INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO >= AGRB
_AMT
                            THEN
                                BEGIN
                                SALARIO := SALARIO + (INGRESOS_NUCLEO_DSD.VLR_CA
NTIDAD_INGRESO - AGRB_AMT);
                                INGRESO_BRUTO := INGRESO_BRUTO +
                                      (INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO
- AGRB_AMT);
                                AGRB_AMT:=0;
                                END;
                            ELSE
                                SALARIO := SALARIO + 0;
                                AGRB_AMT:=AGRB_AMT -
                                         INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRES
O;
                             }
                           END;
                        ELSE
                        OTROS := OTROS + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRES
O;


                IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'SALA')
                THEN
                   SALA := SALA + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO;
                ELSE
                   IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'ADIE')
                   THEN
                        ADIE := ADIE + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO;
                   ELSE
                      IF (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'NPRO') OR
                         (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'AGRN') OR
                         (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAC') OR
                         (INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO = 'BIAS')
                      THEN
                          NPRO := NPRO + INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRES
O;
                IF INGRESOS_NUCLEO_DSD.COD_TIPO_INGRESO <> 'AGRB'
                THEN
                    INGRESO_BRUTO := INGRESO_BRUTO +
                                INGRESOS_NUCLEO_DSD.VLR_CANTIDAD_INGRESO;
              END;

           DB_GET_NEXT(OPEN5_ID,STATUS_CODE);
        END;



{ GASTOS POR AGRICULTURA }

 IF (SUBSTR(COD_SERV_GBL,0,4) = 'PAN')
    THEN
      BEGIN

        IF (AGRB_FLG = 1) AND (AGRB_TOT >= 461)
        THEN
           BEGIN
                INGRESO_BRUTO := INGRESO_BRUTO - 461;
                SALARIO := SALARIO - 461;
                AGRB_TOT := 0;
                AGRB_FLG := 0;
           END;
        ELSE
           BEGIN
                INGRESO_BRUTO := INGRESO_BRUTO - AGRB_TOT;
                SALARIO := SALARIO - AGRB_TOT;
                AGRB_TOT := 0;
                AGRB_FLG := 0;
           END;
      END;
    ELSE
        BEGIN
                AGRB_TOT := 0;
                AGRB_FLG := 0;
        END;

{ GASTOS INHERENTES AL NEGOCIO PROPIO }


IF NPRO > 0
THEN BEGIN
        GASTOS_INHERENTES := 0;
        GASTOS_INHE := 0;
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO:=COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
        BEGIN
             IF (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'PROA') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'PROC') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ALBE') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ESTU') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'ANCI') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'MEDI') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'CUID') AND
                (GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE <> 'OTRO') AND
                (SUBSTR(GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE,0,3) <> 'CMN') AND
                (SUBSTR(GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE,0,3) <> 'CMY') AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE') AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'ACNE') AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> '****')
             THEN
                 GASTOS_INHERENTES := GASTOS_INHERENTES + GASTOS_NUCLEO_DSD.VLR_
CANTIDAD_DEDUCCIONE;
             DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
        END;
        GASTOS_INHERENTES := TRUNC(GASTOS_INHERENTES);

        IF SALARIO >= GASTOS_INHERENTES
        THEN
           SALARIO := SALARIO - GASTOS_INHERENTES;
        ELSE
           SALARIO := 0;

       IF INGRESO_BRUTO >= GASTOS_INHERENTES
        THEN
           INGRESO_BRUTO := INGRESO_BRUTO - GASTOS_INHERENTES;
        ELSE
           INGRESO_BRUTO := 0;

       END;

{Enmienda efectiva al 1 de marzo de 2007 para excluir el ingreso bruto
 de la tabla de beneficios}
RECURSOS_BRUTO := RECURSOS_LIQUIDOS;
IF (SUBSTR(COD_SERV_GBL,0,4)='PANE')
THEN BEGIN

        IF SYSTEM_DATE >= TO_DATE('1-MAR-2007') THEN
           BEGIN
                INGRESO_BRUTO := 0;
                RECURSOS_BRUTO  := 0;
           END;
     END;
ELSE
     BEGIN

        IF SYSTEM_DATE >= TO_DATE('13-MAR-2007') THEN
           BEGIN
                INGRESO_BRUTO := 0;
                RECURSOS_BRUTO  := 0;
           END;
     END;

{ SE COMPARA CONTRA TABLA DE INGRESO BRUTO }

        BENEFICIO_TEMP := 0;
        INGRESO_TEMP := 0;
        DB_RESET(OPEN4_ID,STATUS_CODE);
        BENEFICIOS_PAN_RO_DSD.NUM_MIEMBROS_UNIDAD_FAM := UNIDAD;
        DB_QUERY(OPEN4_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN4_ID,STATUS_CODE);

        IF (sUBSTR(COD_SERV_GBL,0,4)='PANE')
        THEN
         BEGIN
           IF (SYSTEM_DATE >= TO_DATE('1-MAR-2007')) AND
              (SYSTEM_DATE < TO_DATE('1-ABR-2007'))
 THEN
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD) <= LAST_DAY(F
CH_SOLIC_SERV_GBL)) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_INGRESO_BRUTO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
              END;
            ELSE
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD)+1 <= FCH_SOLI
C_SERV_GBL) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_INGRESO_BRUTO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
      END;
         END;
        ELSE
         BEGIN
                WHILE (STATUS_CODE = 0) AND
                 (BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD <= SYSTEM_DATE) DO
                BEGIN
                        BENEFICIO_TEMP:= BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAX
IMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_INGRESO_BRUTO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
         END;
        IF (SUBSTR(COD_SERV_GBL,0,4)='PANE')
        THEN BEGIN
                DIA_SOLIC_LV:=TO_NUMBER(TO_CHAR(FCH_SOLIC_SERV_GBL,'DD'));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(DIA_SOLIC_LV));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(BENEFICIO_TEMP));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(BONO_ANCIANO));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(ANCIANO_COUNT));
                IF (DIA_SOLIC_LV>=1) AND (DIA_SOLIC_LV<=10)
                        THEN BENEFICIO_PRORRATEADO:=BENEFICIO_TEMP+(BONO_ANCIANO
 * ANCIANO_COUNT);
                        ELSE IF (DIA_SOLIC_LV>=11) AND (DIA_SOLIC_LV<=20)
                             THEN BENEFICIO_PRORRATEADO:=TRUNC(BENEFICIO_TEMP*0.
66)+(BONO_ANCIANO * ANCIANO_COUNT);
                             ELSE IF (DIA_SOLIC_LV>=21) AND (DIA_SOLIC_LV<=31)
                                  THEN BENEFICIO_PRORRATEADO:=TRUNC(BENEFICIO_TE
MP*0.34)+(BONO_ANCIANO * ANCIANO_COUNT);
                        IF ((INGRESO_BRUTO + RECURSOS_BRUTO) > BENEFICIO_PRORRAT
EADO)
                        THEN BEGIN
                                INELEGIBLE_EMER:='*';
                                 RAZON := 'FAMILIA EXCEDE MAXIMO INGRESO BRUTO';
                                {CALL PASE_DE_VARIABLES;}
{                               SALARIO := 0;
                                INGRESO_BRUTO := 0;
                                GASTOS_INHERENTES := 0;
}
                                DB_CLOSE(OPEN_ID,STATUS_CODE);
                                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                                IF AUTORIZADA_GBL = 'S'
                                THEN
                                SERVICIO_STATUS:='CERRAD04';
                                ELSE
                                SERVICIO_STATUS:='RECHAZ13';
                                BENEFICIO := 0;
                                SERVICIO_BENEFICIO:=0;
                                CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,
COD_SERV_GBL);
                                INGRESO_BRUTO := 0;
                                RETURN;
                             END;
                        END;
                ELSE
                    BEGIN
                        IF (INGRESO_BRUTO > (INGRESO_TEMP))
                        THEN
                        BEGIN
                        IF (ANCIANO = 0) AND (INCA_FLG = 0)
                        THEN BEGIN
                                INELEGIBLE_REG := '*';
                                RAZON := 'FAMILIA EXCEDE MAXIMO INGRESO BRUTO';
                                {CALL PASE_DE_VARIABLES;}
{                               SALARIO := 0;
                                INGRESO_BRUTO := 0;
                                GASTOS_INHERENTES := 0;
}
                                DB_CLOSE(OPEN_ID,STATUS_CODE);
                                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                                IF AUTORIZADA_GBL = 'S'
                                THEN
                                SERVICIO_STATUS:='CERRAD04';
                                ELSE
                                SERVICIO_STATUS:='RECHAZ13';
                                BENEFICIO := 0;
                                SERVICIO_BENEFICIO:=0;
                                CALL DETERMINACION_PKT;
                                CAll DETERMINACION_FINAL_MENU;
                                if (DETERMINACION_FINAL_GBL = 'N') or
                                   (DETERMINACION_FINAL_GBL = 'n') then return;

                                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,
COD_SERV_GBL);
                                { ACTUALIZAR STATUS LOCAL/OSI }
                                INGRESO_BRUTO := 0;
                                RETURN;
                            END;
                          ELSE
                            begin
                             ELEG_BRUTO_FLG := 0;
                            end;
                        END;
                        ELSE
                            begin
                             ELEG_BRUTO_FLG := 1;
                            end;
                      END;



{ DEDUCCION DEL 40% }
        DEDUCCION_INGRESO := 0;
        SAL_NET := 0;


        IF (SALARIO <> 0)
        THEN BEGIN
                DEDUCCION_INGRESO := TRUNC((SALARIO)* 0.4);
                IF DEDUCCION_INGRESO > 300
                THEN BEGIN
                        DEDUC_SAL := 300;
                        IF (SALARIO) > 300
                        THEN BEGIN
                                SAL_NET := (SALARIO) - 300;
                                INGRESO_NETO := (SALARIO) - 300;
                             END;
                        ELSE BEGIN
                                SAL_NET := 0;
                                INGRESO_NETO := 0;
                             END;
                     END;
                ELSE IF DEDUCCION_INGRESO < 100
                       THEN BEGIN
                              DEDUC_SAL := 100;
                              IF (SALARIO) > 100
                              THEN BEGIN
                                        SAL_NET := (SALARIO) - 100;
                                        INGRESO_NETO := (SALARIO) - 100;
                                   END;
                              ELSE BEGIN
                                        SAL_NET := 0;
                                        INGRESO_NETO := 0;
                                   END;
                            END;
                       ELSE BEGIN
                              DEDUC_SAL := DEDUCCION_INGRESO;
                              IF (SALARIO) > DEDUCCION_INGRESO
                              THEN
                                BEGIN
                                 SAL_NET := (SALARIO) - DEDUCCION_INGRESO;
                                 ING_MENOS_40 := (SALARIO) - DEDUCCION_INGRESO;
                                 INGRESO_NETO := (SALARIO) - DEDUCCION_INGRESO;
                                END;
                              ELSE
                                BEGIN
                                 SAL_NET := 0;
                                 ING_MENOS_40 := 0;
                                 INGRESO_NETO := 0;
                                END;
                            END;
            END;
            IF SYSTEM_DATE >= TO_DATE('1-MAR-2007') THEN
               BEGIN
                  OTROS := OTROS + RECURSOS_LIQUIDOS;
               END;
            ING_MENOS_40 := SAL_NET + SEG_SOC + OTROS;
            IF ING_MENOS_40<0 THEN ING_MENOS_40:=0;

{ DEDUCCION PERSONAS 60 ANOS O MAS E INCAPACITADO}
{ SE VERIFICA LA EXISTENCIA DE ANCINOS }
        ANCIANO_COUNT := 0;
        INCAPACITADO_COUNT := 0;
        GASTOS := 0;
        DEDUC_60 := 0;
        DEDUC_INCA := 0;
        IF (ANCIANO = 1) OR (INCA_FLG = 1)
        THEN BEGIN
                DB_RESET(OPEN_ID,STATUS_CODE);
                GASTOS_FLG := 0;
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
                NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
                NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
                NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN_ID,STATUS_CODE);
                DB_GET_FIRST(OPEN_ID,STATUS_CODE);
                SS_IND_GBL:=NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
                WHILE (STATUS_CODE = 0) DO
                        BEGIN
                        DB_RESET(OPEN2_ID,STATUS2_CODE);
                        CLIENTES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE := SS_IND_GB
L;
                        CLIENTES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
                        DB_QUERY(OPEN2_ID,STATUS2_CODE);
                        DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
                        IF CLIENTES_READ_LOC_DSD.FCH_NACIMIENTO = NULL_DATE
                        THEN
                           BEGIN
                                EDAD_IND := 0;
                           END;
                        ELSE
                           EDAD_IND := MONTHS_BETWEEN(LAST_DAY(SYSTEM_DATE),CLIE
NTES_READ_LOC_DSD.FCH_NACIMIENTO)/12;
                        IF (EDAD_IND >= 60) AND
                          (CLIENTES_READ_LOC_DSD.FLG_INCAPACIDAD_VERIFICADA = 'N
') AND
                          (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> '
NCAL')
AND
                          (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> '
AUTE')
                        THEN BEGIN
                                    SAVE_SSN:=CLIENTES_READ_LOC_DSD.SEGURO_SOCIA
L_CLIENTE;
                                    ANCIANO_COUNT := ANCIANO_COUNT + 1;
                                    DEDUC_60 := DEDUC_60 + 100;
                             END;
                        ELSE IF (EDAD_IND >= 60) AND
                              (CLIENTES_READ_LOC_DSD.FLG_INCAPACIDAD_VERIFICADA
= 'S') AND
                              (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV
<> 'NCAL')
 AND
                              (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV
<> 'AUTE')
                             THEN BEGIN
                                         SAVE_SSN:=CLIENTES_READ_LOC_DSD.SEGURO_
SOCIAL_CLIENTE;
                                         ANCIANO_COUNT := ANCIANO_COUNT + 1;
                                        {INCAPACITADO_COUNT := INCAPACITADO_COUN
T + 1;}
                                         DEDUC_60 := DEDUC_60 + 100;
                                        {DEDUC_INCA := DEDUC_INCA + 100;}
                                  END;
                            ELSE IF (EDAD_IND < 60) AND
                                   (CLIENTES_READ_LOC_DSD.FLG_INCAPACIDAD_VERIFI
CADA = 'S') AND
                                   (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_
SERV <> 'NCAL')
AND
                                   (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_
SERV <> 'AUTE')
                                 THEN BEGIN
                                             SAVE_SSN:=CLIENTES_READ_LOC_DSD.SEG
URO_SOCIAL_CLIENTE;
                                             INCAPACITADO_COUNT :=
                                                 INCAPACITADO_COUNT + 1;
                                             DEDUC_INCA := DEDUC_INCA + 100;
                                      END;
                            DB_RESET(OPEN6_ID,STATUS_CODE);
                            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM:=SS_JEFE_GB
L;
                            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV:=SS_SERV_G
BL;
                            GASTOS_NUCLEO_DSD.COD_SERVICIO:=COD_SERV_GBL;
                            GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO:=SS_IND
_GBL;
                            GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE:='MEDI';
                            GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
                            DB_QUERY(OPEN6_ID,STATUS_CODE);
                            DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
                            IF STATUS_CODE = 0
                               THEN BEGIN
                                    IF (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACIO
N_SERV <> 'NCAL')
AND
                                       (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACIO
N_SERV <> 'AUTE') AND
                                       (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACIO
N_SERV <> 'ACNE') AND
                                       (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACIO
N_SERV <> '****')
                                    THEN
                                    BEGIN
                                       IF (EDAD_IND >= 60)
                                       THEN BEGIN
                                            GASTOS := GASTOS + 1;
                                            DEDUC_60 := DEDUC_60 + 100;
                                            END;
                                       ELSE
                                        BEGIN
                                            IF (CLIENTES_READ_LOC_DSD.FLG_INCAPA
CIDAD_VERIFICADA = 'S') AND
                                               (NUCLEO_SERVICIO_DSD.COD_PARENTES
CO_RELACION_SERV <> 'NCAL')
 AND
                                               (NUCLEO_SERVICIO_DSD.COD_PARENTES
CO_RELACION_SERV <> 'AUTE')

                                            THEN
                                            BEGIN
                                                 GASTOS := GASTOS + 1;
                                                 DEDUC_INCA := DEDUC_INCA + 100;
                                            END;
                                        END;
                                    END;
                                    END;

             DB_GET_NEXT(OPEN_ID,STATUS_CODE);
             SS_IND_GBL:=NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
             END;
        END;

         IF ING_MENOS_40 >= DEDUC_60
         THEN
            TOTAL_60 := ING_MENOS_40 - DEDUC_60;
         ELSE
            TOTAL_60 := 0;

         IF TOTAL_60 >= DEDUC_INCA
         THEN
            TOTAL_INCA := TOTAL_60 - DEDUC_INCA;
         ELSE
             TOTAL_INCA := 0;

         INGRESO_NETO := INGRESO_NETO - (ANCIANO_COUNT * 100);
         INGRESO_NETO := INGRESO_NETO - (INCAPACITADO_COUNT * 100);
         INGRESO_NETO := INGRESO_NETO - (GASTOS * 100);
         IF INGRESO_NETO < 0
         THEN
             INGRESO_NETO := 0;

{ DETERMINAR CANTIDAD DE ESTUDIANTES EN EL NUCLEO }
         ESTUDIANTE_COUNT := 0;
         DB_RESET(OPEN_ID,STATUS_CODE);
         NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
         NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
         NUCLEO_SERVICIO_DSD.COD_SERVICIO := COD_SERV_GBL;
         NUCLEO_SERVICIO_DSD.RMO_OFICINA := RMO_GBL;
         DB_QUERY(OPEN_ID,STATUS_CODE);
         DB_GET_FIRST(OPEN_ID,STATUS_CODE);
         WHILE STATUS_CODE = 0 DO
         BEGIN
             SS_IND_GBL:=NUCLEO_SERVICIO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
             DB_RESET(OPEN2_ID,STATUS2_CODE);
             CLIENTES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE := SS_IND_GBL;
             CLIENTES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
             DB_QUERY(OPEN2_ID,STATUS2_CODE);
             DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
             IF CLIENTES_READ_LOC_DSD.FCH_NACIMIENTO = NULL_DATE
             THEN
                BEGIN
                 ERROR(4526);
                 EDAD_IND := 0;
                END;
             ELSE
                EDAD_IND := MONTHS_BETWEEN(FCH_SOLIC_SERV_GBL,CLIENTES_READ_LOC_
DSD.FCH_NACIMIENTO)/12;
             IF ((CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EP1C') OR
                 (CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EP2C') OR
                 (CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EP3C') OR
                 (CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EP4C') OR
                 (CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EP5C') or
                 (CLIENTES_READ_LOC_DSD.COD_ESCOLARIDAD = 'EETV')) AND
                (EDAD_IND < 60) AND
{               (CLIENTES_READ_LOC_DSD.FLG_INCAPACIDAD_VERIFICADA = 'N') AND }
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
 AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE') AND
                (NUCLEO_SERVICIO_DSD.COD_PARENTESCO_RELACION_SERV <> '****')
             THEN
                ESTUDIANTE_COUNT := ESTUDIANTE_COUNT + 1;
             DB_GET_NEXT(OPEN_ID,STATUS_CODE);
         END;
         IF TOTAL_INCA >= (ESTUDIANTE_COUNT * 100)
         THEN
          TOTAL_EST := TOTAL_INCA - (ESTUDIANTE_COUNT * 100);
         ELSE
          TOTAL_EST := 0;
         DEDUC_EST := (ESTUDIANTE_COUNT * 100);
         INGRESO_NETO := INGRESO_NETO - (ESTUDIANTE_COUNT * 100);
         IF INGRESO_NETO < 0
         THEN
             INGRESO_NETO := 0;

{ DEDUCCION A OTROS INGRESOS }
        DEDUC_FIJA:=0;
        IF ((SALARIO = 0) AND (ANCIANO = 0) AND (INCA_FLG = 0))
          THEN BEGIN
               IF (SEG_SOC > 0) OR (OTROS > 0)
               THEN BEGIN
                    DEDUC_FIJA := 100;
                    IF TOTAL_EST > 100
                     THEN
                      TOTAL_OTRO := TOTAL_EST - 100;
                     ELSE
                      TOTAL_OTRO := 0;

                     INGRESO_NETO := INGRESO_NETO - 100;
                     IF INGRESO_NETO < 0
                      THEN
                       INGRESO_NETO := 0;
                    END;
                END;
          ELSE TOTAL_OTRO := TOTAL_EST;

{ DEDUCCION POR CUIDO DE MENORES }

        CUIDO_MENOR := 0;
        DB_RESET(OPEN6_ID,STATUS_CODE);
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        GASTOS_NUCLEO_DSD.COD_SERVICIO := COD_SERV_GBL;
        GASTOS_NUCLEO_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN6_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN6_ID,STATUS_CODE);
        WHILE STATUS_CODE = 0 DO
        BEGIN
             DB_RESET(OPEN2_ID,STATUS2_CODE);
             CLIENTES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE :=
                GASTOS_NUCLEO_DSD.SEGURO_SOCIAL_BENEFICIARIO;
             CLIENTES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
             DB_QUERY(OPEN2_ID,STATUS2_CODE);
             DB_GET_FIRST(OPEN2_ID,STATUS2_CODE);
             IF (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'NCAL')
 AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'AUTE') AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> 'ACNE') AND
                (GASTOS_NUCLEO_DSD.COD_PARENTESCO_RELACION_SERV <> '****') AND
                (MONTHS_BETWEEN(SYSTEM_DATE,CLIENTES_READ_LOC_DSD.FCH_NACIMIENTO
)/12 < 60)
             THEN
                BEGIN
                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMN1'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 200
                    THEN
                      CUIDO_MENOR := CUIDO_MENOR + 200;
                    ELSE
                      CUIDO_MENOR := CUIDO_MENOR + GASTOS_NUCLEO_DSD.VLR_CANTIDA
D_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMN2'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 400
                    THEN
                      CUIDO_MENOR := CUIDO_MENOR + 400;
                    ELSE
                      CUIDO_MENOR := CUIDO_MENOR + GASTOS_NUCLEO_DSD.VLR_CANTIDA
D_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMN3'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 600
                    THEN
                      CUIDO_MENOR := CUIDO_MENOR + 600;
                    ELSE
                      CUIDO_MENOR := CUIDO_MENOR + GASTOS_NUCLEO_DSD.VLR_CANTIDA
D_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMN4'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 800
                    THEN
                      CUIDO_MENOR := CUIDO_MENOR + 800;
                    ELSE
                      CUIDO_MENOR := CUIDO_MENOR + GASTOS_NUCLEO_DSD.VLR_CANTIDA
D_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMY1'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 175
                    THEN
                        CUIDO_MENOR := CUIDO_MENOR + 175;
                    ELSE
                        CUIDO_MENOR := CUIDO_MENOR +
                         GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMY2'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 350
                    THEN
                        CUIDO_MENOR := CUIDO_MENOR + 350;
                    ELSE
                        CUIDO_MENOR := CUIDO_MENOR +
                         GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMY3'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 425
                    THEN
                        CUIDO_MENOR := CUIDO_MENOR + 425;
                    ELSE
                        CUIDO_MENOR := CUIDO_MENOR +
                         GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;

                IF GASTOS_NUCLEO_DSD.COD_TIPO_DEDUCCIONE = 'CMY4'
                THEN
                    IF GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE > 600
                    THEN
                        CUIDO_MENOR := CUIDO_MENOR + 600;
                    ELSE
                        CUIDO_MENOR := CUIDO_MENOR +
                         GASTOS_NUCLEO_DSD.VLR_CANTIDAD_DEDUCCIONE;
             END;
                DB_GET_NEXT(OPEN6_ID,STATUS_CODE);
        END;

{TOTAL_CUIDO := CUIDO_MENOR;}

{         IF CUIDO_MENOR > 100
          THEN BEGIN
                CUIDO := 100;
                IF TOTAL_OTRO >= CUIDO
                THEN
                  TOTAL_CUIDO := TOTAL_OTRO - CUIDO;
                ELSE
                  BEGIN
                    TOTAL_CUIDO := 0;
                  END;
               END;
          ELSE BEGIN
                CUIDO := CUIDO_MENOR;
                IF TOTAL_OTRO >= CUIDO
                THEN
                    TOTAL_CUIDO := TOTAL_OTRO - CUIDO;
                ELSE
                   BEGIN
                    TOTAL_CUIDO := 0;
                   END;
               END;
}
        CUIDO := trunc(CUIDO_MENOR);

IF TOTAL_OTRO >= CUIDO
        THEN
            TOTAL_CUIDO := TOTAL_OTRO - CUIDO;
        ELSE
            BEGIN
                TOTAL_CUIDO := 0;
            END;


        IF TOTAL_CUIDO < 0
           THEN INGRESO_NETO:=0;
           ELSE INGRESO_NETO:=TOTAL_CUIDO;


{ DEDUCCION ESTANDARD }
         DEBUG_LOG('INGRESO_NETO='||TO_CHAR(INGRESO_NETO));
         IF INGRESO_NETO >= STANDARD
            THEN INGRESO_NETO := INGRESO_NETO - STANDARD;
            ELSE INGRESO_NETO := 0;


{ SE COMPARA CONTRA TABLA DE INGRESO NETO }
        INELEGIBLE_REG := '';
        RAZON := '';
        BENEFICIO_TEMP := 0;
        INGRESO_TEMP := 0;

{SE ELIMINA POR EMIENDA DE INGRESO NETO DE MARZO 2007}
{       IF (((ANCIANO = 1) OR (INCA_FLG = 1)) AND (ELEG_BRUTO_FLG = 0))
        THEN BEGIN  }


                DB_RESET(OPEN4_ID,STATUS_CODE);
                BENEFICIOS_PAN_RO_DSD.NUM_MIEMBROS_UNIDAD_FAM := UNIDAD;
                DB_QUERY(OPEN4_ID,STATUS_CODE);
                IF STATUS_CODE <> 0 THEN ERROR(STATUS_CODE);
                DB_GET_FIRST(OPEN4_ID,STATUS_CODE);
                IF STATUS_CODE <> 0 THEN ERROR(STATUS_CODE);
                DEBUG_LOG('INGRESO_NETO='||TO_CHAR(BENEFICIOS_PAN_RO_DSD.VLR_ING
RESO_NETO));

        IF (sUBSTR(COD_SERV_GBL,0,4)='PANE')
        THEN
         BEGIN
           IF (SYSTEM_DATE >= TO_DATE('1-MAR-2007')) AND
              (SYSTEM_DATE < TO_DATE('1-ABR-2007')) THEN
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD) <= LAST_DAY(F
CH_SOLIC_SERV_GBL)) DO
                BEGIN
                        BENEFICIO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MA
XIMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXI
MO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
              END;
            ELSE
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD)+1 <= FCH_SOLI
C_SERV_GBL) DO
                BEGIN
                        BENEFICIO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MA
XIMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXI
MO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
      END;
         END;
        ELSE
         BEGIN
                WHILE (STATUS_CODE = 0) AND
                 (BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD <= SYSTEM_DATE) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        BENEFICIO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MA
XIMO;
                        INGRESO_TEMP := BENEFICIOS_PAN_RO_DSD.VLR_INGRESO_NETO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
         END;           DB_RESET(OPEN4_ID,STATUS_CODE);


         DEBUG_LOG('INGRESO_NETO LL='||TO_CHAR(INGRESO_NETO));
                IF INGRESO_NETO > (INGRESO_TEMP)
                THEN BEGIN
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                        RAZON := 'FAMILIA EXCEDE EL MAXIMO INGRESO NETO';
                        {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD04';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ13';
                        BENEFICIO := 0;
                        SERVICIO_BENEFICIO:=0;
                        CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                        CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                        CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV
_GBL);
                        { ACTUALIZAR STATUS LOCAL/OSI }
                        INGRESO_NETO := 0;
                        RETURN;
                     END;

{             END; }
{SE ELIMINA ELSE POR EMIENDA DE INGRESO NETO DE MARZO 2007}


{Enmienda efectiva al 1 de marzo de 2007 para excluir el ingreso bruto
 de la tabla de beneficios}
        IF (SUBSTR(COD_SERV_GBL,0,4)='PANE')
        THEN BEGIN
                DIA_SOLIC_LV:=TO_NUMBER(TO_CHAR(FCH_SOLIC_SERV_GBL,'DD'));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(DIA_SOLIC_LV));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(BENEFICIO_TEMP));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(BONO_ANCIANO));
                DEBUG_LOG('DIA_SOLIC_LV= '||TO_CHAR(ANCIANO_COUNT));

{Se elimina de el beneficio prorrateado bono de anciano 27 sep 2007}

                IF (DIA_SOLIC_LV>=1) AND (DIA_SOLIC_LV<=10)
                        THEN BENEFICIO_PRORRATEADO:=BENEFICIO_TEMP;
                        ELSE IF (DIA_SOLIC_LV>=11) AND (DIA_SOLIC_LV<=20)
                             THEN BENEFICIO_PRORRATEADO:=TRUNC(BENEFICIO_TEMP*0.
66);
                             ELSE IF (DIA_SOLIC_LV>=21) AND (DIA_SOLIC_LV<=31)
                                  THEN BENEFICIO_PRORRATEADO:=TRUNC(BENEFICIO_TE
MP*0.34);
                        IF ((INGRESO_NETO) > BENEFICIO_PRORRATEADO)
                        THEN BEGIN
                                INELEGIBLE_EMER:='*';
                                 RAZON := 'FAMILIA EXCEDE MAXIMO INGRESO NET0';
                                {CALL PASE_DE_VARIABLES;}
                                DB_CLOSE(OPEN_ID,STATUS_CODE);
                                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                                IF AUTORIZADA_GBL = 'S'
                                THEN
                                SERVICIO_STATUS:='CERRAD04';
                                ELSE
                                SERVICIO_STATUS:='RECHAZ13';
                                BENEFICIO := 0;
                                SERVICIO_BENEFICIO:=0;
                                CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,
COD_SERV_GBL);
                                INGRESO_NETO := 0;
                                RETURN;
                             END;
                        END;


{ DETERMINAR EL BENEFICIO PAN }
        BENEFICIO := 0;
        DB_RESET(OPEN4_ID,STATUS_CODE);
        BENEFICIOS_PAN_RO_DSD.NUM_MIEMBROS_UNIDAD_FAM := UNIDAD;
        DB_QUERY(OPEN4_ID,STATUS_CODE);
        DB_GET_FIRST(OPEN4_ID,STATUS_CODE);
        IF (sUBSTR(COD_SERV_GBL,0,4)='PANE')
        THEN
         BEGIN
           IF (SYSTEM_DATE >= TO_DATE('1-MAR-2007')) AND
              (SYSTEM_DATE < TO_DATE('1-ABR-2007')) THEN
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD) <= LAST_DAY(F
CH_SOLIC_SERV_GBL)) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
              END;
            ELSE
              BEGIN
                WHILE (STATUS_CODE = 0) AND
                (LAST_DAY(BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD)+1 <= FCH_SOLI
C_SERV_GBL) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
      END;
         END;
        ELSE
         BEGIN
                WHILE (STATUS_CODE = 0) AND
                 (BENEFICIOS_PAN_RO_DSD.FECHA_EFECTIVIDAD <= SYSTEM_DATE) DO
                BEGIN
                        BENEFICIO := BENEFICIOS_PAN_RO_DSD.VLR_BENEFICIO_MAXIMO;
                        DB_GET_NEXT(OPEN4_ID,STATUS_CODE);
                END;
         END;
        IF (sUBSTR(COD_SERV_GBL,0,4)='PANE') or (cod_serv_gbl = 'PAN')
        THEN
        BEGIN
        BENEFICIO := BENEFICIO - TRUNC(INGRESO_NETO * 0.3);
        IF BENEFICIO < 10
        THEN BEGIN
              IF (UNIDAD = 1)
               THEN IF (INGRESO_NETO >= 166) AND (INGRESO_NETO < 304)
                    THEN BENEFICIO := 10;
                    ELSE BEGIN
                     BENEFICIO := 0;
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                     RAZON := 'FAMILIA NO ELEGIBLE POR MINIMO ADMINISTRATIVO';
                     {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD28';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ19';
                        BENEFICIO := 0;
                        SERVICIO_BENEFICIO:=0;
                     CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);

                    END;

              IF (UNIDAD = 2)
               THEN IF (INGRESO_NETO >= 334) AND (INGRESO_NETO < 410)
                    THEN BENEFICIO := 10;
                    ELSE BEGIN
                     BENEFICIO := 0;
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                     RAZON := 'FAMILIA NO ELEGIBLE POR MINIMO ADMINISTRATIVO';
                     {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD28';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ19';
                        BENEFICIO := 0;
                        SERVICIO_BENEFICIO:=0;
                     CALL DETERMINACION_PKT;
                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);

                    END;

            IF (UNIDAD = 3)
                 THEN IF (INGRESO_NETO >= 490) AND (INGRESO_NETO < 520)
                      THEN BENEFICIO := 10;
                      ELSE BEGIN
                        BENEFICIO := 0;
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                 RAZON := 'FAMILIA NO ELEGIBLE POR MINIMO ADMINISTRATIVO';
                 {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD28';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ19';
                        BENEFICIO := 0;
                        SERVICIO_BENEFICIO:=0;
                 CALL DETERMINACION_PKT;
                           call DETERMINACION_FINAL_MENU;
                           if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);
                 END;

            IF UNIDAD > 3
            THEN BEGIN
                        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
                        THEN INELEGIBLE_EMER:='*';
                        ELSE INELEGIBLE_REG := '*';
                 RAZON := 'FAMILIA NO ELEGIBLE POR MINIMO ADMINISTRATIVO';
                 {CALL PASE_DE_VARIABLES;}
                        DB_CLOSE(OPEN_ID,STATUS_CODE);
                        DB_CLOSE(OPEN2_ID,STATUS_CODE);
                        DB_CLOSE(OPEN3_ID,STATUS_CODE);
                        DB_CLOSE(OPEN4_ID,STATUS_CODE);
                        DB_CLOSE(OPEN5_ID,STATUS_CODE);
                        DB_CLOSE(OPEN6_ID,STATUS_CODE);
                        DB_CLOSE(OPEN7_ID,STATUS_CODE);
                        IF AUTORIZADA_GBL = 'S'
                        THEN
                        SERVICIO_STATUS:='CERRAD28';
                        ELSE
                        SERVICIO_STATUS:='RECHAZ19';
                        BENEFICIO := 0;
                        SERVICIO_BENEFICIO:=0;
                 CALL DETERMINACION_PKT;
                            call DETERMINACION_FINAL_MENU;
                            if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
                CALL INFOR_BIO_NCAL_ADL(SS_JEFE_GBL,SS_SERV_GBL,COD_SERV_GBL);
                 END;
        END;
END;
        IF SUBSTR(COD_SERV_GBL,0,4)='PANE'
        THEN ELEGIBLE_EMER:='*';
        ELSE ELEGIBLE_REG := '*';
        AJUSTE_GLB := 0;
{ISP 21-MAR-2007 SE INCLUYE COMO CONDICION LA FECHA DE SOLICITUD
 DEBIDO A QUE LAS OFICINAS ENTRAN AJUSTE PORCENTUAL A EMERGENCIAS
 RADICADAS LUEGO DEL DIA 10 Y NO PROCEDE EL MISMO. ASI QUE NO LOS
 LLEVARA A LA PREGUNTA}

        IF (SUBSTR(COD_SERV_GBL,0,4)='PANE') AND (ELEGIBLE_EMER='*') AND
           (DIA_SOLIC_LV <= 10)
        THEN
             CALL AJUSTE_EMERGENCIA_PKT;

        {                call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
        }
        DIA_SOLIC_LV:=TO_NUMBER(TO_CHAR(FCH_SOLIC_SERV_GBL,'DD'));
        DEBUG_LOG(TO_CHAR(AJUSTE_GLB));
        IF (SUBSTR(COD_SERV_GBL,0,4)='PANE')
        AND (AJUSTE_GLB = 0.0)
{SE ELIMINO 26/02/97 AND (AJUSTE_GLB = 0.0)}
{10-14-97 SE CAMBIO LA FORMULA PARA CALCULAR EL BENEFICIO EN PANE SEGUN MANUAL
 ANTERIOR TRUNC(BENEFICIO*AJUSTE_GLB)+ (15 * ANCIANO_COUNT);}

        THEN
        BEGIN
                IF (DIA_SOLIC_LV>=1) AND (DIA_SOLIC_LV<=10)
                THEN BENEFICIO:=BENEFICIO + (BONO_ANCIANO * ANCIANO_COUNT);
                ELSE IF (DIA_SOLIC_LV>=11) AND (DIA_SOLIC_LV<=20)
                        THEN BENEFICIO:=TRUNC(BENEFICIO*0.66) + (BONO_ANCIANO *
ANCIANO_COUNT);
                        ELSE IF (DIA_SOLIC_LV>=21) AND (DIA_SOLIC_LV<=31)
                             THEN BENEFICIO:=TRUNC(BENEFICIO*0.34) + (BONO_ANCIA
NO * ANCIANO_COUNT);
        END;
        ELSE
        IF (SUBSTR(COD_SERV_GBL,0,4)='PANE')
        AND (AJUSTE_GLB <> 0.0)
        THEN
 BEGIN
{10-14-97 El ajuste porcentual no aplica en los beneficios prorrateados mayores
 al dia 10
                IF (DIA_SOLIC_LV>=1) AND (DIA_SOLIC_LV<=10)
                THEN BENEFICIO:=TRUNC((BENEFICIO + (BONO_ANCIANO * ANCIANO_COUNT
))+trunc((BENEFICIO + (BONO_ANCIANO* ANCIANO_COUNT))*AJUSTE_GLB));
                ELSE IF (DIA_SOLIC_LV>=11) AND (DIA_SOLIC_LV<=20)
                        THEN BENEFICIO:=(TRUNC(BENEFICIO*0.66))+(trunc(beneficio
 *ajuste_glb))+(BONO_ANCIANO * ANCIANO_COUNT);
                        ELSE IF (DIA_SOLIC_LV>=21) AND (DIA_SOLIC_LV<=31)
                             THEN BENEFICIO:=(TRUNC(BENEFICIO*0.34))+(trunc(bene
ficio*ajuste_glb))+(BONO_ANCIANO * ANCIANO_COUNT);
 }
                BENEFICIO:=TRUNC(BENEFICIO+(BONO_ANCIANO * ANCIANO_COUNT)) + tru
nc(TRUNC(BENEFICIO+(BONO_ANCIANO * ANCIANO_COUNT))*AJUSTE_GLB);
        END;

        IF (COD_SERV_GBL='PAN')
            THEN
            BEGIN
                {1-MAR-2007 APLICACION DE BONO DE ANCIANO}
                IF SYSTEM_DATE >= TO_DATE('27-MAR-2007') THEN
                        BENEFICIO:=TRUNC(BENEFICIO + (BONO_ANCIANO * ANCIANO_COU
NT));
                ELSE
                        BENEFICIO:=TRUNC(BENEFICIO);
                DETERMINAR_ELEGIBILIDAD_PAN_2.BENEFICIO := BENEFICIO;
                DETERMINAR_ELEGIBILIDAD_PAN_2.SERVICIO_BENEFICIO :=
                                DETERMINAR_ELEGIBILIDAD_PAN_2.BENEFICIO;
            END;
                DB_CLOSE(OPEN_ID,STATUS_CODE);
                DB_CLOSE(OPEN2_ID,STATUS_CODE);
                DB_CLOSE(OPEN3_ID,STATUS_CODE);
                DB_CLOSE(OPEN4_ID,STATUS_CODE);
                DB_CLOSE(OPEN5_ID,STATUS_CODE);
                DB_CLOSE(OPEN6_ID,STATUS_CODE);
                DB_CLOSE(OPEN7_ID,STATUS_CODE);
                IF AUTORIZADA_GBL = 'S' THEN
                        SERVICIO_STATUS:='PENDREVI';
                ELSE
                        SERVICIO_STATUS:='PENDCERT';

                SERVICIO_BENEFICIO:=TRUNC(BENEFICIO);
                CALL DETERMINACION_PKT;
                call DETERMINACION_FINAL_MENU;
                if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;
{END;}
{ MODIFICACION HECHA PARA ENTRAR AJUSTE PORCENTUAL DE EMERGENCIA }
{       IF (SUBSTR(COD_SERV_GBL,0,4)='PANE') AND (ELEGIBLE_EMER='*') THEN
                CALL AJUSTE_EMERGENCIA_PKT;

                        call DETERMINACION_FINAL_MENU;
                        if (DETERMINACION_FINAL_GBL = 'N') or
                           (DETERMINACION_FINAL_GBL = 'n') then return;

                CALL DETER_ELEG_PAN_UPDATE_SERV_ADL;}
SET_NOTRACE();

END;





--------------------------------------------------------------------- */


