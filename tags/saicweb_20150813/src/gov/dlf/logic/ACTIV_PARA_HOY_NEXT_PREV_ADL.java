package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class ACTIV_PARA_HOY_NEXT_PREV_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double COMMAND = 0;



  public String FCH_TEMP = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setCOMMAND  ( RallyApplication __app, Parameter value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).COMMAND = value.getDouble ( );
  }  

  
  /**  */
  public static void setFCH_TEMP  ( RallyApplication __app, Parameter value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).FCH_TEMP = value.getString ( );
  }  
    


  /**  */
  public static String getFCH_TEMP  ( RallyApplication __app )
  {
    return ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).FCH_TEMP;
  }


  /**  */
  public static void setFCH_TEMP  ( RallyApplication __app, String value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).FCH_TEMP = value;
  }


  /**  */
  public static void setFCH_TEMP  ( RallyApplication __app, Object value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).FCH_TEMP = ( String ) value;
  }




  /**  */
  public static double getCOMMAND  ( RallyApplication __app )
  {
    return ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).COMMAND;
  }


  /**  */
  public static Double getCOMMANDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).COMMAND );
  }


  /**  */
  public static void setCOMMAND  ( RallyApplication __app, double value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).COMMAND = value;
  }


  /**  */
  public static void setCOMMAND  ( RallyApplication __app, Object value )
  {
    ( ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) __app.getADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class ) ).COMMAND = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static ACTIV_PARA_HOY_NEXT_PREV_ADL get ( RallyApplication __app )
  {
    ACTIV_PARA_HOY_NEXT_PREV_ADL adl = new ACTIV_PARA_HOY_NEXT_PREV_ADL ( );
    __app.register ( adl, "ACTIV_PARA_HOY_NEXT_PREV_ADL" );
    __app.setADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    ACTIV_PARA_HOY_NEXT_PREV_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    ACTIV_PARA_HOY_NEXT_PREV_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "ACTIV_PARA_HOY_NEXT_PREV_ADL" );
    if ( rObj != null && rObj instanceof ACTIV_PARA_HOY_NEXT_PREV_ADL )
    {
      this.app.setADL ( ACTIV_PARA_HOY_NEXT_PREV_ADL.class, ( ACTIV_PARA_HOY_NEXT_PREV_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "ACTIV_PARA_HOY_NEXT_PREV_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "ACTIV_PARA_HOY_NEXT_PREV_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    COMMAND = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PNEXT ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      this.app.callCommand ( RallyAppCommandFactory.IGNORE );
      return;
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PNEXT ) ) 
    {
      FCH_TEMP = RallyStringService.subString ( StringService.toStringValue  ( TruncService.trunc ( MathService.plus ( this.app.FCH_ACTIV_TECN_DISP_GBL, 1  ), "DDD" )  ), 0, 11 );
      FCH_TEMP = FCH_TEMP + " " + "00:00";
      this.app.FCH_ACTIV_TECN_DISP_GBL = RallySpanishDatesParser.parseDateString ( FCH_TEMP, "DD-Mon-YYYY HH24:MI" );
      FCH_TEMP = RallyStringService.subString ( StringService.toStringValue  ( TruncService.trunc ( MathService.plus ( this.app.FCH_ACTIV_HASTA_GBL, 1  ), "DDD" )  ), 0, 11 );
      FCH_TEMP = FCH_TEMP + " " + "23:59";
      this.app.FCH_ACTIV_HASTA_GBL = RallySpanishDatesParser.parseDateString ( FCH_TEMP, "DD-Mon-YYYY HH24:MI" );
      this.app.executeCommand ( RallyAppCommandFactory.EXITACTION );
      return;
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PNEXT ) ) 
    {
      return; 
    }
    else if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PPREV )  )
    {
      this._condition1 = true;
    }
    else
    {
      this._condition1 = false;
    }
    if ( this._condition1 )
    {
      this.app.callCommand ( RallyAppCommandFactory.IGNORE );
      return;
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PNEXT ) ) 
    {
    }
    else if ( this._condition1 )    //    else if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PPREV )  )
    {
      FCH_TEMP = RallyStringService.subString ( StringService.toStringValue  ( TruncService.trunc ( MathService.minus ( this.app.FCH_ACTIV_TECN_DISP_GBL, 1  ), "DDD" )  ), 0, 11 );
      FCH_TEMP = FCH_TEMP + " " + "00:00";
      this.app.FCH_ACTIV_TECN_DISP_GBL = RallySpanishDatesParser.parseDateString ( FCH_TEMP, "DD-Mon-YYYY HH24:MI" );
      FCH_TEMP = RallyStringService.subString ( StringService.toStringValue  ( TruncService.trunc ( MathService.minus ( this.app.FCH_ACTIV_HASTA_GBL, 1  ), "DDD" )  ), 0, 11 );
      FCH_TEMP = FCH_TEMP + " " + "23:59";
      this.app.FCH_ACTIV_HASTA_GBL = RallySpanishDatesParser.parseDateString ( FCH_TEMP, "DD-Mon-YYYY HH24:MI" );
      this.app.executeCommand ( RallyAppCommandFactory.EXITACTION );
      return;
    }

  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PNEXT ) ) 
    {
    }
    else if ( this._condition1 )    //    else if ( Compare.equals ( COMMAND, RallyAppCommandFactory.PPREV )  )
    {
      return; 
    }
    if ( Compare.equals ( COMMAND, RallyAppCommandFactory.ABORTACTION ) ) 
    {
      APERTURA_DE_CASO_ADL.setCOMPLETION_STATUS ( this.app, "FAILURE" );
      APERTURA_DE_CASO_ADL.setVISITAS_STATUS ( this.app, "FAILURE" );
    }

  }
}



/* ---------------------------------------------------------------------


     

PROCEDURE ACTIV_PARA_HOY_NEXT_PREV_ADL;

VAR
        COMMAND :NUMBER(9,0);
        FCH_TEMP        :       CHAR(17);

BEGIN
SET_TRACE();
COMMAND:=GET_CMD();
IF COMMAND=PNEXT
   THEN BEGIN
          CALL_CMD(IGNORE);
          DEBUG_LOG('FECHA_VAR '||TO_CHAR(SOLIC_SERV_VISITAS_PARA_HOY_FR.FECHA_V
AR));
             FCH_TEMP:=SUBSTR(TO_CHAR(TRUNC(FCH_ACTIV_TECN_DISP_GBL+1,'DDD')),0,
11);
             FCH_TEMP:=FCH_TEMP||' '||'00:00';
             FCH_ACTIV_TECN_DISP_GBL:=TO_DATE(FCH_TEMP,'DD-Mon-YYYY HH24:MI');
             FCH_TEMP:=SUBSTR(TO_CHAR(TRUNC(FCH_ACTIV_HASTA_GBL+1,'DDD')),0,11);
             FCH_TEMP:=FCH_TEMP||' '||'23:59';
             FCH_ACTIV_HASTA_GBL:=TO_DATE(FCH_TEMP,'DD-Mon-YYYY HH24:MI');
           EXECUTE_CMD('FINISH ACTION');
        END;
   ELSE IF COMMAND=PPREV
           THEN BEGIN
          DEBUG_LOG('FECHA_VAR '||TO_CHAR(SOLIC_SERV_VISITAS_PARA_HOY_FR.FECHA_V
AR));
                  CALL_CMD(IGNORE);
             FCH_TEMP:=SUBSTR(TO_CHAR(TRUNC(FCH_ACTIV_TECN_DISP_GBL-1,'DDD')),0,
11);
             FCH_TEMP:=FCH_TEMP||' '||'00:00';
             FCH_ACTIV_TECN_DISP_GBL:=TO_DATE(FCH_TEMP,'DD-Mon-YYYY HH24:MI');
             FCH_TEMP:=SUBSTR(TO_CHAR(TRUNC(FCH_ACTIV_HASTA_GBL-1,'DDD')),0,11);
             FCH_TEMP:=FCH_TEMP||' '||'23:59';
             FCH_ACTIV_HASTA_GBL:=TO_DATE(FCH_TEMP,'DD-Mon-YYYY HH24:MI');
           EXECUTE_CMD('FINISH ACTION');
                END;
IF COMMAND=EXITACTION
   THEN BEGIN
        APERTURA_DE_CASO_ADL.COMPLETION_STATUS:='FAILURE';
        APERTURA_DE_CASO_ADL.VISITAS_STATUS:='FAILURE';
        END;
SET_NOTRACE();
END;

    



--------------------------------------------------------------------- */
