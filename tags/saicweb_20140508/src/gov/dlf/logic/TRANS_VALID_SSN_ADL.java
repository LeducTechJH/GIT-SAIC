package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class TRANS_VALID_SSN_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double NUCLEO_ID = 0;

  public double NUCLEO_STAT = 0;

  public double NULL_NUM = 0;



  public DataStore NUCLEO_READ_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUCLEO_STAT  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_STAT = value.getDouble ( );
  }  

  
  /**  */
  public static void setNULL_NUM  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NULL_NUM = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getNUCLEO_READ_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_READ_LOC_DSD;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_READ_LOC_DSD = value;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_READ_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getNUCLEO_ID  ( RallyApplication __app )
  {
    return ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_ID;
  }


  /**  */
  public static Double getNUCLEO_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_ID );
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, double value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_ID = value;
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_STAT  ( RallyApplication __app )
  {
    return ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_STAT;
  }


  /**  */
  public static Double getNUCLEO_STATDouble ( RallyApplication __app )
  {
    return new Double ( ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_STAT );
  }


  /**  */
  public static void setNUCLEO_STAT  ( RallyApplication __app, double value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_STAT = value;
  }


  /**  */
  public static void setNUCLEO_STAT  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NUCLEO_STAT = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNULL_NUM  ( RallyApplication __app )
  {
    return ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NULL_NUM;
  }


  /**  */
  public static Double getNULL_NUMDouble ( RallyApplication __app )
  {
    return new Double ( ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NULL_NUM );
  }


  /**  */
  public static void setNULL_NUM  ( RallyApplication __app, double value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NULL_NUM = value;
  }


  /**  */
  public static void setNULL_NUM  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_VALID_SSN_ADL ) __app.getADL ( TRANS_VALID_SSN_ADL.class ) ).NULL_NUM = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static TRANS_VALID_SSN_ADL get ( RallyApplication __app )
  {
    TRANS_VALID_SSN_ADL adl = new TRANS_VALID_SSN_ADL ( );
    __app.register ( adl, "TRANS_VALID_SSN_ADL" );
    __app.setADL ( TRANS_VALID_SSN_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    TRANS_VALID_SSN_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    TRANS_VALID_SSN_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "TRANS_VALID_SSN_ADL" );
    if ( rObj != null && rObj instanceof TRANS_VALID_SSN_ADL )
    {
      this.app.setADL ( TRANS_VALID_SSN_ADL.class, ( TRANS_VALID_SSN_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "TRANS_VALID_SSN_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "TRANS_VALID_SSN_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NULL_NUM = TruncService.setNull ( NULL_NUM  );
    NUCLEO_READ_LOC_DSD = this.dm.create ( "NUCLEO_READ_LOC_DSD" );
    NUCLEO_ID = NUCLEO_READ_LOC_DSD.getId ( );
    NUCLEO_STAT = RallyDataStoreException.getDefault ( );

    NUCLEO_STAT  = this.dm.reset ( NUCLEO_ID );

    this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "TRANSFER_FR" ).getDoubleItem ( "SEGURO_SOCIAL_SERVICIO" ));
    this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    NUCLEO_STAT  = this.dm.limitQueryFromBuffer ( NUCLEO_ID );
    NUCLEO_STAT  = this.dm.retrieve ( NUCLEO_ID );

    NUCLEO_STAT  = this.dm.firstRow ( NUCLEO_ID );

    while ( Compare.equals ( NUCLEO_STAT, 0 )  )
    {
      if ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ), this.app.form ( "NUEVO_JEFE_FAM_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAMILIA" )) ) 
      {
        this.app.form ( "NUEVO_JEFE_FAM_FRM" ).setItem ( "SEGURO_SOCIAL_JEFE_FAMILIA", NULL_NUM  );
        TRANSFER_ADL.setNUEVO_JEFE_SELECT ( this.app, 1 );
        this.app.setError ( 0, 4532 );
        this.app.browseToField ( "NUEVO_JEFE_FAM_FRM", "SEGURO_SOCIAL_JEFE_FAMILIA" ); 
      }

      NUCLEO_STAT  = this.dm.nextRow ( NUCLEO_ID );

    }
    NUCLEO_STAT  = this.dm.dbClose ( NUCLEO_ID );

  }
}



/* ---------------------------------------------------------------------


     
procedure trans_valid_ssn_adl;
var
nucleo_id       :number;
nucleo_stat     :number;
NULL_NUM : NUMBER;

begin
MAKE_NULL(NULL_NUM);
db_open(NUCLEO_READ_LOC_DSD,nucleo_id,nucleo_stat);
        db_reset(nucleo_id,nucleo_stat);
        nucleo_read_loc_dsd.seguro_social_jefe_serv := TRANSFER_FR.SEGURO_SOCIAL
_SERVICIO;
        nucleo_read_loc_dsd.rmo_oficina := rmo_gbl;
        db_query(nucleo_id,nucleo_stat);
        db_get_first(nucleo_id,nucleo_stat);
        while nucleo_stat = 0 do
        begin
        if nucleo_read_loc_dsd.seguro_social_beneficiario =
                NUEVO_JEFE_FAM_FRM.SEGURO_SOCIAL_JEFE_FAMILIA
        then begin
                NUEVO_JEFE_FAM_FRM.SEGURO_SOCIAL_JEFE_FAMILIA:=NULL_NUM;
                TRANSFER_ADL.NUevo_jefe_select := 1;
                error(4532);
                SET_CURRENT_FIELD(NUEVO_JEFE_FAM_FRM.SEGURO_SOCIAL_JEFE_FAMILIA)
;
                { set_failure();}

             end; 
        db_get_next(nucleo_id,nucleo_stat);
        end;

{       if NUEVO_JEFE_FAM_FRM.SEGURO_SOCIAL_JEFE_FAMILIA
           = TRANSFER_FR.SEGURO_SOCIAL_FAMILIA
        then begin
                error(4532);
                set_failure();
             end; }

db_close(nucleo_id,nucleo_stat);
end;
    



--------------------------------------------------------------------- */
