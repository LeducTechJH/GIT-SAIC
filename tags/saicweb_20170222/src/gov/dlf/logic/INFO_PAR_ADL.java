package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class INFO_PAR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------
    




  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static INFO_PAR_ADL get ( RallyApplication __app )
  {
    INFO_PAR_ADL adl = new INFO_PAR_ADL ( );
    __app.register ( adl, "INFO_PAR_ADL" );
    __app.setADL ( INFO_PAR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    INFO_PAR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    INFO_PAR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "INFO_PAR_ADL" );
    if ( rObj != null && rObj instanceof INFO_PAR_ADL )
    {
      this.app.setADL ( INFO_PAR_ADL.class, ( INFO_PAR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "INFO_PAR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "INFO_PAR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }

}



/* ---------------------------------------------------------------------


     
procedure info_par_adl;
begin
SET_TRACE();
{
IF SUBSTR(INFOR_BIO_DESCALIFICADOS_FRM.COD_SERVICIO,0,3) = 'PAN' THEN
        pan_fch_desc_gbl := INFOR_BIO_DESCALIFICADOS_FRM.FCH_DESCALIFICACION;
ELSE 
        ae_fch_desc_gbl := INFOR_BIO_DESCALIFICADOS_FRM.FCH_DESCALIFICACION;
IF INFOR_BIO_FRM.AGREGATE = 0
THEN
   BEGIN
       CALL_CMD('insert record next_group');
       INFOR_BIO_FRM.SEGURO_SOCIAL_CLIENTE := SSN_GBL;
   END;
}
SET_NOTRACE();
end;
    



--------------------------------------------------------------------- */
