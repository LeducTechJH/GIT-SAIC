package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.jdatapanel.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_NUM_NUCLEO_INSERT_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

  public boolean _condition0 = false;



  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_CODE = 0;

  public double NUCLEO_ID = 0;

  public double NUCLEO_STATUS = 0;



  public String NUL_VAL = null;

  public Date NULL_DATE = null;

  public DataStore CLIENTES_READ_DSD = null;

  public DataStore NUCLEO_LOC_DSD = null;

  public JDataPanelGroupInstance jdpi = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------


  /**  */
  public static String getNUL_VAL  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUL_VAL;
  }


  /**  */
  public static void setNUL_VAL  ( RallyApplication __app, String value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUL_VAL = value;
  }


  /**  */
  public static void setNUL_VAL  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUL_VAL = ( String ) value;
  }



  /**  */
  public static Date getNULL_DATE  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NULL_DATE;
  }


  /**  */
  public static void setNULL_DATE  ( RallyApplication __app, Date value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NULL_DATE = value;
  }


  /**  */
  public static void setNULL_DATE  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NULL_DATE = ( Date ) value;
  }



  /**  */
  public static DataStore getCLIENTES_READ_DSD  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).CLIENTES_READ_DSD;
  }


  /**  */
  public static void setCLIENTES_READ_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).CLIENTES_READ_DSD = value;
  }


  /**  */
  public static void setCLIENTES_READ_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).CLIENTES_READ_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getNUCLEO_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_LOC_DSD;
  }


  /**  */
  public static void setNUCLEO_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_LOC_DSD = value;
  }


  /**  */
  public static void setNUCLEO_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_CODE  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).STATUS_CODE;
  }


  /**  */
  public static Double getSTATUS_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).STATUS_CODE );
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, double value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).STATUS_CODE = value;
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).STATUS_CODE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_ID;
  }


  /**  */
  public static Double getNUCLEO_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_ID );
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_ID = value;
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_STATUS  ( RallyApplication __app )
  {
    return ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_STATUS;
  }


  /**  */
  public static Double getNUCLEO_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_STATUS );
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, double value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_STATUS = value;
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_NUM_NUCLEO_INSERT_ADL ) __app.getADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class ) ).NUCLEO_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   *
   * @param __app
   * @return
   */
  public static CHECK_NUM_NUCLEO_INSERT_ADL get ( RallyApplication __app )
  {
    CHECK_NUM_NUCLEO_INSERT_ADL adl = new CHECK_NUM_NUCLEO_INSERT_ADL ( );
    __app.register ( adl, "CHECK_NUM_NUCLEO_INSERT_ADL" );
    __app.setADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class, adl );
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CHECK_NUM_NUCLEO_INSERT_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CHECK_NUM_NUCLEO_INSERT_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   *
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CHECK_NUM_NUCLEO_INSERT_ADL" );
    if ( rObj != null && rObj instanceof CHECK_NUM_NUCLEO_INSERT_ADL )
    {
      this.app.setADL ( CHECK_NUM_NUCLEO_INSERT_ADL.class, ( CHECK_NUM_NUCLEO_INSERT_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CHECK_NUM_NUCLEO_INSERT_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep )
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      default:
      {
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CHECK_NUM_NUCLEO_INSERT_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NUL_VAL = TruncService.setNull ( NUL_VAL  );
    NULL_DATE = TruncService.setNull ( NULL_DATE  );
    CLIENTES_READ_DSD = this.dm.create ( "CLIENTES_READ_DSD" );
    OPEN_ID = CLIENTES_READ_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STATUS_CODE, 0 ) )
    {
      this.app.setError ( 0, STATUS_CODE );
    }
    NUCLEO_LOC_DSD = this.dm.create ( "NUCLEO_LOC_DSD" );
    NUCLEO_ID = NUCLEO_LOC_DSD.getId ( );
    NUCLEO_STATUS = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) )
    {
      this.app.setError ( 1, NUCLEO_STATUS );
    }
    if ( Compare.equals ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "COUNT_NUCLEO_AGGREGATE" ), 0 ) )
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "AT" ) )
      {
        STATUS_CODE  = this.dm.reset ( OPEN_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_JEFE_FAMILIA", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM1" ));
        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
        STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

        if ( ! Compare.equals ( STATUS_CODE, 0 ) )
        {
          this.app.setError ( 2, STATUS_CODE );
        }

        STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

        if ( ! Compare.equals ( STATUS_CODE, 0 ) )
        {
          this.app.setError ( 3, STATUS_CODE );
        }
        while ( Compare.equals ( STATUS_CODE, 0 )  )
        {
          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM1" ));
          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_SERVICIO", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ));
          if ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE" ), this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" )) )
          {
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNPR" );
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
          }
          else
          {
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE" ) );
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNSC" );
            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
          }

          boolean tempBool = this.dm.getLogEnabled ( ); 
          this.dm.setLogEnabled ( false );
          
          NUCLEO_STATUS  = this.dm.insertRow ( NUCLEO_ID );

          this.dm.setLogEnabled ( tempBool );
          
          if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) )
          {
            this.app.setError ( 4, NUCLEO_STATUS );
          }

          STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

        }

        NUCLEO_ID  = this.dm.dbCommit ( );
      }
      else
      {
        this.app.form ( "SERV_NUCLEO_SERV_FRM" ).resetChangeStatus ( );
        this.app.getLastForm ( "SERV_NUCLEO_SERV_FRM" ).setUpdateOnInstanceChange ( false );

        this.app.callCommand ( RallyAppCommandFactory.QBE );
        
        return;
      }
    }
//      if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "AT" ) )
//      {
//        STATUS_CODE  = this.dm.reset ( OPEN_ID );
//
//        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_JEFE_FAMILIA", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM1" ));
//        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
//
//        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
//        STATUS_CODE  = this.dm.retrieve ( OPEN_ID );
//
//        if ( ! Compare.equals ( STATUS_CODE, 0 ) )
//        {
//          this.app.setError ( 2, STATUS_CODE );
//        }
//
//        STATUS_CODE  = this.dm.firstRow ( OPEN_ID );
//
//        if ( ! Compare.equals ( STATUS_CODE, 0 ) )
//        {
//          this.app.setError ( 3, STATUS_CODE );
//        }
//        
//        while ( Compare.equals ( STATUS_CODE, 0 )  )
//        {
//          NUCLEO_STATUS  = this.dm.reset ( NUCLEO_ID );
//          
//          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM1" ));
//          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
//          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_SERVICIO", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ));
//          if ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE" ), this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" )) )
//          {
//            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
//          }
//          else
//          {
//            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE" ) );
//          }
//
//          this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
//          
//          NUCLEO_STATUS  = this.dm.limitQueryFromBuffer ( NUCLEO_ID );
//          NUCLEO_STATUS  = this.dm.retrieve ( NUCLEO_ID );
//
//          NUCLEO_STATUS  = this.dm.firstRow ( NUCLEO_ID );
//          
//          if ( Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE" ), this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" )) )
//          {
//            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNPR" );
//          }
//          else
//          {
//            this.dm.setField ( this.dm.get ( "NUCLEO_LOC_DSD" ), "COD_PARENTESCO_RELACION_SERV", "BNSC" );
//          }
//          
//          boolean tempBool = this.dm.getLogEnabled ( );          
//          this.dm.setLogEnabled ( false ); 
//          if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) )
//          {
//            NUCLEO_STATUS  = this.dm.insertRow ( NUCLEO_ID );
//          }
//          else
//          {
//            NUCLEO_STATUS  = this.dm.update ( NUCLEO_ID );
//          }
//          this.dm.setLogEnabled ( tempBool );
//          if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) )
//          {
//            this.app.setError ( 4, NUCLEO_STATUS );
//          }
//
//          STATUS_CODE  = this.dm.nextRow ( OPEN_ID );
//
//        }
//
//        NUCLEO_ID  = this.dm.dbCommit ( );
//      }
//      else
//      {
//        this.app.form ( "SERV_NUCLEO_SERV_FRM" ).resetChangeStatus ( );
//        this.app.getLastForm ( "SERV_NUCLEO_SERV_FRM" ).setUpdateOnInstanceChange ( false );
//
//        this.app.callCommand ( RallyAppCommandFactory.QBE );
//        
//        return;
//      }
//    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "COUNT_NUCLEO_AGGREGATE" ), 0 ) )
    {
      if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "AT" ) )
      {
      }
      else
      {
        this.app.callCommand ( RallyAppCommandFactory.QUERY );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "COUNT_NUCLEO_AGGREGATE" ), 0 ) )
    {
      if ( Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getStringItem ( "COD_SERVICIO" ), 0, 2 ), "AT" ) )
      {
      }
      else
      {
        this.jdpi = this.app.getLastForm ( "SERV_NUCLEO_SERV_FRM" ).addInstance ( "NUCLEO_SERV_GP" );

        this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "SEGURO_SOCIAL_BENEFICIARIO", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ) );

        STATUS_CODE  = this.dm.reset ( OPEN_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "SERV_NUCLEO_SERV_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
        this.dm.setField ( this.dm.get ( "CLIENTES_READ_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
        STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

        STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

        if ( Compare.equals ( this.app.COD_SERV_GBL, "PAN" ) )
        {
          if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_DSD" ), "FLG_DESCALIFICADO" ), "X" ) ) && ( ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_DSD" ), "FCH_DESCALIFICADO_PAN" ), NULL_DATE ) ) || ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_DSD" ), "COD_RAZON_DESCALIFICADO_PAN" ), NUL_VAL ) ) )  )
          {
            this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "COD_PARENTESCO_RELACION_SERV", "NCAL"  );
          }
          else
          {
            this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "COD_PARENTESCO_RELACION_SERV", "BNPR"  );
          }
        }
        else
        {
          if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_DSD" ), "FLG_DESCALIFICADO" ), "X" ) ) && ( ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "CLIENTES_READ_DSD" ), "FCH_DESCALIFACADO_AE" ), NULL_DATE ) ) || ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_DSD" ), "COD_RAZON_DESCALIFICADO_AE" ), NUL_VAL ) ) )  )
          {
            this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "COD_PARENTESCO_RELACION_SERV", "NCAL"  );
          }
          else
          {
            this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "COD_PARENTESCO_RELACION_SERV", "BNPR"  );
          }
        }
        this.app.form ( "SERV_NUCLEO_SERV_FRM" ).setItem ( "RMO_NUCLEO", this.app.RMO_GBL );


        STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

        //SERV_NUC_BEF_INS_ADL.exec ( app );
        this.jdpi.getData ( ).update ( );
        SERV_NUCLEO_SERV_BEF_INS_ADL.exec ( app );

        //INSERT_SERV_NOT_FINISH_ADL.exec ( this.app );
        return;
      }
    }
  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    this.app.form ( "SERV_NUCLEO_SERV_FRM" ).resetChangeStatus ( );
    this.app.getLastForm ( "SERV_NUCLEO_SERV_FRM" ).setUpdateOnInstanceChange ( false );

    this.app.callCommand ( RallyAppCommandFactory.QBE );
    return;
  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    this.app.callCommand ( RallyAppCommandFactory.QUERY );
    return;
  }
}



/* ---------------------------------------------------------------------



PROCEDURE CHECK_NUM_NUCLEO_INSERT_ADL;

VAR

NUL_VAL : CHAR(4);
NULL_DATE : DATE;
OPEN_ID : NUMBER;
STATUS_CODE : NUMBER;
nucleo_id : number;
nucleo_status : number;

SET_TRACE();
MAKE_NULL(NUL_VAL);
MAKE_NULL(NULL_DATE);
DB_OPEN(CLIENTES_READ_DSD,OPEN_ID,STATUS_CODE);
                if status_code <> 0
                then    error(status_code);
db_open(NUCLEO_LOC_DSD,nucleo_id,nucleo_status);
                if NUCLEO_STATUS <> 0
                then    error(NUCLEO_STATUS);
IF SERV_NUCLEO_SERV_FRM.COUNT_NUCLEO_AGGREGATE=0
   THEN IF (SUBSTR(SERV_NUCLEO_SERV_FRM.COD_SERVICIO,0,2) = 'AT')
        THEN
        BEGIN
          DB_RESET(OPEN_ID,STATUS_CODE);
          CLIENTES_READ_DSD.SEGURO_SOCIAL_JEFE_FAMILIA :=
                     SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_JEFE_FAM1;
          CLIENTES_READ_DSD.RMO_OFICINA := RMO_GBL;
          DB_QUERY(OPEN_ID,STATUS_CODE);
                if status_code <> 0
                then    error(status_code);
          DB_GET_FIRST(OPEN_ID,STATUS_CODE);
                if status_code <> 0
                then    error(status_code);
          WHILE STATUS_CODE = 0 DO
           BEGIN
                  nucleo_loc_dsd.seguro_social_jefe_fam :=
                        serv_nucleo_serv_frm.seguro_social_jefe_fam1;
                  nucleo_loc_dsd.seguro_social_jefe_serv :=
                        serv_nucleo_serv_frm.seguro_social_jefe_serv;
                  nucleo_loc_dsd.cod_servicio := serv_nucleo_serv_frm.cod_servic
io;
                  IF CLIENTES_READ_DSD.SEGURO_SOCIAL_CLIENTE =
                           SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_JEFE_SERV
                  THEN
                      BEGIN
                          nucleo_loc_dsd.seGURO_SOCIAL_BENEFICIARIO:=
                               SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_JEFE_SERV;
                          nucleo_loc_dsd.COD_PARENTESCO_RELACION_SERV:='BNPR';
                          NUCLEO_LOC_DSD.RMO_OFICINA := RMO_GBL;
                      END;
                  ELSE
                      BEGIN
                          nucleo_loc_dsd.SEGURO_SOCIAL_BENEFICIARIO:=
                               CLIENTES_READ_DSD.SEGURO_SOCIAL_CLIENTE;
                          nucleo_loc_dsd.COD_PARENTESCO_RELACION_SERV:='BNSC';
                          NUCLEO_LOC_DSD.RMO_OFICINA := RMO_GBL;
                      END;
                db_insert(nucleo_id,nucleo_status);
                if nucleo_status <> 0
                then    error(nucleo_status);
                DB_GET_NEXT(OPEN_ID,STATUS_CODE);
             END;
            db_commit(nucleo_id);
         END;
         ELSE
         BEGIN
          CALL_CMD(QBE);
          CALL_CMD(QUERY);
          CALL_CMD('Next group');
          CALL_CMD('Insert record next_group');
          SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_BENEFICIARIO:=
              SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_JEFE_SERV;
          DB_RESET(OPEN_ID,STATUS_CODE);
          CLIENTES_READ_DSD.SEGURO_SOCIAL_CLIENTE :=
                     SERV_NUCLEO_SERV_FRM.SEGURO_SOCIAL_JEFE_SERV;
          CLIENTES_READ_DSD.RMO_OFICINA := RMO_GBL;
          DB_QUERY(OPEN_ID,STATUS_CODE);
          DB_GET_FIRST(OPEN_ID,STATUS_CODE);
         IF (COD_SERV_GBL = 'PAN')
          THEN
             BEGIN
                IF (CLIENTES_READ_DSD.FLG_DESCALIFICADO = 'X') AND
                   ((CLIENTES_READ_DSD.FCH_DESCALIFICADO_PAN <> NULL_DATE) OR
                   (CLIENTES_READ_DSD.COD_RAZON_DESCALIFICADO_PAN <> NUL_VAL))
                THEN
                    SERV_NUCLEO_SERV_FRM.COD_PARENTESCO_RELACION_SERV:='NCAL';
                ELSE
                    SERV_NUCLEO_SERV_FRM.COD_PARENTESCO_RELACION_SERV:='BNPR';
             END;
          ELSE
             BEGIN
                IF (CLIENTES_READ_DSD.FLG_DESCALIFICADO = 'X') AND
                   ((CLIENTES_READ_DSD.FCH_DESCALIFACADO_AE <> NULL_DATE) OR
                   (CLIENTES_READ_DSD.COD_RAZON_DESCALIFICADO_AE <> NUL_VAL))
                THEN
                    SERV_NUCLEO_SERV_FRM.COD_PARENTESCO_RELACION_SERV:='NCAL';
                ELSE
                    SERV_NUCLEO_SERV_FRM.COD_PARENTESCO_RELACION_SERV:='BNPR';
             END;


        DB_CLOSE(OPEN_ID,STATUS_CODE);

          CALL INSERT_SERV_NOT_FINISH_ADL;
          CALL_CMD('Commit');

{         CALL INSERT_DIRECCION_SERV_ADL;}

        END;

CALL_CMD(QBE);
CALL_CMD(QUERY);

{  ELSE CALL_CMD('Next group');}

SET_NOTRACE();






--------------------------------------------------------------------- */
