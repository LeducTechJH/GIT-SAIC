package gov.dlf.external;


import gov.dlf.facade.SAIC_DMQ_ORA_Application;

import java.util.Enumeration;
import java.util.Hashtable;

import net.maintrend.appmanager.Application;
import net.maintrend.interfaces.IRegisteredObject;
import net.maintrend.interlink.OracleRdbClient;
import net.maintrend.interlink.Parameter;
import net.maintrend.interlink.ParameterSet;
import net.maintrend.rallyengine.RallyApplication;
import net.maintrend.rallyengine.RallyDataManager;
import net.maintrend.util.Debug;



/**
 * 
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class DELETE_FIX_FILES
     extends OracleRdbClient 
  implements IRegisteredObject 
{
  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app = null;



  // -------------------------------------------------------------------
  // ----------   Constructors and Supporting Methods   ----------------

  /**
   *
   */
  public DELETE_FIX_FILES ( )
  {
    super ( );
    this.setProcedureName ( "CALL_DELETE_FIX_FILES" );
    this.exceptionTitle = "OracleRdbClient_DELETE_FIX_FILES.process ( ) - ";
    this.parmCount = 1;
  }



  // -------------------------------------------------------------------
  // ----------   Constructors and Supporting Methods   ----------------

  /**
   *
   */
  public static DELETE_FIX_FILES exec ( SAIC_DMQ_ORA_Application __app, ParameterSet ps )
  {
    DELETE_FIX_FILES link = new DELETE_FIX_FILES ( );
    link.setApplication ( __app );
    link.execute ( ps );
    return link;
  }


  /**
   *
   */
  public static DELETE_FIX_FILES exec ( SAIC_DMQ_ORA_Application __app )
  {
    return DELETE_FIX_FILES.exec ( __app, null );
  }



  // -------------------------------------------------------------------
  // ----------   IRegisteredObject Implementation   -------------------

  /**
   * 
   * @param rApp
   */
  public void setApplication ( RallyApplication rApp )
  {
    if ( rApp != null ) this.app = ( SAIC_DMQ_ORA_Application ) rApp;
    if ( this.app != null )
    {
      this.setDataManager ( ( RallyDataManager ) this.app.getDataManager ( ) );
    }
  }


  /**
   * 
   * @param application
   */
  public void setApplication ( Application application )
  {
    this.setApplication ( ( RallyApplication ) application ); 
  }


  /**
   * 
   * @return
   */
  public boolean isSelfClosing ( )
  {
    return true;
  }


  /**
   *
   */
  public void halt ( )
  {
    // Empty
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   *
   */
  protected void createParameters ( ParameterSet ps )
  {
    Parameter parm;
    this.parameters = ps;
    parm = this.parameters.add ( "0", Parameter.WRITEONLY, Parameter.STRING );
    String par = this.app.getFILE_SPEC ( );
    if ( par != null && par.trim ( ).length ( ) > 0 )
    {
      if ( par.indexOf ( ";" ) > -1 )
      {
        par = par.substring ( 0, par.indexOf ( ";" ) );
      }
    }
    parm.set ( par );
  }


  /**
   *
   */
  protected void createParameters ( )
  {
    this.createParameters ( new ParameterSet ( ) );
  }


  /**
   *
   */
  public ParameterSet run ( )
  {
    this.process ( );
    return this.getParameters ( );
  }


  /**
   *
   */
  public void process (  )
  { 
    String fileName = this.parameters.getString ( 0 );
    String extension = null;
    if ( fileName.indexOf ( "*" ) > -1 )
    {
      extension = fileName.substring ( fileName.indexOf ( "." ) );
    }
    if ( extension == null )
    {
      this.dManager.deleteFromInMemoryRegistry ( fileName );
    }
    else
    {
      this.dManager.deleteFromInMemoryRegistry ( extension );
    }
  }
  


  /**
   * IRegisteredObject implementation
   */
  public void execute ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "DELETE_FIX_FILES" );

    if ( ps != null && ps.size ( ) > 0 )
    {
      this.createParameters ( ps );
    }
    else
    {
      this.createParameters ( );
    }
    this.parameters.setParameter ( 0, Parameter.WRITEONLY, Parameter.STRING );


//System.out.println ( "\r\nBefore DELETE_FIX_FILES:\r\n" + this.parameters.getXml ( ) );
    this.process ( );
//System.out.println ( "\r\nAfter  DELETE_FIX_FILES:\r\n" + this.parameters.getXml ( ) );
//    this.parameters.copy ( ps );
  }
}
