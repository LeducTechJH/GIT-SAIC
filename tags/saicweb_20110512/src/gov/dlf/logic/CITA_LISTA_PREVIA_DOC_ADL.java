package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import javax.xml.ws.WebServiceException;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;

import gov.pr.adsef.*;

import java.util.Calendar;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CITA_LISTA_PREVIA_DOC_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;

  SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");

  public Date startDate = null;

  public Date duration = null;

  public Date endDate = null;

  public String ss = null;


  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------



  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------


  public DataStore CALENDARIO2_DSD = null;

  public double CALENDARIO2_ID = 0;

  public double CALENDARIO2_STATUS_CODE = 0;

  WsPeriodos service = null;

  ObjectFactory factory = new ObjectFactory ( );

  InformacionCitas citasObj = factory.createInformacionCitas();

  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------





  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   *
   * @param __app
   * @return
   */
  public static CITA_LISTA_PREVIA_DOC_ADL get ( RallyApplication __app )
  {
    CITA_LISTA_PREVIA_DOC_ADL adl = new CITA_LISTA_PREVIA_DOC_ADL ( );
    __app.register ( adl, "CITA_LISTA_PREVIA_DOC_ADL" );
    __app.setADL ( CITA_LISTA_PREVIA_DOC_ADL.class, adl );
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CITA_LISTA_PREVIA_DOC_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CITA_LISTA_PREVIA_DOC_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   *
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CITA_LISTA_PREVIA_DOC_ADL" );
    if ( rObj != null && rObj instanceof CITA_LISTA_PREVIA_DOC_ADL )
    {
      this.app.setADL ( CITA_LISTA_PREVIA_DOC_ADL.class, ( CITA_LISTA_PREVIA_DOC_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CITA_LISTA_PREVIA_DOC_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep )
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      default:
      {
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CITA_LISTA_PREVIA_DOC_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {


	  try
	  {
		  service = new WsPeriodos();
	  }
	  catch (WebServiceException ex)
	  {

		  this.app.setError("-1", "No se pudo accesar el sistema de SisCal");

		  this.doReturn();
		  return;

	  }

	  this.ss = (new BigDecimal(Double.toString(this.app.SS_JEFE_FAMILIA_GBL))).toPlainString();


	  WsPeriodosSoap soap = service.getWsPeriodosSoap();
	  //citasObj = soap.buscarPeriodos(Double.toString ( this.app.ID_TECNICO_GBL ), Double.toString( this.app.SS_JEFE_FAMILIA_GBL ), null, null);
	  //citasObj = soap.buscarPeriodos( "tecnicotest@gmail.com", ss, null, null);
	  citasObj = soap.buscarPeriodos( this.app.USERNAME, ss, null, null);

	  if ( Compare.equals( this.citasObj, null ) )
	  {
		  this.app.setError("-1", "No hay citas pautadas.");

		  this.doReturn();
		  return;
	  }

	  return;

  }

  @SuppressWarnings("deprecation")
protected void step1 ( ParameterSet ps )

  {


	CALENDARIO2_DSD = this.dm.create("CALENDARIO2_DSD");

	CALENDARIO2_ID = CALENDARIO2_DSD.getId();

	CALENDARIO2_STATUS_CODE = RallyDataStoreException.getDefault ( );

	Iterator<PeriodosCitas> citasIter = citasObj.getCitasPeriodos().getPeriodosCitas().iterator();

	for (; citasIter.hasNext();)
	{


		PeriodosCitas citas = citasIter.next();


		try
		{
			//double durationTime = 0.0;
			startDate = formatter.parse( citas.getHoraComienzo() );
			endDate = formatter.parse( citas.getHoraFinalizacion());

		} catch (ParseException e)
		{

			System.out.print(e.toString());
			e.printStackTrace();
		}

/*		duration = new Date();


		duration.setTime( ( endDate.getTime() - startDate.getTime() ) );
*/		/*
		try
		{
			duration = formatter.parse("1/01/2010 " + Integer.toString(duration.getHours()) + ":" +  Integer.toString(duration.getMinutes()) + ":00 AM" );
		}
		catch (ParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
 		*/

		long elapsed = endDate.getTime() - startDate.getTime();
		DateFormat df = new SimpleDateFormat("HHmm");
		Calendar cal = Calendar.getInstance();
		int year=cal.get(Calendar.YEAR);
		df.setTimeZone(TimeZone.getTimeZone("GMT"));
		cal.setTime(new Date(elapsed));
		String elapsedHHMM = df.format(cal.getTime());
		String FECHA_CHAR = "0101" + Integer.toString(year) + elapsedHHMM;

		CALENDARIO2_STATUS_CODE = this.dm.reset( CALENDARIO2_ID );

	    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "ID_TECNICO", this.app.ID_TECNICO_GBL );
	    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0", startDate );
	    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

	    CALENDARIO2_STATUS_CODE  = this.dm.limitQueryFromBuffer ( CALENDARIO2_ID );
	    CALENDARIO2_STATUS_CODE  = this.dm.retrieve ( CALENDARIO2_ID );

	    CALENDARIO2_STATUS_CODE  = this.dm.firstRow ( CALENDARIO2_ID );

	    if ( ! Compare.equals ( CALENDARIO2_STATUS_CODE, 0 ) ) 
	    {		
			this.dm.setField(CALENDARIO2_DSD, "ID_TECNICO", this.app.ID_TECNICO_GBL);
			this.dm.setField(CALENDARIO2_DSD, "COD_SERVICIO", citas.getCodigoActividad() );
			this.dm.setField(CALENDARIO2_DSD, "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL);
			this.dm.setField(CALENDARIO2_DSD, "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL);
			this.dm.setField(CALENDARIO2_DSD, "DURACION_HORA_MIN_CONTACTO", RallySpanishDatesParser.parseDateString ( FECHA_CHAR, "DDMMYYYYHH24MI" ));
			this.dm.setField(CALENDARIO2_DSD, "FCH_ACTIVIDAD_HORA_MIN_CONTAC0", startDate);
			this.dm.setField(CALENDARIO2_DSD, "DSC_EVENTO", citas.getEtapaDescripcion());
			this.dm.setField(CALENDARIO2_DSD, "COD_RAZON", citas.getCodigoEtapa());
			this.dm.setField(CALENDARIO2_DSD, "STS_ACTIVIDAD", " ");
			this.dm.setField(CALENDARIO2_DSD, "RMO_OFICINA", this.app.RMO_GBL );
			CALENDARIO2_STATUS_CODE = this.dm.insertRow( CALENDARIO2_ID );
			this.dm.dbCommit();
	    }
	    else // update the calendar row with downloaded data 
	    {
			//this.dm.setField(CALENDARIO2_DSD, "ID_TECNICO", this.app.ID_TECNICO_GBL);
			this.dm.setField(CALENDARIO2_DSD, "COD_SERVICIO", citas.getCodigoActividad() );
			this.dm.setField(CALENDARIO2_DSD, "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL);
			this.dm.setField(CALENDARIO2_DSD, "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL);
			this.dm.setField(CALENDARIO2_DSD, "DURACION_HORA_MIN_CONTACTO", RallySpanishDatesParser.parseDateString ( FECHA_CHAR, "DDMMYYYYHH24MI" ));
			this.dm.setField(CALENDARIO2_DSD, "FCH_ACTIVIDAD_HORA_MIN_CONTAC0", startDate);
			this.dm.setField(CALENDARIO2_DSD, "DSC_EVENTO", citas.getEtapaDescripcion());
			this.dm.setField(CALENDARIO2_DSD, "COD_RAZON", citas.getCodigoEtapa());
			//this.dm.setField(CALENDARIO2_DSD, "STS_ACTIVIDAD", " ");
			//this.dm.setField(CALENDARIO2_DSD, "RMO_OFICINA", this.app.RMO_GBL );
			CALENDARIO2_STATUS_CODE = this.dm.update( CALENDARIO2_ID );
			this.dm.dbCommit();
	    	
	    }

	}


    CITAS_PKT.exec ( this.app );
    return;

  }

}





/* ---------------------------------------------------------------------



procedure CITA_LISTA_PREVIA_DOC_ADL;

begin

         CALL CITAS_PKT;
{        CALL LISTA_VERIFICACION_PKT;
         IF CONTESTACION = 'S'
            THEN BEGIN
            CALL REPORT_9_21_PKT;
            END;}
end;






--------------------------------------------------------------------- */
