package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class AUTORI_UPD_DB_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;



  public String TMP = null;

  public Date NLD = null;

  public DataStore RR_INSERT_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).TMP = value.getString ( );
  }  

  
  /**  */
  public static void setNLD  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).NLD = value.getDate ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static Date getNLD  ( RallyApplication __app )
  {
    return ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).NLD;
  }


  /**  */
  public static void setNLD  ( RallyApplication __app, Date value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).NLD = value;
  }


  /**  */
  public static void setNLD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).NLD = ( Date ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_DSD  ( RallyApplication __app )
  {
    return ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RR_INSERT_DSD;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RR_INSERT_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RR_INSERT_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORI_UPD_DB_ADL ) __app.getADL ( AUTORI_UPD_DB_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static AUTORI_UPD_DB_ADL get ( RallyApplication __app )
  {
    AUTORI_UPD_DB_ADL adl = new AUTORI_UPD_DB_ADL ( );
    __app.register ( adl, "AUTORI_UPD_DB_ADL" );
    __app.setADL ( AUTORI_UPD_DB_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    AUTORI_UPD_DB_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    AUTORI_UPD_DB_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "AUTORI_UPD_DB_ADL" );
    if ( rObj != null && rObj instanceof AUTORI_UPD_DB_ADL )
    {
      this.app.setADL ( AUTORI_UPD_DB_ADL.class, ( AUTORI_UPD_DB_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "AUTORI_UPD_DB_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "AUTORI_UPD_DB_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    RR_INSERT_DSD = this.dm.create ( "RR_INSERT_DSD" );
    RID = RR_INSERT_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 0, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.reset ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 1, RCD );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_IDENTIFICADO", this.app.FECHA_IDENTIFICADO_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "ACCION", this.app.ACCION_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "DESDE", this.app.GBL_DESDE );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "HASTA", this.app.GBL_HASTA );
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 2, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.firstRow ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 3, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "STATUS", this.app.form ( "RETRO_AUTORI2_FR" ).getStringItem ( "STRR" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_STATUS", this.app.SYSTEM_DATE );

    RCD  = this.dm.update ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 4, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.dbCommit ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 5, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    RCD  = this.dm.dbClose ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 6, RCD );
      this.doReturn ( );
      return; 
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure autori_upd_db_adl;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        TMP     :       CHAR(7);
        NLD     :       DATE;

set_trace();

DB_OPEN(RR_INSERT_DSD, RID, RCD);
        IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_RESET (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM    :=      SS_JEFE_FAMILIA_GBL;
RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV   :=      SS_JEFE_SERVICIO_GBL;
RR_INSERT_DSD.COD_SERVICIO              :=      COD_SERV_GBL;
RR_INSERT_DSD.FECHA_IDENTIFICADO        :=      FECHA_IDENTIFICADO_GBL;
RR_INSERT_DSD.ACCION                    :=      ACCION_GBL;
RR_INSERT_DSD.DESDE                     :=      GBL_DESDE;
RR_INSERT_DSD.HASTA                     :=      GBL_HASTA;
RR_INSERT_DSD.RMO_OFICINA               :=      RMO_GBL;

DB_QUERY (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_GET_FIRST(RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        SET_FAILURE();
                        RETURN;
                END;

RR_INSERT_DSD.status            :=      RETRO_AUTORI2_FR.strr;
RR_INSERT_DSD.FECHA_STATUS      :=      SYSTEM_DATE;
DB_UPDATE (RID,RCD);
        IF (RCD <> 0) THEN
        BEGIN
                ERROR (RCD);
                SET_FAILURE();
                RETURN;
        END;

DB_COMMIT (RCD);
        IF (RCD <> 0) THEN
        BEGIN
                ERROR (RCD);
                SET_FAILURE();
                RETURN;
        END;

DB_CLOSE (RID,RCD);
        IF (RCD <> 0) THEN
        BEGIN
                ERROR (RCD);
                RETURN;
        END;

set_notrace();
    



--------------------------------------------------------------------- */
