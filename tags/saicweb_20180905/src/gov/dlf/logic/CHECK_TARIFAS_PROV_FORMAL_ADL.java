package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.text.DecimalFormat;
import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_TARIFAS_PROV_FORMAL_ADL
extends ADL
{
	// -------------------------------------------------------------------
	// ----------   Class Attributes   -----------------------------------

	/**  */
	public static boolean staticCall = true;

	public double OPEN_ID = 0;

	public double STATUS_ID = 0;

	public double OPEN_ID1 = 0;

	public double STATUS_ID1 = 0;

	public DataStore CONTRATO_CUIDO_DSD = null;

	public DataStore PROVEEDORES_TBL_DSD = null;

	// -------------------------------------------------------------------
	// ----------   Instance Attributes   --------------------------------

	/**  */
	public SAIC_DMQ_ORA_Application app;
	/**  */
	public RallyDataManager dm = null;



	// -------------------------------------------------------------------
	// ----------   Instance Condition Attributes   ----------------------



	// -------------------------------------------------------------------
	// ----------   Instance Export Attributes   -------------------------





	// -------------------------------------------------------------------
	// ----------   Instance Attributes' Access Methods   ----------------





	// -------------------------------------------------------------------
	// ----------   Methods   --------------------------------------------

	/**
	 * 
	 * @param __app
	 * @return
	 */
	public static CHECK_TARIFAS_PROV_FORMAL_ADL get ( RallyApplication __app )
	{
		CHECK_TARIFAS_PROV_FORMAL_ADL adl = new CHECK_TARIFAS_PROV_FORMAL_ADL ( );
		__app.register ( adl, "CHECK_TARIFAS_PROV_FORMAL_ADL" );
		__app.setADL ( CHECK_TARIFAS_PROV_FORMAL_ADL.class, adl ); 
		adl.setApplication ( __app );
		return adl;
	}


	/**
	 *
	 * @param __app
	 * @param ps
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app, ParameterSet ps )
	{
		CHECK_TARIFAS_PROV_FORMAL_ADL.get ( __app ).process ( ps );
	}


	/**
	 *
	 * @param __app
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app )
	{
		ParameterSet ps = null;
		CHECK_TARIFAS_PROV_FORMAL_ADL.exec ( __app, ps );
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param __app
	 */
	public void setApplication ( RallyApplication __app )
	{
		this.app = ( SAIC_DMQ_ORA_Application ) __app;
		if ( this.app != null )
		{
			this.dm = ( RallyDataManager ) this.app.getDataManager ( );
		}
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param parms
	 */
	public void execute ( ParameterSet parms )
	{
		this.process ( parms );
	}




	/**
	 *
	 */
	protected void doReturn ( )
	{
		this.unregister ( );
	}


	/**
	 *
	 */
	public void unregister ( )
	{
		this.app.unregister ( this );
		IRegisteredObject rObj = this.app.get ( "CHECK_TARIFAS_PROV_FORMAL_ADL" );
		if ( rObj != null && rObj instanceof CHECK_TARIFAS_PROV_FORMAL_ADL )
		{
			this.app.setADL ( CHECK_TARIFAS_PROV_FORMAL_ADL.class, ( CHECK_TARIFAS_PROV_FORMAL_ADL ) rObj );
		}
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param ps
	 */
	protected void process ( ParameterSet ps )
	{
		Debug.println ( Debug.TRACE, "CHECK_TARIFAS_PROV_FORMAL_ADL Step " + this.currentStep );
		super.process ( ps );
		switch ( this.currentStep ) 
		{
		case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
		default: 
		{ 
			this.currentStep = 0;
			Debug.println ( Debug.TRACE, "CHECK_TARIFAS_PROV_FORMAL_ADL ended" );
			this.unregister ( );
			break;
		}
		}
		if ( this.currentStep > 0 ) this.app.goOn ( );
	}
	protected void step0 ( ParameterSet ps )
	{
		CONTRATO_CUIDO_DSD = this.dm.create ( "CONTRATO_CUIDO_DSD" );
		OPEN_ID = CONTRATO_CUIDO_DSD.getId ( );
		STATUS_ID = RallyDataStoreException.getDefault ( );
		PROVEEDORES_TBL_DSD = this.dm.create ( "PROVEEDORES_TBL_DSD" );
		OPEN_ID1 = PROVEEDORES_TBL_DSD.getId ( );
		STATUS_ID1 = RallyDataStoreException.getDefault ( );
		if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
		{
			this.app.setError ( 0, STATUS_ID );
		}

		STATUS_ID  = this.dm.reset ( OPEN_ID );

		this.dm.setField ( this.dm.get ( "CONTRATO_CUIDO_DSD" ), "ID_PROVEEDOR", this.app.form ( "CONTRATO_CUIDO_FRM" ).getDoubleItem ( "ID_PROVEEDOR" ));
		this.dm.setField ( this.dm.get ( "CONTRATO_CUIDO_DSD" ), "SSJS", this.app.form ( "CONTRATO_CUIDO_FRM" ).getDoubleItem ( "SSJS" ));
		this.dm.setField ( this.dm.get ( "CONTRATO_CUIDO_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "CONTRATO_CUIDO_FRM" ).getDoubleItem ( "SSN_MENOR" ));
		STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
		STATUS_ID  = this.dm.retrieve ( OPEN_ID );
		STATUS_ID  = this.dm.firstRow ( OPEN_ID );
		if (Compare.equals(STATUS_ID, 0))
		{
			STATUS_ID1  = this.dm.reset ( OPEN_ID1 );

			this.dm.setField ( this.dm.get ( "PROVEEDORES_TBL_DSD" ), "ID_PROVEEDOR", this.app.form ( "CONTRATO_CUIDO_FRM" ).getDoubleItem ( "ID_PROVEEDOR" ));

			STATUS_ID1  = this.dm.limitQueryFromBuffer ( OPEN_ID1 );
			STATUS_ID1  = this.dm.retrieve ( OPEN_ID1 );
			STATUS_ID1  = this.dm.firstRow ( OPEN_ID1 );
			if (Compare.equals(STATUS_ID1, 0))
			{
				if(Compare.equals( this.dm.getFieldString(this.dm.get ( "PROVEEDORES_TBL_DSD" ),"TIPO_PROVEEDOR"),"CENTRO CUIDO"))
				{
					if(Compare.gt(this.app.form("CONTRATO_NINO_FRM").getDoubleItem("TIEMPO_COMP"), 0)&&Compare.gt(this.app.form("CONTRATO_NINO_FRM").getDoubleItem("TIEMPO_PART"), 0))
					{
						this.app.setError("0", "Proveedor informal debe tener una sola tarifa bajo contrato.");
						this.app.ACCESS_STATUS_GBL = "FAILURE";
					}
				}
			}
		}
		return;
	}
}