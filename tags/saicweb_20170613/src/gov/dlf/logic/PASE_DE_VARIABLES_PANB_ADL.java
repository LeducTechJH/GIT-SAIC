package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class PASE_DE_VARIABLES_PANB_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double PRESUPUESTO_LOC = 0;

  public double PRESUPUESTO_LOC_STAT = 0;



  public DataStore PRESUPUESTO_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setPRESUPUESTO_LOC  ( RallyApplication __app, Parameter value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC = value.getDouble ( );
  }  

  
  /**  */
  public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, Parameter value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_STAT = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getPRESUPUESTO_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_DSD;
  }


  /**  */
  public static void setPRESUPUESTO_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_DSD = value;
  }


  /**  */
  public static void setPRESUPUESTO_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getPRESUPUESTO_LOC  ( RallyApplication __app )
  {
    return ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC;
  }


  /**  */
  public static Double getPRESUPUESTO_LOCDouble ( RallyApplication __app )
  {
    return new Double ( ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC );
  }


  /**  */
  public static void setPRESUPUESTO_LOC  ( RallyApplication __app, double value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC = value;
  }


  /**  */
  public static void setPRESUPUESTO_LOC  ( RallyApplication __app, Object value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getPRESUPUESTO_LOC_STAT  ( RallyApplication __app )
  {
    return ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_STAT;
  }


  /**  */
  public static Double getPRESUPUESTO_LOC_STATDouble ( RallyApplication __app )
  {
    return new Double ( ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_STAT );
  }


  /**  */
  public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, double value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_STAT = value;
  }


  /**  */
  public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, Object value )
  {
    ( ( PASE_DE_VARIABLES_PANB_ADL ) __app.getADL ( PASE_DE_VARIABLES_PANB_ADL.class ) ).PRESUPUESTO_LOC_STAT = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static PASE_DE_VARIABLES_PANB_ADL get ( RallyApplication __app )
  {
    PASE_DE_VARIABLES_PANB_ADL adl = new PASE_DE_VARIABLES_PANB_ADL ( );
    __app.register ( adl, "PASE_DE_VARIABLES_PANB_ADL" );
    __app.setADL ( PASE_DE_VARIABLES_PANB_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    PASE_DE_VARIABLES_PANB_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    PASE_DE_VARIABLES_PANB_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "PASE_DE_VARIABLES_PANB_ADL" );
    if ( rObj != null && rObj instanceof PASE_DE_VARIABLES_PANB_ADL )
    {
      this.app.setADL ( PASE_DE_VARIABLES_PANB_ADL.class, ( PASE_DE_VARIABLES_PANB_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "PASE_DE_VARIABLES_PANB_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "PASE_DE_VARIABLES_PANB_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    GET_NOMBRE_JEFE_DET_PANB_ADL.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {

    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANB" ) ) 
    {
      this.app.form ( "DETERMINACION_PANB_FR" ).setItem ( "NUCLEO", DETERMINAR_ELEGIBILIDAD_PANB.getUNIDAD ( this.app )  );
      this.app.form ( "DETERMINACION_PANB_FR" ).setItem ( "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PANB.getBENEFICIO ( this.app )  );
      this.app.form ( "DETERMINACION_PANB_FR" ).setItem ( "INELEGIBLE_BONO", DETERMINAR_ELEGIBILIDAD_PANB.getINELEGIBLE_BONO ( this.app )  );
      this.app.form ( "DETERMINACION_PANB_FR" ).setItem ( "ELEGIBLE_BONO", DETERMINAR_ELEGIBILIDAD_PANB.getELEGIBLE_BONO ( this.app )  );
      this.app.form ( "DETERMINACION_PANB_FR" ).setItem ( "FECHA_ELEG_BONO", this.app.FCH_SOLIC_SERV_GBL  );
    }
    if ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "S" ) ) 
    {
      PRESUPUESTO_LOC_DSD = this.dm.create ( "PRESUPUESTO_LOC_DSD" );
      PRESUPUESTO_LOC = PRESUPUESTO_LOC_DSD.getId ( );
      PRESUPUESTO_LOC_STAT = RallyDataStoreException.getDefault ( );

      PRESUPUESTO_LOC_STAT  = this.dm.reset ( PRESUPUESTO_LOC );

      this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );

      PRESUPUESTO_LOC_STAT  = this.dm.limitQueryFromBuffer ( PRESUPUESTO_LOC );
      PRESUPUESTO_LOC_STAT  = this.dm.retrieve ( PRESUPUESTO_LOC );

      PRESUPUESTO_LOC_STAT  = this.dm.firstRow ( PRESUPUESTO_LOC );

      if ( Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
      {
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MIEMBROS", DETERMINAR_ELEGIBILIDAD_PANB.getUNIDAD ( this.app ) );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PANB.getBENEFICIO ( this.app ) );

        boolean tempBool = this.dm.getLogEnabled ( );          
        this.dm.setLogEnabled ( false );
        PRESUPUESTO_LOC_STAT  = this.dm.update ( PRESUPUESTO_LOC );
        this.dm.setLogEnabled ( tempBool );
      }
      else
      {
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MIEMBROS", DETERMINAR_ELEGIBILIDAD_PANB.getUNIDAD ( this.app ) );
        this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PANB.getBENEFICIO ( this.app ) );

        boolean tempBool1 = this.dm.getLogEnabled ( );          
        this.dm.setLogEnabled ( false );
        PRESUPUESTO_LOC_STAT  = this.dm.insertRow ( PRESUPUESTO_LOC );
        this.dm.setLogEnabled ( tempBool1 );
      }
      if ( ! Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
      {
        this.app.setError ( 0, PRESUPUESTO_LOC_STAT );
      }

      PRESUPUESTO_LOC_STAT  = this.dm.dbCommit ( );
      PRESUPUESTO_LOC_STAT  = this.dm.dbClose ( PRESUPUESTO_LOC );

    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE PASE_DE_VARIABLES_PANB_ADL;

VAR
  presupuesto_loc        : number;
  presupuesto_loc_stat   : number;

BEGIN
SET_TRACE();
     CALL GET_NOMBRE_JEFE_DET_PANB_ADL;

                IF (SUBSTR(COD_SERV_GBL,0,4) = 'PANB')
                THEN
                  BEGIN
                    DETERMINACION_PANB_FR.NUCLEO := DETERMINAR_ELEGIBILIDAD_PANB
.UNIDAD;
                    DETERMINACION_PANB_FR.BENEFICIO :=DETERMINAR_ELEGIBILIDAD_PA
NB.BENEFICIO; 
                    DETERMINACION_PANB_FR.INELEGIBLE_BONO := DETERMINAR_ELEGIBIL
IDAD_PANB.INELEGIBLE_BONO;
                    DETERMINACION_PANB_FR.ELEGIBLE_BONO := DETERMINAR_ELEGIBILID
AD_PANB.ELEGIBLE_BONO;
                    DETERMINACION_PANB_FR.FECHA_ELEG_BONO := FCH_SOLIC_SERV_GBL;
                  END;
   
   {Crea Presupuesto}            
        IF (DETERMINACION_FINAL_GBL = 'S')  THEN
                BEGIN
                     db_OPEN(presupuesto_loc_dsd,presupuesto_loc,presupuesto_loc
_stat);
                     db_reset(presupuesto_loc,presupuesto_loc_stat);
                     presupuesto_loc_dsd.seguro_social_jefe_serv:=ss_serv_gbl;
                     presupuesto_loc_dsd.cod_servicio:=cod_serv_gbl;
                     db_query(presupuesto_loc,presupuesto_loc_stat); 
                     db_get_first(presupuesto_loc,presupuesto_loc_stat); 
                     if presupuesto_loc_stat = 0 then
                        BEGIN
                          presupuesto_loc_dsd.seguro_social_jefe_fam:=ss_jefe_gb
l;
                          presupuesto_loc_dsd.seguro_social_jefe_serv:=ss_serv_g
bl;
                          presupuesto_loc_dsd.cod_servicio:=cod_serv_gbl;
                          presupuesto_loc_dsd.rmo_oficina := rmo_gbl;  

                          PRESUPUESTO_LOC_DSD.MIEMBROS := DETERMINAR_ELEGIBILIDA
D_PANB.UNIDAD;
                          PRESUPUESTO_LOC_DSD.BENEFICIO := DETERMINAR_ELEGIBILID
AD_PANB.BENEFICIO;
                      
                          db_update(presupuesto_loc,presupuesto_loc_stat);
                        END;
                     ELSE

                        BEGIN
                          presupuesto_loc_dsd.seguro_social_jefe_fam:=ss_jefe_gb
l;
                          presupuesto_loc_dsd.seguro_social_jefe_serv:=ss_serv_g
bl;
                          presupuesto_loc_dsd.cod_servicio:=cod_serv_gbl;
                          presupuesto_loc_dsd.rmo_oficina := rmo_gbl;  

                          PRESUPUESTO_LOC_DSD.MIEMBROS := DETERMINAR_ELEGIBILIDA
D_PANB.UNIDAD;
                          PRESUPUESTO_LOC_DSD.BENEFICIO := DETERMINAR_ELEGIBILID
AD_PANB.BENEFICIO;
                      
                          db_insert(presupuesto_loc,presupuesto_loc_stat);
                        END;
                     if presupuesto_loc_stat <> 0 then
                        error(presupuesto_loc_stat);
                        db_commit(presupuesto_loc_stat);
                        db_close(presupuesto_loc,presupuesto_loc_stat);
                END;
        SET_NOTRACE();
END;

    



--------------------------------------------------------------------- */
