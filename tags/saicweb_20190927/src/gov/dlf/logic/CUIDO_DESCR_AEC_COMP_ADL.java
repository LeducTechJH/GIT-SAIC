package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CUIDO_DESCR_AEC_COMP_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double FIX_ID = 0;

  public double STAT_CODE = 0;



  public DataStore CLASSIF_AEC_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setFIX_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).FIX_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).STAT_CODE = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getCLASSIF_AEC_RO_DSD  ( RallyApplication __app )
  {
    return ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).CLASSIF_AEC_RO_DSD;
  }


  /**  */
  public static void setCLASSIF_AEC_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).CLASSIF_AEC_RO_DSD = value;
  }


  /**  */
  public static void setCLASSIF_AEC_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).CLASSIF_AEC_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getFIX_ID  ( RallyApplication __app )
  {
    return ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).FIX_ID;
  }


  /**  */
  public static Double getFIX_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).FIX_ID );
  }


  /**  */
  public static void setFIX_ID  ( RallyApplication __app, double value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).FIX_ID = value;
  }


  /**  */
  public static void setFIX_ID  ( RallyApplication __app, Object value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).FIX_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTAT_CODE  ( RallyApplication __app )
  {
    return ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).STAT_CODE;
  }


  /**  */
  public static Double getSTAT_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).STAT_CODE );
  }


  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, double value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).STAT_CODE = value;
  }


  /**  */
  public static void setSTAT_CODE  ( RallyApplication __app, Object value )
  {
    ( ( CUIDO_DESCR_AEC_COMP_ADL ) __app.getADL ( CUIDO_DESCR_AEC_COMP_ADL.class ) ).STAT_CODE = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CUIDO_DESCR_AEC_COMP_ADL get ( RallyApplication __app )
  {
    CUIDO_DESCR_AEC_COMP_ADL adl = new CUIDO_DESCR_AEC_COMP_ADL ( );
    __app.register ( adl, "CUIDO_DESCR_AEC_COMP_ADL" );
    __app.setADL ( CUIDO_DESCR_AEC_COMP_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CUIDO_DESCR_AEC_COMP_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CUIDO_DESCR_AEC_COMP_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CUIDO_DESCR_AEC_COMP_ADL" );
    if ( rObj != null && rObj instanceof CUIDO_DESCR_AEC_COMP_ADL )
    {
      this.app.setADL ( CUIDO_DESCR_AEC_COMP_ADL.class, ( CUIDO_DESCR_AEC_COMP_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CUIDO_DESCR_AEC_COMP_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CUIDO_DESCR_AEC_COMP_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    CLASSIF_AEC_RO_DSD = this.dm.create ( "CLASSIF_AEC_RO_DSD" );
    FIX_ID = CLASSIF_AEC_RO_DSD.getId ( );
    STAT_CODE = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STAT_CODE, 0 ) ) 
    {
      this.app.setError ( 0, STAT_CODE );

      STAT_CODE  = this.dm.rollBack ( );
      this.doReturn ( );
      return; 
    }

    STAT_CODE  = this.dm.reset ( FIX_ID );

    this.dm.setField ( this.dm.get ( "CLASSIF_AEC_RO_DSD" ), "COD_ID", this.app.form ( "CUIDO_FRM" ).getStringItem ( "FLG_AEC_CLASSI" ));

    STAT_CODE  = this.dm.limitQueryFromBuffer ( FIX_ID );
    STAT_CODE  = this.dm.retrieve ( FIX_ID );

    STAT_CODE  = this.dm.firstRow ( FIX_ID );

    if ( ! Compare.equals ( STAT_CODE, 0 ) ) 
    {
      this.app.setError ( 1, STAT_CODE );

      STAT_CODE  = this.dm.rollBack ( );
      this.doReturn ( );
      return; 
    }
    this.app.form ( "CUIDO_FRM" ).setItem ( "DSC_AEC_CLAS", this.dm.getFieldString ( this.dm.get ( "CLASSIF_AEC_RO_DSD" ), "DSC_CORTA" )  );

    STAT_CODE  = this.dm.rollBack ( );
    STAT_CODE  = this.dm.dbClose ( FIX_ID );

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE SERV_NUCLEO_SERV_DESCR_AEC_COMP_ADL;

VAR
        FIX_ID          :       NUMBER;
        STAT_CODE       :       NUMBER;

BEGIN
SET_TRACE();
        DB_OPEN (CLASSIF_AEC_RO_DSD, FIX_ID, STAT_CODE);
        IF (STAT_CODE <> 0) THEN
        BEGIN
                ERROR (STAT_CODE);
                DB_ROLLBACK (STAT_CODE);
                RETURN;
        END;                              

        DB_RESET (FIX_ID, STAT_CODE);

        CLASSIF_AEC_RO_DSD.COD_ID := SERV_NUCLEO_SERV_FRM.FLG_AEC_CLASSI;
        
        DB_QUERY (FIX_ID, STAT_CODE);

        DB_GET_FIRST (FIX_ID, STAT_CODE);
        IF (STAT_CODE <> 0) THEN
        BEGIN
                ERROR (STAT_CODE);
                DB_ROLLBACK (STAT_CODE);
                RETURN;
        END;                              
        
        SERV_NUCLEO_SERV_FRM.DSC_AEC_CLAS := CLASSIF_AEC_RO_DSD.DSC_CORTA;

        DB_ROLLBACK (STAT_CODE);

        DB_CLOSE (FIX_ID, STAT_CODE);
SET_NOTRACE();
END;
    



--------------------------------------------------------------------- */
