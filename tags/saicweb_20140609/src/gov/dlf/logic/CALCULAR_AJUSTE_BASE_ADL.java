package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CALCULAR_AJUSTE_BASE_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double AJUSTE_NULO = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setAJUSTE_NULO  ( RallyApplication __app, Parameter value )
  {
    ( ( CALCULAR_AJUSTE_BASE_ADL ) __app.getADL ( CALCULAR_AJUSTE_BASE_ADL.class ) ).AJUSTE_NULO = value.getDouble ( );
  }  
    



  /**  */
  public static double getAJUSTE_NULO  ( RallyApplication __app )
  {
    return ( ( CALCULAR_AJUSTE_BASE_ADL ) __app.getADL ( CALCULAR_AJUSTE_BASE_ADL.class ) ).AJUSTE_NULO;
  }


  /**  */
  public static Double getAJUSTE_NULODouble ( RallyApplication __app )
  {
    return new Double ( ( ( CALCULAR_AJUSTE_BASE_ADL ) __app.getADL ( CALCULAR_AJUSTE_BASE_ADL.class ) ).AJUSTE_NULO );
  }


  /**  */
  public static void setAJUSTE_NULO  ( RallyApplication __app, double value )
  {
    ( ( CALCULAR_AJUSTE_BASE_ADL ) __app.getADL ( CALCULAR_AJUSTE_BASE_ADL.class ) ).AJUSTE_NULO = value;
  }


  /**  */
  public static void setAJUSTE_NULO  ( RallyApplication __app, Object value )
  {
    ( ( CALCULAR_AJUSTE_BASE_ADL ) __app.getADL ( CALCULAR_AJUSTE_BASE_ADL.class ) ).AJUSTE_NULO = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CALCULAR_AJUSTE_BASE_ADL get ( RallyApplication __app )
  {
    CALCULAR_AJUSTE_BASE_ADL adl = new CALCULAR_AJUSTE_BASE_ADL ( );
    __app.register ( adl, "CALCULAR_AJUSTE_BASE_ADL" );
    __app.setADL ( CALCULAR_AJUSTE_BASE_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CALCULAR_AJUSTE_BASE_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CALCULAR_AJUSTE_BASE_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CALCULAR_AJUSTE_BASE_ADL" );
    if ( rObj != null && rObj instanceof CALCULAR_AJUSTE_BASE_ADL )
    {
      this.app.setADL ( CALCULAR_AJUSTE_BASE_ADL.class, ( CALCULAR_AJUSTE_BASE_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CALCULAR_AJUSTE_BASE_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CALCULAR_AJUSTE_BASE_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    AJUSTE_NULO = TruncService.setNull ( AJUSTE_NULO  );
    if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_INCORRECTO" ), AJUSTE_NULO ) ) 
    {
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_INCORRECTO", 0  );
    }
    if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" ), AJUSTE_NULO ) ) 
    {
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIO_CALCULADO", 0  );
    }
    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) 
    {
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", MathService.plus ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" ), TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_INCORRECTO" ))   )  );
    }
    else if ( ! Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA" ), "E" )  )
    {
      if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_PAN" ), AJUSTE_NULO ) ) 
      {
        this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", 0  );
      }
      if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "POS_NEG_AJUSTE" ), "+" ) ) 
      {
        this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", MathService.plus ( MathService.plus ( ( MathService.plus ( TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" )) , this.app.CANT_ANCIANO  ) ), TruncService.trunc ( ( MathService.plus ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" ), this.app.CANT_ANCIANO  ) ) * this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_PAN" ))   ), TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_INCORRECTO" ))   )  );
      }
      else
      {
        this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", MathService.plus ( MathService.minus ( ( MathService.plus ( TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" )) , this.app.CANT_ANCIANO  ) ), TruncService.trunc ( ( MathService.plus ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" ), this.app.CANT_ANCIANO  ) ) * this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_PAN" ))   ), TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_INCORRECTO" ))   )  );
      }
    }
    else
    {
      if ( Compare.equals ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_PAN" ), AJUSTE_NULO ) ) 
      {
        this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "AJUSTE_PAN", 0  );
      }
      this.app.form ( "DETERMINAR_RECLAMACION_FR" ).setItem ( "BENEFICIOS_CORRECTOS", MathService.plus ( MathService.plus ( ( MathService.plus ( TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" )) , this.app.CANT_ANCIANO  ) ), TruncService.trunc ( ( MathService.plus ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIO_CALCULADO" ), this.app.CANT_ANCIANO  ) ) * this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_PAN" ))   ), TruncService.trunc ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "AJUSTE_INCORRECTO" ))   )  );
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure calcular_ajuste_base_adl;
VAR     AJUSTE_NULO     : NUMBER;

begin
set_trace();
MAKE_NULL(AJUSTE_NULO);
if DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO = AJUSTE_NULO
THEN
        DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO := 0;

{ENDIF}
if DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO = AJUSTE_NULO
THEN
        DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO := 0;

{ENDIF}

if substr(cod_serv_gbl,0,2) = 'AE'
then
        begin
        determinar_reclamacion_fr.beneficios_correctos := determinar_reclamacion
_fr.beneficio_calculado+
                       trunc(DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO);
        end;
else
 IF DETERMINAR_RECLAMACION_FR.FLG_EMERGENCIA <>'E' THEN
        begin
                IF DETERMINAR_RECLAMACION_FR.AJUSTE_PAN = AJUSTE_NULO
                THEN
                        DETERMINAR_RECLAMACION_FR.AJUSTE_PAN := 0;

                DEBUG_LOG(TO_CHAR(CANT_ANCIANO));
                DEBUG_LOG(TO_CHAR(DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO));
                DEBUG_LOG(TO_CHAR(DETERMINAR_RECLAMACION_FR.AJUSTE_PAN));
{       DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO := TRUNC((DETERMINAR_RECLAMA
CION_FR.BENEFICIO_CALCULADO + CANT_ANCIANO) * DETERMINAR_RECLAMACION_FR.AJUSTE_P
AN);}
               if DETERMINAR_RECLAMACION_FR.POS_NEG_AJUSTE = '+'
               then
                       DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS :=
                       (trunc(DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO)
                               + CANT_ANCIANO) +
                       TRUNC((DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO
                        + CANT_ANCIANO) * DETERMINAR_RECLAMACION_FR.AJUSTE_PAN)+
                       trunc(DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO);
               else
                       DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS :=
                       (trunc(DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO)
                               + CANT_ANCIANO) -
                       TRUNC((DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO
                       + CANT_ANCIANO) * DETERMINAR_RECLAMACION_FR.AJUSTE_PAN)+
                       trunc(DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO);
               {endif}
        end;
        {endif}
        ELSE
        begin
                IF DETERMINAR_RECLAMACION_FR.AJUSTE_PAN = AJUSTE_NULO
                THEN
                        DETERMINAR_RECLAMACION_FR.AJUSTE_PAN := 0;
                DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS :=
                (trunc(DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO)
                      + CANT_ANCIANO) +
                TRUNC((DETERMINAR_RECLAMACION_FR.BENEFICIO_CALCULADO
                     + CANT_ANCIANO) * DETERMINAR_RECLAMACION_FR.AJUSTE_PAN)+
                trunc(DETERMINAR_RECLAMACION_FR.AJUSTE_INCORRECTO);

        end;
         
set_notrace();
end;
    



--------------------------------------------------------------------- */
