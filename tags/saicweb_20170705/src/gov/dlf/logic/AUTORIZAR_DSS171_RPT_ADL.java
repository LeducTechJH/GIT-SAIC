package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class AUTORIZAR_DSS171_RPT_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;

  public double NID = 0;

  public double NCD = 0;



  public String TMP = null;

  public DataStore RR_NOTI_INSERT_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setNID  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNCD  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).TMP = value.getString ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static DataStore getRR_NOTI_INSERT_DSD  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RR_NOTI_INSERT_DSD;
  }


  /**  */
  public static void setRR_NOTI_INSERT_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RR_NOTI_INSERT_DSD = value;
  }


  /**  */
  public static void setRR_NOTI_INSERT_DSD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RR_NOTI_INSERT_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNID  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NID;
  }


  /**  */
  public static Double getNIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NID );
  }


  /**  */
  public static void setNID  ( RallyApplication __app, double value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NID = value;
  }


  /**  */
  public static void setNID  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNCD  ( RallyApplication __app )
  {
    return ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NCD;
  }


  /**  */
  public static Double getNCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NCD );
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, double value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NCD = value;
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, Object value )
  {
    ( ( AUTORIZAR_DSS171_RPT_ADL ) __app.getADL ( AUTORIZAR_DSS171_RPT_ADL.class ) ).NCD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static AUTORIZAR_DSS171_RPT_ADL get ( RallyApplication __app )
  {
    AUTORIZAR_DSS171_RPT_ADL adl = new AUTORIZAR_DSS171_RPT_ADL ( );
    __app.register ( adl, "AUTORIZAR_DSS171_RPT_ADL" );
    __app.setADL ( AUTORIZAR_DSS171_RPT_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    AUTORIZAR_DSS171_RPT_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    AUTORIZAR_DSS171_RPT_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "AUTORIZAR_DSS171_RPT_ADL" );
    if ( rObj != null && rObj instanceof AUTORIZAR_DSS171_RPT_ADL )
    {
      this.app.setADL ( AUTORIZAR_DSS171_RPT_ADL.class, ( AUTORIZAR_DSS171_RPT_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "AUTORIZAR_DSS171_RPT_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "AUTORIZAR_DSS171_RPT_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    RR_NOTI_INSERT_DSD = this.dm.create ( "RR_NOTI_INSERT_DSD" );
    NID = RR_NOTI_INSERT_DSD.getId ( );
    NCD = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( NCD, 0 ) ) 
    {
      this.app.setError ( 0, NCD );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "COD_NOTIFICACION", "N171" );
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "FCH_NOTIFICACION", this.app.SYSTEM_DATE );
    this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    boolean tempBool = this.dm.getLogEnabled ( );          
    this.dm.setLogEnabled ( false );
    
    NCD  = this.dm.insertRow ( NID );

    this.dm.setLogEnabled ( tempBool );
    
    if ( ! Compare.equals ( NCD, 0 ) ) 
    {
      this.app.setError ( 1, NCD );
      this.doReturn ( );
      return; 
    }

    NCD  = this.dm.dbCommit ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 2, RCD );
      this.doReturn ( );
      return; 
    }
    NCD  = this.dm.dbClose ( NID );

    if ( ! Compare.equals ( NCD, 0 ) ) 
    {
      this.app.setError ( 3, NCD );
      this.doReturn ( );
      return; 
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure AUTORIZAR_DSS171_RPT_ADL;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        NID     :       NUMBER;
        NCD     :       NUMBER;
        TMP     :       CHAR(7);

SET_TRACE();

DB_OPEN(RR_NOTI_INSERT_DSD, NID, NCD);
        IF (NCD <> 0)     THEN
                BEGIN
                        ERROR (NCD);
                        RETURN;
                END;

RR_NOTI_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM       :=      ss_jefe_familia_gbl;
RR_NOTI_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV      :=      ss_jefe_servicio_gbl;
RR_NOTI_INSERT_DSD.COD_SERVICIO                 :=      cod_serv_gbl;
RR_NOTI_INSERT_DSD.COD_NOTIFICACION             :=      'N171';
RR_NOTI_INSERT_DSD.FCH_NOTIFICACION             :=      SYSTEM_DATE;
RR_NOTI_INSERT_DSD.RMO_OFICINA                  :=      RMO_GBL;
DB_INSERT(NID,NCD);
IF (NCD <> 0) THEN
  BEGIN
        ERROR (NCD);
        RETURN;
  END;

DB_COMMIT (NCD);
IF (RCD <> 0) THEN
  BEGIN
        ERROR (RCD);
        RETURN;
  END;

DB_CLOSE (NID,NCD);
IF (NCD <> 0) THEN
  BEGIN
        ERROR (NCD);
        RETURN;
  END;

{
RETURN_TO RETROACTIVO_MAIN_MENU;
}
SET_NOTRACE();
    



--------------------------------------------------------------------- */
