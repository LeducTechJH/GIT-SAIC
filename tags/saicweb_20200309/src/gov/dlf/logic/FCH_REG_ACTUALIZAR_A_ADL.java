package gov.dlf.logic;


import gov.dlf.facade.*;
import java.util.*;

import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class FCH_REG_ACTUALIZAR_A_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_ID = 0;



  public Date FCH_REG = null;

  public DataStore REG_EMPLEO_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).STATUS_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setFCH_REG  ( RallyApplication __app, Parameter value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).FCH_REG = value.getDate ( );
  }  
    


  /**  */
  public static Date getFCH_REG  ( RallyApplication __app )
  {
    return ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).FCH_REG;
  }


  /**  */
  public static void setFCH_REG  ( RallyApplication __app, Date value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).FCH_REG = value;
  }


  /**  */
  public static void setFCH_REG  ( RallyApplication __app, Object value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).FCH_REG = ( Date ) value;
  }



  /**  */
  public static DataStore getREG_EMPLEO_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).REG_EMPLEO_LOC_DSD;
  }


  /**  */
  public static void setREG_EMPLEO_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).REG_EMPLEO_LOC_DSD = value;
  }


  /**  */
  public static void setREG_EMPLEO_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).REG_EMPLEO_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_ID  ( RallyApplication __app )
  {
    return ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).STATUS_ID;
  }


  /**  */
  public static Double getSTATUS_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).STATUS_ID );
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, double value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).STATUS_ID = value;
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Object value )
  {
    ( ( FCH_REG_ACTUALIZAR_A_ADL ) __app.getADL ( FCH_REG_ACTUALIZAR_A_ADL.class ) ).STATUS_ID = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static FCH_REG_ACTUALIZAR_A_ADL get ( RallyApplication __app )
  {
    FCH_REG_ACTUALIZAR_A_ADL adl = new FCH_REG_ACTUALIZAR_A_ADL ( );
    __app.register ( adl, "FCH_REG_ACTUALIZAR_A_ADL" );
    __app.setADL ( FCH_REG_ACTUALIZAR_A_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    FCH_REG_ACTUALIZAR_A_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    FCH_REG_ACTUALIZAR_A_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "FCH_REG_ACTUALIZAR_A_ADL" );
    if ( rObj != null && rObj instanceof FCH_REG_ACTUALIZAR_A_ADL )
    {
      this.app.setADL ( FCH_REG_ACTUALIZAR_A_ADL.class, ( FCH_REG_ACTUALIZAR_A_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "FCH_REG_ACTUALIZAR_A_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "FCH_REG_ACTUALIZAR_A_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    REG_EMPLEO_LOC_DSD = this.dm.create ( "REG_EMPLEO_LOC_DSD" );
    OPEN_ID = REG_EMPLEO_LOC_DSD.getId ( );
    STATUS_ID = RallyDataStoreException.getDefault ( );

    STATUS_ID  = this.dm.reset ( OPEN_ID );

    this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDoubleItem ( "SSN_CLIENTE" ));
    this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_ID  = this.dm.retrieve ( OPEN_ID );

    STATUS_ID  = this.dm.firstRow ( OPEN_ID );

    if ( Compare.equals ( STATUS_ID, 0 ) ) 
    {
      while ( Compare.equals ( STATUS_ID, 0 )  )
      {
        FCH_REG = this.dm.getFieldDate ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "FECHA_REGISTRO" );

        STATUS_ID  = this.dm.nextRow ( OPEN_ID );

      }

      STATUS_ID  = this.dm.reset ( OPEN_ID );

      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDoubleItem ( "SSN_CLIENTE" ));
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "FECHA_REGISTRO", FCH_REG );
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
      STATUS_ID  = this.dm.retrieve ( OPEN_ID );

      STATUS_ID  = this.dm.firstRow ( OPEN_ID );

      if ( Compare.equals ( STATUS_ID, 0 ) ) 
      {
        this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "FECHA_REGISTRO", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDateItem ( "FCH_REGISTRO" ));
        this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "REGISTRO_EMPLEO_COD", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getStringItem ( "COD_REGISTRO_EMPLEO" ));

        STATUS_ID  = this.dm.update ( OPEN_ID );

      }
    }
    else
    {
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "FECHA_REGISTRO", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDateItem ( "FCH_REGISTRO" ));
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "REGISTRO_EMPLEO_COD", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getStringItem ( "COD_REGISTRO_EMPLEO" ));
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
      this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDoubleItem ( "SSN_CLIENTE" ));
      if ( Compare.ge ( this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDoubleItem ( "MAX_NUM_SEQ" ), 1 ) ) 
      {
        this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "NUM_SEQUENCIA", MathService.plus ( this.app.form ( "REGISTRO_EMPLEOS_FR" ).getDoubleItem ( "MAX_NUM_SEQ" ), 1  ) );
      }
      else
      {
        this.dm.setField ( this.dm.get ( "REG_EMPLEO_LOC_DSD" ), "NUM_SEQUENCIA", 1 );
      }

      STATUS_ID  = this.dm.insertRow ( OPEN_ID );

    }

    STATUS_ID  = this.dm.dbCommit ( );
    STATUS_ID  = this.dm.dbClose ( OPEN_ID );

  }
}



/* ---------------------------------------------------------------------


     
VAR
   OPEN_ID  : NUMBER;
   STATUS_ID: NUMBER;
   FCH_REG  : DATE;

BEGIN

        DB_OPEN(REG_EMPLEO_LOC_DSD,OPEN_ID,STATUS_ID);
        DB_RESET(OPEN_ID,STATUS_ID);
        REG_EMPLEO_LOC_DSD.SEGURO_SOCIAL_CLIENTE:=REGISTRO_EMPLEOS_FR.SSN_CLIENT
E;
        REG_EMPLEO_LOC_DSD.RMO_OFICINA := RMO_GBL;
        DB_QUERY(OPEN_ID,STATUS_ID);
        DB_GET_FIRST(OPEN_ID,STATUS_ID);
        IF STATUS_ID = 0 THEN
          BEGIN
                WHILE STATUS_ID = 0  DO
                  BEGIN  
                        FCH_REG := REG_EMPLEO_LOC_DSD.FECHA_REGISTRO;
                        DB_GET_NEXT(OPEN_ID,STATUS_ID);
                  END;

                DB_RESET(OPEN_ID,STATUS_ID);
                REG_EMPLEO_LOC_DSD.SEGURO_SOCIAL_CLIENTE:=REGISTRO_EMPLEOS_FR.SS
N_CLIENTE;
                REG_EMPLEO_LOC_DSD.FECHA_REGISTRO := FCH_REG;
                REG_EMPLEO_LOC_DSD.RMO_OFICINA := RMO_GBL;
                DB_QUERY(OPEN_ID,STATUS_ID);
                DB_GET_FIRST(OPEN_ID,STATUS_ID);
                IF STATUS_ID = 0 THEN
                   BEGIN
                        REG_EMPLEO_LOC_DSD.FECHA_REGISTRO := REGISTRO_EMPLEOS_FR
.FCH_REGISTRO;
                        REG_EMPLEO_LOC_DSD.REGISTRO_EMPLEO_COD := REGISTRO_EMPLE
OS_FR.COD_REGISTRO_EMPLEO;
                        DB_UPDATE(OPEN_ID,STATUS_ID);
                   END;
          END;  
         ELSE
          BEGIN
                REG_EMPLEO_LOC_DSD.FECHA_REGISTRO := REGISTRO_EMPLEOS_FR.FCH_REG
ISTRO;
                REG_EMPLEO_LOC_DSD.REGISTRO_EMPLEO_COD := REGISTRO_EMPLEOS_FR.CO
D_REGISTRO_EMPLEO;
                REG_EMPLEO_LOC_DSD.RMO_OFICINA := RMO_GBL;
                REG_EMPLEO_LOC_DSD.SEGURO_SOCIAL_CLIENTE:=REGISTRO_EMPLEOS_FR.SS
N_CLIENTE;
                IF REGISTRO_EMPLEOS_FR.MAX_NUM_SEQ >= 1 THEN
                        REG_EMPLEO_LOC_DSD.NUM_SEQUENCIA := REGISTRO_EMPLEOS_FR.
MAX_NUM_SEQ + 1;
                ELSE
                        REG_EMPLEO_LOC_DSD.NUM_SEQUENCIA := 1;

                DB_INSERT(OPEN_ID,STATUS_ID);
          END;
        DB_COMMIT(STATUS_ID);
        DB_CLOSE(OPEN_ID,STATUS_ID);

END;
    



--------------------------------------------------------------------- */
