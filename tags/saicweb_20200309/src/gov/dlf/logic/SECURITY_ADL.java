package gov.dlf.logic;


import gov.dlf.facade.SAIC_DMQ_ORA_Application;

import net.maintrend.datamanager.DataStore;
import net.maintrend.interfaces.IRegisteredObject;
import net.maintrend.interlink.Parameter;
import net.maintrend.interlink.ParameterSet;
import net.maintrend.rallyengine.ADL;
import net.maintrend.rallyengine.RallyApplication;
import net.maintrend.rallyengine.RallyDataManager;
import net.maintrend.rallyengine.RallyDataStoreException;
import net.maintrend.util.Compare;
import net.maintrend.util.Debug;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SECURITY_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_ID = 0;



  public DataStore TSS_ACCESS_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).STATUS_ID = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getTSS_ACCESS_RO_DSD  ( RallyApplication __app )
  {
    return ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).TSS_ACCESS_RO_DSD;
  }


  /**  */
  public static void setTSS_ACCESS_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).TSS_ACCESS_RO_DSD = value;
  }


  /**  */
  public static void setTSS_ACCESS_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).TSS_ACCESS_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_ID  ( RallyApplication __app )
  {
    return ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).STATUS_ID;
  }


  /**  */
  public static Double getSTATUS_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).STATUS_ID );
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, double value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).STATUS_ID = value;
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_ADL ) __app.getADL ( SECURITY_ADL.class ) ).STATUS_ID = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static SECURITY_ADL get ( RallyApplication __app )
  {
    SECURITY_ADL adl = new SECURITY_ADL ( );
    __app.register ( adl, "SECURITY_ADL" );
    __app.setADL ( SECURITY_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    SECURITY_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    SECURITY_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "SECURITY_ADL" );
    if ( rObj != null && rObj instanceof SECURITY_ADL )
    {
      this.app.setADL ( SECURITY_ADL.class, ( SECURITY_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SECURITY_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "SECURITY_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {
	  
    CHECK_SYSTEM_ADL.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {

    if ( Compare.equals ( this.app.ACCESS_STATUS_GBL, "FAILURE" ) ) 
    {
      this.doReturn ( );
      return;
    }
    SECURITY_SET_GBLS_ADL.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {

    TSS_ACCESS_RO_DSD = this.dm.create ( "TSS_ACCESS_RO_DSD" );
    OPEN_ID = TSS_ACCESS_RO_DSD.getId ( );
    STATUS_ID = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 0, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.reset ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 1, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    if ( Double.isNaN ( this.app.ID_TECNICO_GBL ) || this.app.ID_TECNICO_GBL == 0 )
    {
      this.app.ID_TECNICO_GBL = this.app.getUser ( ).getUserId ( );
    }

    this.dm.setField ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "ID_TECNICO", this.app.ID_TECNICO_GBL );
    this.dm.setField ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_MODULO", this.app.COD_ACCESS_GBL );

    STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_ID  = this.dm.retrieve ( OPEN_ID );

    STATUS_ID  = this.dm.firstRow ( OPEN_ID );

    if ( Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.ACCESS_STATUS_GBL = "SUCCESS";
      STATUS_ID  = this.dm.dbClose ( OPEN_ID );

      this.doReturn ( );
      return; 
    }
    this.app.ACCESS_STATUS_GBL = "FAILURE";
    STATUS_ID  = this.dm.dbClose ( OPEN_ID );

    this.app.setError ( 2, 5542 );
    this.doReturn ( );
    return; 

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE SECURITY_ADL;

VAR

        OPEN_ID:        NUMBER(9,0);
        STATUS_ID:      NUMBER(9,0);

BEGIN
SET_TRACE();
call check_system_adl;
IF ACCESS_STATUS_GBL = 'FAILURE' 
                                 THEN RETURN;

call SECURITY_SET_GBLS_ADL;

        DB_OPEN(TSS_ACCESS_RO_DSD,OPEN_ID,STATUS_ID);
        IF STATUS_ID<>0
           THEN BEGIN
                  ERROR(STATUS_ID);
                  RETURN;
                END;
        DB_RESET(OPEN_ID,STATUS_ID);
        IF STATUS_ID<>0
           THEN BEGIN
                  ERROR(STATUS_ID);
                  RETURN;
                END;
        TSS_ACCESS_RO_DSD.ID_TECNICO:=ID_TECNICO_GBL;
        TSS_ACCESS_RO_DSD.COD_MODULO:=COD_ACCESS_GBL;
        DB_QUERY(OPEN_ID,STATUS_ID);
{IF STATUS_ID<>0
           THEN BEGIN
                  ERROR(STATUS_ID);
                  RETURN;
                END;}
        DB_GET_FIRST(OPEN_ID,STATUS_ID);
        IF STATUS_ID=0
           THEN BEGIN   
                  ACCESS_STATUS_GBL:='SUCCESS';
                  DB_CLOSE(OPEN_ID,STATUS_ID);
                  RETURN;
                END;
        ACCESS_STATUS_GBL:='FAILURE';
        DB_CLOSE(OPEN_ID,STATUS_ID);
        ERROR(5542);
        RETURN;

SET_NOTRACE();
END;
        
        
        
    



--------------------------------------------------------------------- */
