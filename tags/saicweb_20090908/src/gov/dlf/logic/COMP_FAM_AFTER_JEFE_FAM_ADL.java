package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class COMP_FAM_AFTER_JEFE_FAM_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double FAM_ID = 0;

  public double FAM_STAT = 0;



  public DataStore FAMILIA_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------


  /**  */
  public static DataStore getFAMILIA_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAMILIA_LOC_DSD;
  }


  /**  */
  public static void setFAMILIA_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAMILIA_LOC_DSD = value;
  }


  /**  */
  public static void setFAMILIA_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAMILIA_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getFAM_ID  ( RallyApplication __app )
  {
    return ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_ID;
  }


  /**  */
  public static Double getFAM_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_ID );
  }


  /**  */
  public static void setFAM_ID  ( RallyApplication __app, double value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_ID = value;
  }


  /**  */
  public static void setFAM_ID  ( RallyApplication __app, Object value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getFAM_STAT  ( RallyApplication __app )
  {
    return ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_STAT;
  }


  /**  */
  public static Double getFAM_STATDouble ( RallyApplication __app )
  {
    return new Double ( ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_STAT );
  }


  /**  */
  public static void setFAM_STAT  ( RallyApplication __app, double value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_STAT = value;
  }


  /**  */
  public static void setFAM_STAT  ( RallyApplication __app, Object value )
  {
    ( ( COMP_FAM_AFTER_JEFE_FAM_ADL ) __app.getADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class ) ).FAM_STAT = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static COMP_FAM_AFTER_JEFE_FAM_ADL get ( RallyApplication __app )
  {
    COMP_FAM_AFTER_JEFE_FAM_ADL adl = new COMP_FAM_AFTER_JEFE_FAM_ADL ( );
    __app.register ( adl, "COMP_FAM_AFTER_JEFE_FAM_ADL" );
    __app.setADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    COMP_FAM_AFTER_JEFE_FAM_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    COMP_FAM_AFTER_JEFE_FAM_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "COMP_FAM_AFTER_JEFE_FAM_ADL" );
    if ( rObj != null && rObj instanceof COMP_FAM_AFTER_JEFE_FAM_ADL )
    {
      this.app.setADL ( COMP_FAM_AFTER_JEFE_FAM_ADL.class, ( COMP_FAM_AFTER_JEFE_FAM_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "COMP_FAM_AFTER_JEFE_FAM_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "COMP_FAM_AFTER_JEFE_FAM_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

//  if ( Compare.equals ( this.app.OLD_SSN_JEFE_FAM, this.app.form ( "SOLIC_SERV_COMP_FAMILIAR_FR" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM0" )) ) 
//  {
      FAMILIA_LOC_DSD = this.dm.create ( "FAMILIA_LOC_DSD" );
      FAM_ID = FAMILIA_LOC_DSD.getId ( );
      FAM_STAT = RallyDataStoreException.getDefault ( );

      FAM_STAT  = this.dm.reset ( FAM_ID );

      this.dm.setField ( this.dm.get ( "FAMILIA_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SSN_JEFE_FAM_GBL );

      FAM_STAT  = this.dm.limitQueryFromBuffer ( FAM_ID );
      FAM_STAT  = this.dm.retrieve ( FAM_ID );

      FAM_STAT  = this.dm.firstRow ( FAM_ID );

      if ( ! Compare.equals ( FAM_STAT, 0 ) ) 
      {
        this.dm.setField ( this.dm.get ( "FAMILIA_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SSN_JEFE_FAM_GBL );
        this.dm.setField ( this.dm.get ( "FAMILIA_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        FAM_STAT  = this.dm.insertRow ( FAM_ID );

        FAM_STAT  = this.dm.dbCommit ( );
      }
//  }
    FAM_STAT  = this.dm.dbClose ( FAM_ID );

  }
}



/* ---------------------------------------------------------------------


     
VAR
        fam_id  : NUMBER;
        fam_stat: NUMBER;

BEGIN

set_trace();
IF OLD_SSN_JEFE_FAM=SOLIC_SERV_COMP_FAMILIAR_FR.SEGURO_SOCIAL_JEFE_FAM0
THEN
BEGIN

db_open(FAMILIA_LOC_DSD,fam_id,fam_stat);
db_reset(fam_id,fam_stat);
FAMILIA_LOC_DSD.seguro_social_jefe_fam:=SSN_JEFE_FAM_GBL;
db_query(fam_id,fam_stat);
db_get_first(fam_id,fam_stat);
if (fam_stat<>0)
   then begin
        FAMILIA_LOC_DSD.seguro_social_jefe_fam:=SSN_JEFE_FAM_GBL;
        FAMILIA_LOC_DSD.RMO_OFICINA:=RMO_GBL;
         db_INSERT(fam_id,fam_stat);
         db_COMMIT(fam_stat);
        end;
END;

db_close(fam_id,fam_stat);
set_notrace();
END;
    



--------------------------------------------------------------------- */
