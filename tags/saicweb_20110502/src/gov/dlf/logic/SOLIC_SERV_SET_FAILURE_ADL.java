package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SOLIC_SERV_SET_FAILURE_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double CODE_STATUS = 0;



  public String NULLBOY = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setCODE_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).CODE_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setNULLBOY  ( RallyApplication __app, Parameter value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).NULLBOY = value.getString ( );
  }  
    


  /**  */
  public static String getNULLBOY  ( RallyApplication __app )
  {
    return ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).NULLBOY;
  }


  /**  */
  public static void setNULLBOY  ( RallyApplication __app, String value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).NULLBOY = value;
  }


  /**  */
  public static void setNULLBOY  ( RallyApplication __app, Object value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).NULLBOY = ( String ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCODE_STATUS  ( RallyApplication __app )
  {
    return ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).CODE_STATUS;
  }


  /**  */
  public static Double getCODE_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).CODE_STATUS );
  }


  /**  */
  public static void setCODE_STATUS  ( RallyApplication __app, double value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).CODE_STATUS = value;
  }


  /**  */
  public static void setCODE_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( SOLIC_SERV_SET_FAILURE_ADL ) __app.getADL ( SOLIC_SERV_SET_FAILURE_ADL.class ) ).CODE_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static SOLIC_SERV_SET_FAILURE_ADL get ( RallyApplication __app )
  {
    SOLIC_SERV_SET_FAILURE_ADL adl = new SOLIC_SERV_SET_FAILURE_ADL ( );
    __app.register ( adl, "SOLIC_SERV_SET_FAILURE_ADL" );
    __app.setADL ( SOLIC_SERV_SET_FAILURE_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    SOLIC_SERV_SET_FAILURE_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    SOLIC_SERV_SET_FAILURE_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "SOLIC_SERV_SET_FAILURE_ADL" );
    if ( rObj != null && rObj instanceof SOLIC_SERV_SET_FAILURE_ADL )
    {
      this.app.setADL ( SOLIC_SERV_SET_FAILURE_ADL.class, ( SOLIC_SERV_SET_FAILURE_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SOLIC_SERV_SET_FAILURE_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "SOLIC_SERV_SET_FAILURE_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    if ( Compare.equals ( this.app.RUTINA_GBL, "AC" ) ) 
    {
      APERTURA_DE_CASO_ADL.setCOMPLETION_STATUS ( this.app, "FAILURE" );
      APERTURA_DE_CASO_ADL.setVISITAS_STATUS ( this.app, "FAILURE" );
    }
    else
    {
      if ( Compare.equals ( this.app.RUTINA_GBL, "AC" ) ) 
      {
        MANTENIMIENTO_DE_CASOS_ADL.setCOMPLETION_STATUS ( this.app, "FAILURE" );
      }
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE SOLIC_SERV_SET_FAILURE_ADL;
VAR

        OPEN_ID : NUMBER;
        CODE_STATUS : NUMBER;
        NULLBOY : CHAR;

SET_TRACE();

        IF RUTINA_GBL='AC'
        THEN BEGIN
                APERTURA_DE_CASO_ADL.COMPLETION_STATUS:='FAILURE';
                APERTURA_DE_CASO_ADL.VISITAS_STATUS:='FAILURE';
             END;
        ELSE
          BEGIN 
          IF RUTINA_GBL='AC'
          THEN
                 MANTENIMIENTO_DE_CASOS_ADL.COMPLETION_STATUS:='FAILURE';
          END;
{MAKE_NULL(NULLBOY);

        db_open(CLIENTES_READ_LOC_DSD,open_id,code_status);
        db_reset(open_id,code_status);
                clientes_read_loc_dsd.seguro_social_jefe_familia := SSN_JEFE_FAM
_GBL;
                CLIENTES_READ_LOC_DSD.RMO_OFICINA:=rmo_gbl;
        db_query(open_id,code_status);
        db_get_first(open_id,code_status);
        while code_status = 0 do
            begin
            if ((clientes_read_loc_dsd.COD_PARENTESCO_FAM = '') OR
                   (clientes_read_loc_dsd.COD_PARENTESCO_FAM = NULLBOY))
            THEN BEGIN
                   ERROR(5539);
                   MANTENIMIENTO_DE_CASOS_ADL.COMPLETION_STATUS:='FAILURE';
                   CALL_CMD('IGNORE');
                   SET_FAILURE();
                END;
            ELSE

            db_get_next(open_id,code_status);
            end;
}

SET_NOTRACE();

    



--------------------------------------------------------------------- */
