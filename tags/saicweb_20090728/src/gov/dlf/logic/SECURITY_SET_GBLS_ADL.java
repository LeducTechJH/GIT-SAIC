package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SECURITY_SET_GBLS_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double TSS = 0;

  public double STATUS = 0;



  public DataStore TSS_ACCESS_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setTSS  ( RallyApplication __app, Parameter value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).STATUS = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getTSS_ACCESS_RO_DSD  ( RallyApplication __app )
  {
    return ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS_ACCESS_RO_DSD;
  }


  /**  */
  public static void setTSS_ACCESS_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS_ACCESS_RO_DSD = value;
  }


  /**  */
  public static void setTSS_ACCESS_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS_ACCESS_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getTSS  ( RallyApplication __app )
  {
    return ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS;
  }


  /**  */
  public static Double getTSSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS );
  }


  /**  */
  public static void setTSS  ( RallyApplication __app, double value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS = value;
  }


  /**  */
  public static void setTSS  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).TSS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS  ( RallyApplication __app )
  {
    return ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).STATUS;
  }


  /**  */
  public static Double getSTATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).STATUS );
  }


  /**  */
  public static void setSTATUS  ( RallyApplication __app, double value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).STATUS = value;
  }


  /**  */
  public static void setSTATUS  ( RallyApplication __app, Object value )
  {
    ( ( SECURITY_SET_GBLS_ADL ) __app.getADL ( SECURITY_SET_GBLS_ADL.class ) ).STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static SECURITY_SET_GBLS_ADL get ( RallyApplication __app )
  {
    SECURITY_SET_GBLS_ADL adl = new SECURITY_SET_GBLS_ADL ( );
    __app.register ( adl, "SECURITY_SET_GBLS_ADL" );
    __app.setADL ( SECURITY_SET_GBLS_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    SECURITY_SET_GBLS_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    SECURITY_SET_GBLS_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "SECURITY_SET_GBLS_ADL" );
    if ( rObj != null && rObj instanceof SECURITY_SET_GBLS_ADL )
    {
      this.app.setADL ( SECURITY_SET_GBLS_ADL.class, ( SECURITY_SET_GBLS_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SECURITY_SET_GBLS_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "SECURITY_SET_GBLS_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    TSS_ACCESS_RO_DSD = this.dm.create ( "TSS_ACCESS_RO_DSD" );
    TSS = TSS_ACCESS_RO_DSD.getId ( );
    STATUS = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STATUS, 0 ) ) 
    {
      this.app.setError ( 0, STATUS );
      this.doReturn ( );
      return; 
    }

    STATUS  = this.dm.reset ( TSS );

    if ( ! Compare.equals ( STATUS, 0 ) ) 
    {
      this.app.setError ( 1, STATUS );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "ID_TECNICO", this.app.ID_TECNICO_GBL );

    STATUS  = this.dm.limitQueryFromBuffer ( TSS );
    STATUS  = this.dm.retrieve ( TSS );

    if ( ! Compare.equals ( STATUS, 0 ) ) 
    {
      this.app.setError ( 2, STATUS );
      this.doReturn ( );
      return; 
    }

    STATUS  = this.dm.firstRow ( TSS );

    if ( ! Compare.equals ( STATUS, 0 ) ) 
    {
      this.app.setError ( 3, STATUS );
      this.doReturn ( );
      return; 
    }
    while ( Compare.equals ( STATUS, 0 ) ) 
    {
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "DIRE" ) ) 
      {
        this.app.DIRE_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "OADM" ) ) 
      {
        this.app.OADM_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "SUPV" ) ) 
      {
        this.app.SUPV_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "TECN" ) ) 
      {
        this.app.TECN_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "MACA" ) ) 
      {
        this.app.MACA_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "OFIC" ) ) 
      {
        this.app.OFIC_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "SIST" ) ) 
      {
        this.app.SIST_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "CTRL" ) ) 
      {
        this.app.CTRL_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "RECP" ) ) 
      {
        this.app.RECP_GBL = 1;
      }
      if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "TSS_ACCESS_RO_DSD" ), "COD_ACCESS_LEVEL" ), "AUPA" ) ) 
      {
        this.app.AUPA_GBL = 1;
      }

      STATUS  = this.dm.nextRow ( TSS );

    }
    STATUS  = this.dm.dbClose ( TSS );

  }
}



/* ---------------------------------------------------------------------


     
procedure security_set_gbls_adl;

var 
        tss             : number;
        status          : number;

begin
SET_TRACE();
db_open(TSS_ACCESS_RO_DSD,tss,status);
   if (status <>0 ) then begin
                         error(status);
                         return;
                         end;
db_reset(tss,status);
   if (status <>0 ) then begin
                         error(status);
                         return;
                         end;
tss_access_ro_dsd.id_tecnico := id_tecnico_gbl;
db_query(tss,status);
   if (status <>0 ) then begin
                         error(status);
                         return;
                         end;
db_get_first(tss,status);
   if (status <>0 ) then begin
                         error(status);
                         return;
                         end;
while (status = 0)
 do begin
        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'DIRE')
                then DIRE_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'OADM')
                then OADM_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'SUPV')
                then SUPV_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'TECN')
                then TECN_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'MACA')
                then MACA_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'OFIC')
                then OFIC_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'SIST')
                then SIST_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'CTRL')
                then CTRL_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'RECP')
                then RECP_GBL := 1;

        if (TSS_ACCESS_RO_DSD.COD_ACCESS_LEVEL = 'AUPA')
                then AUPA_GBL := 1;

        

 db_get_next(tss,status);
end;
db_close(tss,status);
DEBUG_LOG('DIRE'||TO_CHAR(DIRE_GBL));
DEBUG_LOG('OADM'||TO_CHAR(OADM_GBL));
DEBUG_LOG('SUPV'||TO_CHAR(SUPV_GBL));
DEBUG_LOG('CTRL'||TO_CHAR(CTRL_GBL));
DEBUG_LOG('RECP'||TO_CHAR(RECP_GBL));
SET_NOTRACE();
end;


    



--------------------------------------------------------------------- */
