package gov.dlf.logic;


import gov.dlf.facade.SAIC_DMQ_ORA_Application;
import gov.dlf.presentation.QFECHAS_SERVICIO_PKT;

import net.maintrend.datamanager.DataStore;
import net.maintrend.interfaces.IRegisteredObject;
import net.maintrend.interlink.Parameter;
import net.maintrend.interlink.ParameterSet;
import net.maintrend.rallyengine.ADL;
import net.maintrend.rallyengine.RallyApplication;
import net.maintrend.rallyengine.RallyDataManager;
import net.maintrend.rallyengine.RallyDataStoreException;
import net.maintrend.rallyengine.RallyStringService;
import net.maintrend.util.Compare;
import net.maintrend.util.Debug;
import net.maintrend.util.MathService;
import net.maintrend.util.TruncService;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class REACTIVAR_PROCEDURE_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double NUCLEO = 0;

  public double STATUS2 = 0;

  public double OPEN2_ID = 0;

  public double STATUS2_ID = 0;

  public double OPEN7_ID = 0;

  public double STATUS7_ID = 0;

  public double AE_COUNT = 0;
  
  public double OPEN3_ID = 0;
  
  public double STATUS3_ID = 0;
  
  public double OPEN4_ID = 0;
  
  public double STATUS4_ID = 0;



  public String NOMBRE_NULL = null;

  public DataStore CLIENTES_RO_DSD = null;

  public DataStore NUCLEO_READ_LOC_DSD = null;

  public DataStore NUCLEOS_EXISTE2_DSD = null;
  
  public DataStore SERV_SOST_DSD = null;
  
  public DataStore SERV_SOST2_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setNUCLEO  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS2  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2 = value.getDouble ( );
  }  

  
  /**  */
  public static void setNOMBRE_NULL  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NOMBRE_NULL = value.getString ( );
  }  

  
  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN2_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS2_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN7_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS7_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS7_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, Parameter value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).AE_COUNT = value.getDouble ( );
  }  
    


  /**  */
  public static String getNOMBRE_NULL  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NOMBRE_NULL;
  }


  /**  */
  public static void setNOMBRE_NULL  ( RallyApplication __app, String value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NOMBRE_NULL = value;
  }


  /**  */
  public static void setNOMBRE_NULL  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NOMBRE_NULL = ( String ) value;
  }



  /**  */
  public static DataStore getCLIENTES_RO_DSD  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).CLIENTES_RO_DSD;
  }


  /**  */
  public static void setCLIENTES_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).CLIENTES_RO_DSD = value;
  }


  /**  */
  public static void setCLIENTES_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).CLIENTES_RO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getNUCLEO_READ_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO_READ_LOC_DSD;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO_READ_LOC_DSD = value;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO_READ_LOC_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getNUCLEOS_EXISTE2_DSD  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEOS_EXISTE2_DSD;
  }


  /**  */
  public static void setNUCLEOS_EXISTE2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEOS_EXISTE2_DSD = value;
  }


  /**  */
  public static void setNUCLEOS_EXISTE2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEOS_EXISTE2_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getNUCLEO  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO;
  }


  /**  */
  public static Double getNUCLEODouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO );
  }


  /**  */
  public static void setNUCLEO  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO = value;
  }


  /**  */
  public static void setNUCLEO  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).NUCLEO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS2  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2;
  }


  /**  */
  public static Double getSTATUS2Double ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2 );
  }


  /**  */
  public static void setSTATUS2  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2 = value;
  }


  /**  */
  public static void setSTATUS2  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2 = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN2_ID  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN2_ID;
  }


  /**  */
  public static Double getOPEN2_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN2_ID );
  }


  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN2_ID = value;
  }


  /**  */
  public static void setOPEN2_ID  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN2_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS2_ID  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2_ID;
  }


  /**  */
  public static Double getSTATUS2_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2_ID );
  }


  /**  */
  public static void setSTATUS2_ID  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2_ID = value;
  }


  /**  */
  public static void setSTATUS2_ID  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS2_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getOPEN7_ID  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN7_ID;
  }


  /**  */
  public static Double getOPEN7_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN7_ID );
  }


  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN7_ID = value;
  }


  /**  */
  public static void setOPEN7_ID  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).OPEN7_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS7_ID  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS7_ID;
  }


  /**  */
  public static Double getSTATUS7_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS7_ID );
  }


  /**  */
  public static void setSTATUS7_ID  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS7_ID = value;
  }


  /**  */
  public static void setSTATUS7_ID  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).STATUS7_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAE_COUNT  ( RallyApplication __app )
  {
    return ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).AE_COUNT;
  }


  /**  */
  public static Double getAE_COUNTDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).AE_COUNT );
  }


  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, double value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).AE_COUNT = value;
  }


  /**  */
  public static void setAE_COUNT  ( RallyApplication __app, Object value )
  {
    ( ( REACTIVAR_PROCEDURE_ADL ) __app.getADL ( REACTIVAR_PROCEDURE_ADL.class ) ).AE_COUNT = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static REACTIVAR_PROCEDURE_ADL get ( RallyApplication __app )
  {
    REACTIVAR_PROCEDURE_ADL adl = new REACTIVAR_PROCEDURE_ADL ( );
    __app.register ( adl, "REACTIVAR_PROCEDURE_ADL" );
    __app.setADL ( REACTIVAR_PROCEDURE_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    REACTIVAR_PROCEDURE_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    REACTIVAR_PROCEDURE_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "REACTIVAR_PROCEDURE_ADL" );
    if ( rObj != null && rObj instanceof REACTIVAR_PROCEDURE_ADL )
    {
      this.app.setADL ( REACTIVAR_PROCEDURE_ADL.class, ( REACTIVAR_PROCEDURE_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "REACTIVAR_PROCEDURE_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "REACTIVAR_PROCEDURE_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {
	    if(  Compare.equals(this.app.MACA_GBL, 1))
	    {
	    	return;
	    }
	    else
	    {
    NOMBRE_NULL = TruncService.setNull ( NOMBRE_NULL  );
    this.app.COD_ACCESS_GBL = "RSER";
    SECURITY_ADL.exec ( this.app );
    return;
	    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {

    if ( Compare.equals ( this.app.ACCESS_STATUS_GBL, "FAILURE" ) ) 
    {
      this.app.setError ( 0, 1006 );
      this.doReturn ( );
      return; 
    }
    if ( ( ! Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_STATUS_SERVICIO" ), 0, 4 ), "CERR" ) ) 
    		&& ( ! Compare.equals ( RallyStringService.subString ( this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_STATUS_SERVICIO" ), 0, 4 ), "RECH" ) )  ) 
    {
      this.app.setError ( 1, 4001 );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    if ( Compare.equals (  this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" ) , "PANE1" ) 
    		|| Compare.equals (  this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" ) , "PANE2" ) 
    		|| Compare.equals (  this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" ) , "PANE3" ) 
    		|| Compare.equals (  this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" ) , "PANE4" ) 
    		|| Compare.equals (  this.app.form ( "SERV_FAM_FRM" ).getStringItem ( "COD_SERVICIO" ) , "PANE5" ) 
    	) 
    {
      this.app.setError ( "0", "Este servicio ya no es valido para determinar." );
      this.doReturn ( );
      return; 
    }
    if ( Compare.equals ( this.app.RUTINA_GBL, "MC" ) ) 
    {
      MANTENIMIENTO_DE_CASOS_ADL.setCOMPLETION_STATUS ( this.app, "SUCCESS" );
    }
    else if ( Compare.equals ( this.app.RUTINA_GBL, "AC" )  )
    {
      APERTURA_DE_CASO_ADL.setCOMPLETION_STATUS ( this.app, "SUCCESS" );
    }
    this.app.MANT_ACCION_SERV_GBL = "IS";
    this.app.FLAG_UPD_GBL = "N";
    CLIENTES_RO_DSD = this.dm.create ( "CLIENTES_RO_DSD" );
    NUCLEO = CLIENTES_RO_DSD.getId ( );
    STATUS2 = RallyDataStoreException.getDefault ( );
    NUCLEO_READ_LOC_DSD = this.dm.create ( "NUCLEO_READ_LOC_DSD" );
    OPEN2_ID = NUCLEO_READ_LOC_DSD.getId ( );
    STATUS2_ID = RallyDataStoreException.getDefault ( );
    NUCLEOS_EXISTE2_DSD = this.dm.create ( "NUCLEOS_EXISTE2_DSD" );
    OPEN7_ID = NUCLEOS_EXISTE2_DSD.getId ( );
    STATUS7_ID = RallyDataStoreException.getDefault ( );


    STATUS2  = this.dm.reset ( NUCLEO );

    this.dm.setField ( this.dm.get ( "CLIENTES_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAMILIA", this.app.SSN_JEFE_FAM_GBL );
    this.dm.setField ( this.dm.get ( "CLIENTES_RO_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.app.SS_SERV_GBL );
    this.dm.setField ( this.dm.get ( "CLIENTES_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    STATUS2  = this.dm.limitQueryFromBuffer ( NUCLEO );
    STATUS2  = this.dm.retrieve ( NUCLEO );

    STATUS2  = this.dm.firstRow ( NUCLEO );

    if ( ! Compare.equals ( STATUS2, 0 ) ) 
    {
      this.app.errorFlag = false;
      this.app.setError ( 2, 4022 );
      this.doReturn ( );
      return; 
    }
    if ( ( Compare.equals ( this.app.COD_SERV_GBL, "AE-C" ) ) && ( Compare.ge ( this.dm.getFieldDouble ( this.dm.get ( "CLIENTES_RO_DSD" ), "CONTEO_60_MESES_TANF" ), 72 ) )  ) 
    {
      this.app.errorFlag = false;
      this.app.setError ( 3, 8080 );
      this.doReturn ( );
      return; 
    }
    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) 
    {
      STATUS2_ID  = this.dm.reset ( OPEN2_ID );

      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SSN_JEFE_FAM_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      
      // The change, suggested by Luis on October, 2, 2008:
      //this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
      //this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "RMO_OFICINA2", this.app.RMO_GBL );

      STATUS2_ID  = this.dm.limitQueryFromBuffer ( OPEN2_ID );
      STATUS2_ID  = this.dm.retrieve ( OPEN2_ID );

      STATUS2_ID  = this.dm.firstRow ( OPEN2_ID );

      while ( Compare.equals ( STATUS2_ID, 0 )  )
      {
        AE_COUNT = 0;

        STATUS7_ID  = this.dm.reset ( OPEN7_ID );

        this.dm.setField ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO", this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );

        STATUS7_ID  = this.dm.limitQueryFromBuffer ( OPEN7_ID );
        STATUS7_ID  = this.dm.retrieve ( OPEN7_ID );

        STATUS7_ID  = this.dm.firstRow ( OPEN7_ID );

        while ( Compare.equals ( STATUS7_ID, 0 )  )
        {
          if ( ( Compare.equals ( RallyStringService.subString ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_SERVICIO" ), 0, 2 ), "AE" ) ) 
        		  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "****" ) ) 
        		  && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "BNPR" ) )
        				  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "BNSC" ) ) )  
        				  && ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "ACTIVO" ) ) 
        						  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "PENDELEG" ) ) 
        						  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "PENDREVI" ) )
        						  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "PENDCERT" ) )
        						  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "PENDAUTO" ) )
        						  || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "NUCLEOS_EXISTE2_DSD" ), "COD_STATUS_SERVICIO" ), "ACCNEG" ) ) )  ) 
          {
            AE_COUNT = MathService.plus ( AE_COUNT, 1  );
          }

          STATUS7_ID  = this.dm.nextRow ( OPEN7_ID );

          if ( Compare.gt ( AE_COUNT, 0 ) ) 
          {
            STATUS2  = this.dm.dbClose ( NUCLEO );

            STATUS2_ID  = this.dm.dbClose ( OPEN2_ID );

            STATUS7_ID  = this.dm.dbClose ( OPEN7_ID );

            this.app.errorFlag = false;
            this.app.setError ( 4, 2758 );
            this.doReturn ( );
            return; 
          }
        }

        STATUS2_ID  = this.dm.nextRow ( OPEN2_ID );

      }
    }
    if (  Compare.equals ( this.app.COD_SERV_GBL, "TANFS" )) 
    {
    	SERV_SOST_DSD = this.dm.create ( "SERV_SOST_DSD" );
    	OPEN3_ID = SERV_SOST_DSD.getId ( );
    	STATUS3_ID = RallyDataStoreException.getDefault ( );

    	STATUS3_ID  = this.dm.reset ( OPEN3_ID );

		this.dm.setField ( this.dm.get ( "SERV_SOST_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "SERV_SOST_DSD" ), "COD_SERVICIO","TANFS" );

		STATUS3_ID  = this.dm.limitQueryFromBuffer ( OPEN3_ID );
		STATUS3_ID  = this.dm.retrieve ( OPEN3_ID );
		STATUS3_ID  = this.dm.firstRow (OPEN3_ID );
		
		while (Compare.equals(STATUS3_ID, 0))
		{
			STATUS3_ID  = this.dm.delete(OPEN3_ID );
			
			STATUS3_ID  = this.dm.firstRow (OPEN3_ID );
		}	
		STATUS3_ID  = this.dm.update(OPEN3_ID);
    }
    
    
    if (  Compare.equals ( this.app.COD_SERV_GBL, "TANFE" ) )
    {
    	SERV_SOST2_DSD = this.dm.create ( "SERV_SOST2_DSD" );
    	OPEN4_ID = SERV_SOST2_DSD.getId ( );
    	STATUS4_ID = RallyDataStoreException.getDefault ( );
    	
    	STATUS4_ID  = this.dm.reset ( OPEN4_ID );

		this.dm.setField ( this.dm.get ( "SERV_SOST2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
		this.dm.setField ( this.dm.get ( "SERV_SOST_DSD" ), "COD_SERVICIO","TANFE" );

		STATUS4_ID  = this.dm.limitQueryFromBuffer ( OPEN4_ID );
		STATUS4_ID  = this.dm.retrieve ( OPEN4_ID );
		STATUS4_ID  = this.dm.firstRow (OPEN4_ID );
		while (Compare.equals(STATUS3_ID, 0))
		{
			STATUS4_ID  = this.dm.delete(OPEN4_ID );
			
			STATUS4_ID  = this.dm.firstRow (OPEN4_ID );
		}	
		STATUS4_ID  = this.dm.update(OPEN4_ID);
    }
    STATUS2  = this.dm.dbClose ( NUCLEO );

    STATUS2_ID  = this.dm.dbClose ( OPEN2_ID );

    STATUS7_ID  = this.dm.dbClose ( OPEN7_ID );
    
    STATUS3_ID = this.dm.dbClose ( OPEN3_ID );
    
    STATUS4_ID = this.dm.dbClose ( OPEN4_ID );

    QFECHAS_SERVICIO_PKT.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( Compare.equals ( this.app.RUTINA_GBL, "MC" ) ) 
    {
      if ( Compare.equals ( MANTENIMIENTO_DE_CASOS_ADL.getCOMPLETION_STATUS ( this.app ), "FAILURE" ) ) 
      {
        this.doReturn ( );
        return;
      }
    }
    else
    {
      if ( Compare.equals ( this.app.RUTINA_GBL, "AC" ) ) 
      {
        if ( Compare.equals ( APERTURA_DE_CASO_ADL.getCOMPLETION_STATUS ( this.app ), "FAILURE" ) ) 
        {
          this.doReturn ( );
          return;
        }
      }
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE REACTIVAR_PROCEDURE_ADL;

VAR     
        NUCLEO          :       NUMBER;
        STATUS2         :       NUMBER;
        nombre_null     :       char(35);
        OPEN2_ID        :       NUMBER;
        STATUS2_ID      :       NUMBER;
        OPEN7_ID        :       NUMBER;
        STATUS7_ID      :       NUMBER;
        AE_COUNT        :       NUMBER;


BEGIN
SET_TRACE();
make_null(nombre_null);
cod_acceSs_gbl := 'RSER';
CALL SECURITY_ADL;
IF ACCESS_STATUS_GBL = 'FAILURE' 
   THEN BEGIN
        ERROR(1006);
        RETURN;
        END;

IF ((SUBSTR(SERV_FAM_FRM.COD_STATUS_SERVICIO,0,4) <> 'CERR') AND
   (SUBSTR(SERV_FAM_FRM.COD_STATUS_SERVICIO,0,4) <> 'RECH'))
    THEN 
        BEGIN
                ERROR (4001);
                SET_FAILURE();
                RETURN;
        END;

IF RUTINA_GBL='MC'
   THEN MANTENIMIENTO_DE_CASOS_ADL.COMPLETION_STATUS:='SUCCESS';
   ELSE IF RUTINA_GBL='AC'
        THEN APERTURA_DE_CASO_ADL.COMPLETION_STATUS:='SUCCESS';

MANT_ACCION_SERV_GBL:='IS';
FLAG_UPD_GBL := 'N';

DEBUG_LOG(TO_CHAR(SS_SERV_GBL));
DEBUG_LOG(TO_CHAR(SS_JEFE_SERVICIO_GBL));
DB_OPEN(CLIENTES_RO_DSD,NUCLEO,STATUS2);
DB_OPEN(NUCLEO_READ_LOC_DSD,OPEN2_ID,STATUS2_ID);
DB_OPEN(NUCLEOS_EXISTE2_DSD,OPEN7_ID,STATUS7_ID);

 
       

DB_RESET(NUCLEO,STATUS2);
CLIENTES_RO_DSD.SEGURO_SOCIAL_JEFE_FAMILIA :=
        SSN_JEFE_FAM_GBL;
CLIENTES_RO_DSD.SEGURO_SOCIAL_CLIENTE :=
        SS_SERV_GBL;
CLIENTES_RO_DSD.RMO_OFICINA:=RMO_GBL;
DB_QUERY(NUCLEO,STATUS2);
DB_GET_FIRST(NUCLEO,STATUS2);
if STATUS2 <> 0
then begin
        set_failure();
        error(4022);
        return;
     end;
{CAMBIO I.S. 20-8-04}
IF (COD_SERV_GBL= 'AE-C') AND (CLIENTES_RO_DSD.CONTEO_60_MESES_TANF >= 72)
THEN BEGIN
      SET_FAILURE();
      ERROR(8080);
      RETURN;
     END;
                                                               
{ VERIFICACION EN AE DE LA EXISTENCIA DE UN MIEMBRO EN MAS DE UN NUCLEO }
IF SUBSTR(COD_SERV_GBL,0,2) = 'AE'
THEN
BEGIN
        DB_RESET(OPEN2_ID,STATUS2_ID);
        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_JEFE_FAM := SSN_JEFE_FAM_GBL;
        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        NUCLEO_READ_LOC_DSD.COD_SERVICIO := COD_SERV_GBL;
        NUCLEO_READ_LOC_DSD.RMO_OFICINA:=RMO_GBL;
        NUCLEO_READ_LOC_DSD.RMO_OFICINA2:=RMO_GBL;
        DB_QUERY(OPEN2_ID,STATUS2_ID);
        DB_GET_FIRST(OPEN2_ID,STATUS2_ID);

        WHILE STATUS2_ID = 0 DO
        BEGIN
        AE_COUNT := 0;
        DB_RESET(OPEN7_ID,STATUS7_ID);
        NUCLEOS_EXISTE2_DSD.SEGURO_SOCIAL_BENEFICIARIO := 
        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_BENEFICIARIO;
        DB_QUERY(OPEN7_ID,STATUS7_ID);
        DB_GET_FIRST(OPEN7_ID,STATUS7_ID);
        WHILE STATUS7_ID = 0 DO
        BEGIN
            IF (SUBSTR(NUCLEOS_EXISTE2_DSD.COD_SERVICIO,0,2) = 'AE')
            AND (NUCLEOS_EXISTE2_DSD.COD_PARENTESCO_RELACION_SERV<>'****')
            and ((NUCLEOS_EXISTE2_DSD.COD_PARENTESCO_RELACION_SERV = 'BNPR') OR
                (NUCLEOS_EXISTE2_DSD.COD_PARENTESCO_RELACION_SERV = 'BNSC'))
            AND ((NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'ACTIVO') OR
                 (NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'PENDELEG') OR
                 (NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'PENDREVI') OR
                 (NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'PENDCERT') OR
                 (NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'PENDAUTO') OR
                 (NUCLEOS_EXISTE2_DSD.COD_STATUS_SERVICIO = 'ACCNEG'))          
                
             THEN AE_COUNT := AE_COUNT + 1;
             DB_GET_NEXT(OPEN7_ID,STATUS7_ID);
                IF AE_COUNT > 0
                THEN BEGIN
                        DB_CLOSE(NUCLEO,STATUS2);
                        DB_CLOSE(OPEN2_ID,STATUS2_ID);
                        DB_CLOSE(OPEN7_ID,STATUS7_ID);
                        SET_FAILURE();
                        ERROR(2758);
                        RETURN;
             END;

        END;
        DB_GET_NEXT(OPEN2_ID,STATUS2_ID);
        END;
END;
DB_CLOSE(NUCLEO,STATUS2);
DB_CLOSE(OPEN2_ID,STATUS2_ID);
DB_CLOSE(OPEN7_ID,STATUS7_ID);

CALL QFECHAS_SERVICIO_PKT;

{    while((status2 = 0) and (encargado_flg ='N')) do
        begin
             counter2 := counter2 + 1;
             if (substr(tiene_servicio_adl_dsd.COD_STATUS_SERVICIO,0,4)<> 'CERR'
) or
                (substr(tiene_servicio_adl_dsd.COD_STATUS_SERVICIO,0,4)<> 'RECH'
) 
             Then encargado_flg := 'Y';
             db_get_next(nucleo,status2);
        end;
}
IF RUTINA_GBL='MC'
   THEN BEGIN
        IF MANTENIMIENTO_DE_CASOS_ADL.COMPLETION_STATUS='FAILURE'
        THEN RETURN;
        END;
   ELSE BEGIN
        IF RUTINA_GBL='AC'
        THEN IF APERTURA_DE_CASO_ADL.COMPLETION_STATUS='FAILURE'
             THEN RETURN;
        END;

SET_NOTRACE();
END;
    



--------------------------------------------------------------------- */
