package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_SYSTEM_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_ID = 0;

  public double RMO_LV = 0;



  public String EXISTE = null;

  public DataStore RMO_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).STATUS_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRMO_LV  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_LV = value.getDouble ( );
  }  

  
  /**  */
  public static void setEXISTE  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).EXISTE = value.getString ( );
  }  
    


  /**  */
  public static String getEXISTE  ( RallyApplication __app )
  {
    return ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).EXISTE;
  }


  /**  */
  public static void setEXISTE  ( RallyApplication __app, String value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).EXISTE = value;
  }


  /**  */
  public static void setEXISTE  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).EXISTE = ( String ) value;
  }



  /**  */
  public static DataStore getRMO_RO_DSD  ( RallyApplication __app )
  {
    return ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_RO_DSD;
  }


  /**  */
  public static void setRMO_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_RO_DSD = value;
  }


  /**  */
  public static void setRMO_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).STATUS_ID;
  }


  /**  */
  public static Double getSTATUS_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).STATUS_ID );
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).STATUS_ID = value;
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).STATUS_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRMO_LV  ( RallyApplication __app )
  {
    return ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_LV;
  }


  /**  */
  public static Double getRMO_LVDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_LV );
  }


  /**  */
  public static void setRMO_LV  ( RallyApplication __app, double value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_LV = value;
  }


  /**  */
  public static void setRMO_LV  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_SYSTEM_ADL ) __app.getADL ( CHECK_SYSTEM_ADL.class ) ).RMO_LV = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CHECK_SYSTEM_ADL get ( RallyApplication __app )
  {
    CHECK_SYSTEM_ADL adl = new CHECK_SYSTEM_ADL ( );
    __app.register ( adl, "CHECK_SYSTEM_ADL" );
    __app.setADL ( CHECK_SYSTEM_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CHECK_SYSTEM_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CHECK_SYSTEM_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CHECK_SYSTEM_ADL" );
    if ( rObj != null && rObj instanceof CHECK_SYSTEM_ADL )
    {
      this.app.setADL ( CHECK_SYSTEM_ADL.class, ( CHECK_SYSTEM_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CHECK_SYSTEM_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CHECK_SYSTEM_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    RMO_RO_DSD = this.dm.create ( "RMO_RO_DSD" );
    OPEN_ID = RMO_RO_DSD.getId ( );
    STATUS_ID = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.reset ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 0, STATUS_ID );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RMO_RO_DSD" ), "COD_RMO", this.app.RMO_GBL );

    STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_ID  = this.dm.retrieve ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 1, STATUS_ID );
      this.doReturn ( );
      return; 
    }

    STATUS_ID  = this.dm.firstRow ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 2, STATUS_ID );
      this.doReturn ( );
      return; 
    }
    this.app.FLG_SYSTEM_GBL = this.dm.getFieldString ( this.dm.get ( "RMO_RO_DSD" ), "CURR_OFFICE_FLG" );
    STATUS_ID  = this.dm.dbClose ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_ID, 0 ) ) 
    {
      this.app.setError ( 3, STATUS_ID );
      this.doReturn ( );
      return; 
    }
//SET_CACHE_SIZE ( "SAIC_DB:", 2 ) 
//SET_CACHE_SIZE ( "SAIC_DB:", 5 ) 
    if ( ( ! Compare.equals ( this.app.FLG_SYSTEM_GBL, "S" ) ) && ( ! Compare.equals ( this.app.FLG_SYSTEM_GBL, "s" ) )  ) 
    {
      if ( ! Compare.equals ( this.app.COD_ACCESS_GBL, "SIST" ) ) 
      {
        this.app.setError ( 4, 300 );
        this.app.ACCESS_STATUS_GBL = "FAILURE";
        this.app.returnTo ( "SAIC_MENU" ); if ( true ) return;
      }
      else
      {
        this.app.ACCESS_STATUS_GBL = " ";
      }
    }
    else
    {
      this.app.ACCESS_STATUS_GBL = " ";
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE CHECK_SYSTEM_ADL;


VAR
        OPEN_ID:                NUMBER(9,0);
        STATUS_ID:              NUMBER(9,0);
        RMO_LV:                 NUMBER(6,0);
        EXISTE:                 CHAR(1);


BEGIN
SET_TRACE();

DB_OPEN(RMO_RO_DSD,OPEN_ID,STATUS_ID);
IF STATUS_ID<>0
   THEN BEGIN
         RETURN;
        END;

DB_RESET(OPEN_ID,STATUS_ID);
IF STATUS_ID<>0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;

RMO_RO_DSD.COD_RMO := RMO_GBL;

DB_QUERY(OPEN_ID,STATUS_ID);
IF STATUS_ID<>0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;

DB_GET_FIRST(OPEN_ID,STATUS_ID);
IF STATUS_ID<>0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;

FLG_SYSTEM_GBL := RMO_RO_DSD.CURR_OFFICE_FLG;

DB_CLOSE(OPEN_ID,STATUS_ID);
IF STATUS_ID<>0
   THEN BEGIN
         ERROR(STATUS_ID);
         RETURN;
        END;
SET_CACHE_SIZE('SAIC_DB:',2);
SET_CACHE_SIZE('SAIC_DB:',5);

IF (FLG_SYSTEM_GBL <> 'S') AND (FLG_SYSTEM_GBL <> 's') then
BEGIN
 IF (COD_ACCESS_GBL <>'SIST') THEN
 BEGIN
        error(300);
        ACCESS_STATUS_GBL := 'FAILURE';
        RETURN_TO SAIC_menu;
 END; 
 ELSE
 BEGIN 
         ACCESS_STATUS_GBL := ' ';
 END;
END; 
ELSE
BEGIN
     ACCESS_STATUS_GBL := ' ';
END;
SET_NOTRACE();

END;

    



--------------------------------------------------------------------- */
