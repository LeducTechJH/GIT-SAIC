package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class TRANS_RECLA_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_CODE = 0;



  public String RECLA_FLAG = null;

  public DataStore RECLA_RETRO_TBL_NOPAR_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).STATUS_CODE = value.getDouble ( );
  }  

  
  /**  */
  public static void setRECLA_FLAG  ( RallyApplication __app, Parameter value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_FLAG = value.getString ( );
  }  
    


  /**  */
  public static String getRECLA_FLAG  ( RallyApplication __app )
  {
    return ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_FLAG;
  }


  /**  */
  public static void setRECLA_FLAG  ( RallyApplication __app, String value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_FLAG = value;
  }


  /**  */
  public static void setRECLA_FLAG  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_FLAG = ( String ) value;
  }



  /**  */
  public static DataStore getRECLA_RETRO_TBL_NOPAR_DSD  ( RallyApplication __app )
  {
    return ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_RETRO_TBL_NOPAR_DSD;
  }


  /**  */
  public static void setRECLA_RETRO_TBL_NOPAR_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_RETRO_TBL_NOPAR_DSD = value;
  }


  /**  */
  public static void setRECLA_RETRO_TBL_NOPAR_DSD  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).RECLA_RETRO_TBL_NOPAR_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_CODE  ( RallyApplication __app )
  {
    return ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).STATUS_CODE;
  }


  /**  */
  public static Double getSTATUS_CODEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).STATUS_CODE );
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, double value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).STATUS_CODE = value;
  }


  /**  */
  public static void setSTATUS_CODE  ( RallyApplication __app, Object value )
  {
    ( ( TRANS_RECLA_ADL ) __app.getADL ( TRANS_RECLA_ADL.class ) ).STATUS_CODE = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static TRANS_RECLA_ADL get ( RallyApplication __app )
  {
    TRANS_RECLA_ADL adl = new TRANS_RECLA_ADL ( );
    __app.register ( adl, "TRANS_RECLA_ADL" );
    __app.setADL ( TRANS_RECLA_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    TRANS_RECLA_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    TRANS_RECLA_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "TRANS_RECLA_ADL" );
    if ( rObj != null && rObj instanceof TRANS_RECLA_ADL )
    {
      this.app.setADL ( TRANS_RECLA_ADL.class, ( TRANS_RECLA_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "TRANS_RECLA_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "TRANS_RECLA_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    RECLA_RETRO_TBL_NOPAR_DSD = this.dm.create ( "RECLA_RETRO_TBL_NOPAR_DSD" );
    OPEN_ID = RECLA_RETRO_TBL_NOPAR_DSD.getId ( );
    STATUS_CODE = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      this.app.setError ( 0, STATUS_CODE );
    }
    RECLA_FLAG = " ";

    STATUS_CODE  = this.dm.reset ( OPEN_ID );

    this.dm.setField ( this.dm.get ( "RECLA_RETRO_TBL_NOPAR_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
    this.dm.setField ( this.dm.get ( "RECLA_RETRO_TBL_NOPAR_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "TRANSFER_COPY_FR" ).getDoubleItem ( "XFR_CLIENTES_SEGURO_SOCIAL_JEFE_FAM" ));

    STATUS_CODE  = this.dm.limitQueryFromBuffer ( OPEN_ID );
    STATUS_CODE  = this.dm.retrieve ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      this.app.setError ( 1, STATUS_CODE );
    }

    STATUS_CODE  = this.dm.firstRow ( OPEN_ID );

    while ( Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECLA_RETRO_TBL_NOPAR_DSD" ), "ACCION" ), "RECL" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RECLA_RETRO_TBL_NOPAR_DSD" ), "ACCION" ), "RREC" ) ) ) 
      {
        RECLA_FLAG = "X";
      }

      STATUS_CODE  = this.dm.nextRow ( OPEN_ID );

    }
    this.app.form ( "TRANSFER_COPY_FR" ).setItem ( "RECLAMACION", RECLA_FLAG  );
    STATUS_CODE  = this.dm.dbClose ( OPEN_ID );

    if ( ! Compare.equals ( STATUS_CODE, 0 ) ) 
    {
      this.app.setError ( 2, STATUS_CODE );
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure trans_recla_adl;

VAR

        OPEN_ID : NUMBER;
        STATUS_CODE : NUMBER;
        RECLA_FLAG: CHAR(1) EXPORT;

BEGIN

SET_TRACE();

        DB_OPEN( RECLA_RETRO_TBL_NOPAR_DSD,OPEN_ID,STATUS_CODE);
        if (status_code <> 0) then
            error(status_code);
        RECLA_FLAG := ' ';
        DB_RESET(OPEN_ID,STATUS_CODE);
        RECLA_RETRO_TBL_NOPAR_DSD.RMO_OFICINA:=RMO_GBL;
        RECLA_RETRO_TBL_NOPAR_DSD.SEGURO_SOCIAL_JEFE_FAM := TRANSFER_COPY_FR.XFR
_clientes_SEGURO_SOCIAL_JEFE_FAM;
        DB_QUERY(OPEN_ID,STATUS_CODE);
        if (status_code <> 0) then
            error(status_code);
        DB_GET_FIRST(OPEN_ID,STATUS_CODE);
        WHILE  (STATUS_CODE = 0)  DO
        BEGIN
          IF (RECLA_RETRO_TBL_NOPAR_DSD.ACCION = 'RECL') OR
           (RECLA_RETRO_TBL_NOPAR_DSD.ACCION = 'RREC')
          THEN
             RECLA_FLAG := 'X';
          DB_GET_NEXT(OPEN_ID,STATUS_CODE);
        END;
        TRANSFER_COPY_FR.RECLAMACION := RECLA_FLAG;

DB_CLOSE(OPEN_ID,STATUS_CODE);
        if (status_code <> 0) then
            error(status_code);
SET_NOTRACE();
END;

    



--------------------------------------------------------------------- */
