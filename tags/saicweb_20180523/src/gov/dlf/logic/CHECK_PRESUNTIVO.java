package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_PRESUNTIVO
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double OPEN_ID = 0;

  public double STATUS_ID = 0;

  public double NUCLEO_ID = 0;

  public double NUCLEO_STATUS = 0;



  public String NULL_CHAR = null;

  public DataStore CLIENTES_READ_LOC_DSD = null;

  public DataStore NUCLEO_READ_LOC_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).OPEN_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).STATUS_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setNULL_CHAR  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NULL_CHAR = value.getString ( );
  }  
    


  /**  */
  public static String getNULL_CHAR  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NULL_CHAR;
  }


  /**  */
  public static void setNULL_CHAR  ( RallyApplication __app, String value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NULL_CHAR = value;
  }


  /**  */
  public static void setNULL_CHAR  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NULL_CHAR = ( String ) value;
  }



  /**  */
  public static DataStore getCLIENTES_READ_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).CLIENTES_READ_LOC_DSD;
  }


  /**  */
  public static void setCLIENTES_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).CLIENTES_READ_LOC_DSD = value;
  }


  /**  */
  public static void setCLIENTES_READ_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).CLIENTES_READ_LOC_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getNUCLEO_READ_LOC_DSD  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_READ_LOC_DSD;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_READ_LOC_DSD = value;
  }


  /**  */
  public static void setNUCLEO_READ_LOC_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_READ_LOC_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getOPEN_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).OPEN_ID;
  }


  /**  */
  public static Double getOPEN_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).OPEN_ID );
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).OPEN_ID = value;
  }


  /**  */
  public static void setOPEN_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).OPEN_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSTATUS_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).STATUS_ID;
  }


  /**  */
  public static Double getSTATUS_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).STATUS_ID );
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).STATUS_ID = value;
  }


  /**  */
  public static void setSTATUS_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).STATUS_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_ID  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_ID;
  }


  /**  */
  public static Double getNUCLEO_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_ID );
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, double value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_ID = value;
  }


  /**  */
  public static void setNUCLEO_ID  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_STATUS  ( RallyApplication __app )
  {
    return ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_STATUS;
  }


  /**  */
  public static Double getNUCLEO_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_STATUS );
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, double value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_STATUS = value;
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_PRESUNTIVO ) __app.getADL ( CHECK_PRESUNTIVO.class ) ).NUCLEO_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CHECK_PRESUNTIVO get ( RallyApplication __app )
  {
    CHECK_PRESUNTIVO adl = new CHECK_PRESUNTIVO ( );
    __app.register ( adl, "CHECK_PRESUNTIVO" );
    __app.setADL ( CHECK_PRESUNTIVO.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CHECK_PRESUNTIVO.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CHECK_PRESUNTIVO.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CHECK_PRESUNTIVO" );
    if ( rObj != null && rObj instanceof CHECK_PRESUNTIVO )
    {
      this.app.setADL ( CHECK_PRESUNTIVO.class, ( CHECK_PRESUNTIVO ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CHECK_PRESUNTIVO Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CHECK_PRESUNTIVO ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NULL_CHAR = TruncService.setNull ( NULL_CHAR  );
    if ( Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 2 ), "AE" ) ) 
    {
      CLIENTES_READ_LOC_DSD = this.dm.create ( "CLIENTES_READ_LOC_DSD" );
      OPEN_ID = CLIENTES_READ_LOC_DSD.getId ( );
      STATUS_ID = RallyDataStoreException.getDefault ( );
      NUCLEO_READ_LOC_DSD = this.dm.create ( "NUCLEO_READ_LOC_DSD" );
      NUCLEO_ID = NUCLEO_READ_LOC_DSD.getId ( );
      NUCLEO_STATUS = RallyDataStoreException.getDefault ( );
      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 0, NUCLEO_STATUS );
      }

      NUCLEO_STATUS  = this.dm.reset ( NUCLEO_ID );

      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 1, NUCLEO_STATUS );
      }
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
      this.dm.setField ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "RMO_OFICINA2", this.app.RMO_GBL );

      NUCLEO_STATUS  = this.dm.limitQueryFromBuffer ( NUCLEO_ID );
      NUCLEO_STATUS  = this.dm.retrieve ( NUCLEO_ID );

      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 2, NUCLEO_STATUS );
      }

      NUCLEO_STATUS  = this.dm.firstRow ( NUCLEO_ID );

      while ( Compare.equals ( NUCLEO_STATUS, 0 )  )
      {
        STATUS_ID  = this.dm.reset ( OPEN_ID );

        this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "SEGURO_SOCIAL_CLIENTE", this.dm.getFieldDouble ( this.dm.get ( "NUCLEO_READ_LOC_DSD" ), "SEGURO_SOCIAL_BENEFICIARIO" ) );
        this.dm.setField ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        STATUS_ID  = this.dm.limitQueryFromBuffer ( OPEN_ID );
        STATUS_ID  = this.dm.retrieve ( OPEN_ID );

        STATUS_ID  = this.dm.firstRow ( OPEN_ID );

        if ( ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_SECUNDARIA" ), "NA" ) ) && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_SECUNDARIA" ), NULL_CHAR ) )  && ( ! Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CLIENTES_READ_LOC_DSD" ), "COD_INCAPACIDAD_SECUNDARIA" ), " " ) )  ) 
        {
          if ( Compare.gt ( this.app.form ( "FECHAS_SERVICIO_FRM" ).getDoubleItem ( "NUM_MESES" ), 3 ) ) 
          {
            this.app.setError ( 3, 2761 );
            STATUS_ID  = this.dm.dbClose ( OPEN_ID );

            this.app.errorFlag = false;
            this.doReturn ( );
            return; 
          }
        }

        NUCLEO_STATUS  = this.dm.nextRow ( NUCLEO_ID );

      }
      STATUS_ID  = this.dm.dbClose ( OPEN_ID );

      NUCLEO_STATUS  = this.dm.dbClose ( NUCLEO_ID );

    }

  }
}



/* ---------------------------------------------------------------------


     
 PROCEDURE CHECK_PRESUNTIVO;
VAR
OPEN_ID : NUMBER;
STATUS_ID : NUMBER;
NUCLEO_ID : NUMBER;
NUCLEO_STATUS : NUMBER;
NULL_CHAR : CHAR;
BEGIN
SET_TRACE();
MAKE_NULL(NULL_CHAR);
IF (SUBSTR(COD_SERV_GBL,0,2)='AE')
THEN
    BEGIN
        DB_OPEN(CLIENTES_READ_LOC_DSD,OPEN_ID,STATUS_ID);
        DB_OPEN(NUCLEO_READ_LOC_DSD,NUCLEO_ID,NUCLEO_STATUS);
        IF NUCLEO_STATUS <> 0
        THEN
                ERROR(NUCLEO_STATUS);
        
        DB_RESET(NUCLEO_ID,NUCLEO_STATUS);
        IF NUCLEO_STATUS <> 0
        THEN
                ERROR(NUCLEO_STATUS);
        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_JEFE_FAM := SS_JEFE_GBL;
        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_JEFE_SERV := SS_SERV_GBL;
        NUCLEO_READ_LOC_DSD.COD_SERVICIO := COD_SERV_GBL;
        NUCLEO_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
        NUCLEO_READ_LOC_DSD.RMO_OFICINA2 := RMO_GBL;
        DEBUG_LOG('FAM '||TO_CHAR(SS_JEFE_GBL));
        DEBUG_LOG('SERV '||TO_CHAR(SS_SERV_GBL));
        DEBUG_LOG('COD '||COD_SERV_GBL);
        DB_QUERY(NUCLEO_ID,NUCLEO_STATUS);
        IF NUCLEO_STATUS <> 0
        THEN
                ERROR(NUCLEO_STATUS);

        DB_GET_FIRST(NUCLEO_ID,NUCLEO_STATUS);
        WHILE NUCLEO_STATUS = 0 DO
        BEGIN
             DB_RESET(OPEN_ID,STATUS_ID);
             CLIENTES_READ_LOC_DSD.SEGURO_SOCIAL_CLIENTE :=
                        NUCLEO_READ_LOC_DSD.SEGURO_SOCIAL_BENEFICIARIO;
             CLIENTES_READ_LOC_DSD.RMO_OFICINA := RMO_GBL;
             DB_QUERY(OPEN_ID,STATUS_ID);
             DB_GET_FIRST(OPEN_ID,STATUS_ID);
             IF (CLIENTES_READ_LOC_DSD.COD_INCAPACIDAD_SECUNDARIA <> 'NA') AND
                (CLIENTES_READ_LOC_DSD.COD_INCAPACIDAD_SECUNDARIA <> NULL_CHAR) 
AND
                (CLIENTES_READ_LOC_DSD.COD_INCAPACIDAD_SECUNDARIA <> ' ')
             THEN
                IF FECHAS_SERVICIO_FRM.NUM_MESES > 3
                THEN 
                   BEGIN
                    ERROR(2761);
                    DB_CLOSE(OPEN_ID,STATUS_ID);
                    SET_FAILURE();
                    RETURN;
                   END;
        DB_GET_NEXT(NUCLEO_ID,NUCLEO_STATUS);
        END;
        DB_CLOSE(OPEN_ID,STATUS_ID);
        DB_CLOSE(NUCLEO_ID,NUCLEO_STATUS);
    END;

SET_NOTRACE();
END;
    



--------------------------------------------------------------------- */
