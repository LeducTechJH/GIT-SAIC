package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CONSISTENCIAS_STATUS_SERV_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double NUCLEO_SERVICIO = 0;

  public double NUCLEO_STATUS = 0;



  public DataStore SERV_NUCLEO_SERV2_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setNUCLEO_SERVICIO  ( RallyApplication __app, Parameter value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_SERVICIO = value.getDouble ( );
  }  

  
  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_STATUS = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getSERV_NUCLEO_SERV2_DSD  ( RallyApplication __app )
  {
    return ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).SERV_NUCLEO_SERV2_DSD;
  }


  /**  */
  public static void setSERV_NUCLEO_SERV2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).SERV_NUCLEO_SERV2_DSD = value;
  }


  /**  */
  public static void setSERV_NUCLEO_SERV2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).SERV_NUCLEO_SERV2_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getNUCLEO_SERVICIO  ( RallyApplication __app )
  {
    return ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_SERVICIO;
  }


  /**  */
  public static Double getNUCLEO_SERVICIODouble ( RallyApplication __app )
  {
    return new Double ( ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_SERVICIO );
  }


  /**  */
  public static void setNUCLEO_SERVICIO  ( RallyApplication __app, double value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_SERVICIO = value;
  }


  /**  */
  public static void setNUCLEO_SERVICIO  ( RallyApplication __app, Object value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_SERVICIO = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUCLEO_STATUS  ( RallyApplication __app )
  {
    return ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_STATUS;
  }


  /**  */
  public static Double getNUCLEO_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_STATUS );
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, double value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_STATUS = value;
  }


  /**  */
  public static void setNUCLEO_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( CONSISTENCIAS_STATUS_SERV_ADL ) __app.getADL ( CONSISTENCIAS_STATUS_SERV_ADL.class ) ).NUCLEO_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CONSISTENCIAS_STATUS_SERV_ADL get ( RallyApplication __app )
  {
    CONSISTENCIAS_STATUS_SERV_ADL adl = new CONSISTENCIAS_STATUS_SERV_ADL ( );
    __app.register ( adl, "CONSISTENCIAS_STATUS_SERV_ADL" );
    __app.setADL ( CONSISTENCIAS_STATUS_SERV_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CONSISTENCIAS_STATUS_SERV_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CONSISTENCIAS_STATUS_SERV_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CONSISTENCIAS_STATUS_SERV_ADL" );
    if ( rObj != null && rObj instanceof CONSISTENCIAS_STATUS_SERV_ADL )
    {
      this.app.setADL ( CONSISTENCIAS_STATUS_SERV_ADL.class, ( CONSISTENCIAS_STATUS_SERV_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CONSISTENCIAS_STATUS_SERV_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CONSISTENCIAS_STATUS_SERV_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    CHECK_CERRAR_SERVICIO_STAT_ADL.setCOUNT ( this.app,  0 );
    CHECK_CERRAR_SERVICIO_STAT_ADL.setNCAL_FLAG ( this.app,  0 );
    if ( Compare.equals ( this.app.form ( "FECHAS_SERVICIO_FRM" ).getStringItem ( "COD_STATUS_SERVICIO" ), "ACCNEG" ) ) 
    {
      SERV_NUCLEO_SERV2_DSD = this.dm.create ( "SERV_NUCLEO_SERV2_DSD" );
      NUCLEO_SERVICIO = SERV_NUCLEO_SERV2_DSD.getId ( );
      NUCLEO_STATUS = RallyDataStoreException.getDefault ( );
      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 0, NUCLEO_STATUS );

        NUCLEO_STATUS  = this.dm.rollBack ( );
        this.doReturn ( );
        return; 
      }

      NUCLEO_STATUS  = this.dm.reset ( NUCLEO_SERVICIO );

      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 1, NUCLEO_STATUS );

        NUCLEO_STATUS  = this.dm.rollBack ( );
        this.doReturn ( );
        return; 
      }
      this.dm.setField ( this.dm.get ( "SERV_NUCLEO_SERV2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "FECHAS_SERVICIO_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM" ));
      this.dm.setField ( this.dm.get ( "SERV_NUCLEO_SERV2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "FECHAS_SERVICIO_FRM" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
      this.dm.setField ( this.dm.get ( "SERV_NUCLEO_SERV2_DSD" ), "COD_SERVICIO", this.app.form ( "FECHAS_SERVICIO_FRM" ).getStringItem ( "COD_SERVICIO" ));
      this.dm.setField ( this.dm.get ( "SERV_NUCLEO_SERV2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      NUCLEO_STATUS  = this.dm.limitQueryFromBuffer ( NUCLEO_SERVICIO );
      NUCLEO_STATUS  = this.dm.retrieve ( NUCLEO_SERVICIO );

      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 2, NUCLEO_STATUS );

        NUCLEO_STATUS  = this.dm.rollBack ( );
        this.doReturn ( );
        return; 
      }

      NUCLEO_STATUS  = this.dm.firstRow ( NUCLEO_SERVICIO );

      if ( ! Compare.equals ( NUCLEO_STATUS, 0 ) ) 
      {
        this.app.setError ( 3, NUCLEO_STATUS );

        NUCLEO_STATUS  = this.dm.rollBack ( );
        this.doReturn ( );
        return; 
      }
      while ( ! Compare.equals ( NUCLEO_STATUS, RallyDataStoreExceptionType.EOS ) ) 
      {
        CHECK_CERRAR_SERVICIO_STAT_ADL.setCOUNT ( this.app,  MathService.plus ( CHECK_CERRAR_SERVICIO_STAT_ADL.getCOUNT ( this.app ), 1  ) );
        if ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "SERV_NUCLEO_SERV2_DSD" ), "COD_PARENTESCO_RELACION_SERV" ), "NCAL" ) ) 
        {
          CHECK_CERRAR_SERVICIO_STAT_ADL.setNCAL_FLAG ( this.app,  1 );
        }

        NUCLEO_STATUS  = this.dm.nextRow ( NUCLEO_SERVICIO );

      }
      this.doReturn ( );
      return; 
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE CONSISTENCIAS_STATUS_SERV_ADL;
var
nucleo_servicio         :       number;
nucleo_status           :       number;
count                   :       number import CHECK_CERRAR_SERVICIO_STAT_ADL.COU
NT;
ncal_flag               :       number import CHECK_CERRAR_SERVICIO_STAT_ADL.nca
l_flag;


BEGIN
SET_TRACE();

     { Cotejar unico miembro en el servicio y que este descalificado }
count := 0;
ncal_flag :=0;

 if (fechas_servicio_frm.cod_status_servicio = 'ACCNEG') 
 then begin
        db_open(SERV_NUCLEO_SERV2_DSD,nucleo_servicio,nucleo_status);
           if (nucleo_status <> 0) 
                then begin 
                        error(nucleo_status);
                        db_rollback(nucleo_status);
                        return;
                end;

        db_reset(nucleo_servicio,nucleo_status);
           if (nucleo_status <> 0) 
                then begin 
                        error(nucleo_status);
                        db_rollback(nucleo_status);
                        return;
                end;

        SERV_NUCLEO_SERV2_DSD.SEGURO_SOCIAL_JEFE_FAM :=
            FECHAS_SERVICIO_FRM.SEGURO_SOCIAL_JEFE_FAM;
        SERV_NUCLEO_SERV2_DSD.SEGURO_SOCIAL_JEFE_SERV :=
            FECHAS_SERVICIO_FRM.SEGURO_SOCIAL_JEFE_SERV;
        SERV_NUCLEO_SERV2_DSD.COD_SERVICIO :=
            FECHAS_SERVICIO_FRM.COD_SERVICIO;

        SERV_NUCLEO_SERV2_DSD.RMO_OFICINA := rmo_gbl;
        db_query(nucleo_servicio,nucleo_status);
           if (nucleo_status <> 0) 
                then begin 
                        error(nucleo_status);
                        db_rollback(nucleo_status);
                        return;
                end;    
        db_get_first(nucleo_servicio,nucleo_status);
           if (nucleo_status <> 0) 
                then begin 
                        error(nucleo_status);
                        db_rollback(nucleo_status);
                        return;
                end;
        while (nucleo_status <> db_eos)
        do begin
                count:= count+1;
                if (SERV_NUCLEO_SERV2_DSD.COD_PARENTESCO_RELACION_SERV =
                     'NCAL') then ncal_flag := 1;
                     
           db_get_next(nucleo_servicio,nucleo_status);
         end; {while end}
return;
end;
SET_NOTRACE();
END;

    



--------------------------------------------------------------------- */
