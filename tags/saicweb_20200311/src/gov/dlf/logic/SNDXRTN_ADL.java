package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SNDXRTN_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------



  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double I = 0;

  public double J = 0;

  public double K = 0;



  public String SND_A = null;

  public String SND_N = null;

  public String NAM1 = null;

  public String NAM2 = null;

  public String VAR1 = null;

  public String VAR2 = null;

  public String VAR3 = null;

  public String LETT = null;

  public String NLETT = null;

  public String TEMP = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------


  /**  */
  public static String getSND_A  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_A;
  }


  /**  */
  public static void setSND_A  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_A = value;
  }


  /**  */
  public static void setSND_A  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_A = ( String ) value;
  }



  /**  */
  public static String getSND_N  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_N;
  }


  /**  */
  public static void setSND_N  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_N = value;
  }


  /**  */
  public static void setSND_N  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).SND_N = ( String ) value;
  }



  /**  */
  public static String getNAM1  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM1;
  }


  /**  */
  public static void setNAM1  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM1 = value;
  }


  /**  */
  public static void setNAM1  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM1 = ( String ) value;
  }



  /**  */
  public static String getNAM2  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM2;
  }


  /**  */
  public static void setNAM2  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM2 = value;
  }


  /**  */
  public static void setNAM2  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NAM2 = ( String ) value;
  }



  /**  */
  public static String getVAR1  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR1;
  }


  /**  */
  public static void setVAR1  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR1 = value;
  }


  /**  */
  public static void setVAR1  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR1 = ( String ) value;
  }



  /**  */
  public static String getVAR2  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR2;
  }


  /**  */
  public static void setVAR2  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR2 = value;
  }


  /**  */
  public static void setVAR2  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR2 = ( String ) value;
  }



  /**  */
  public static String getVAR3  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR3;
  }


  /**  */
  public static void setVAR3  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR3 = value;
  }


  /**  */
  public static void setVAR3  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).VAR3 = ( String ) value;
  }



  /**  */
  public static String getLETT  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).LETT;
  }


  /**  */
  public static void setLETT  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).LETT = value;
  }


  /**  */
  public static void setLETT  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).LETT = ( String ) value;
  }



  /**  */
  public static String getNLETT  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NLETT;
  }


  /**  */
  public static void setNLETT  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NLETT = value;
  }


  /**  */
  public static void setNLETT  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).NLETT = ( String ) value;
  }



  /**  */
  public static String getTEMP  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).TEMP;
  }


  /**  */
  public static void setTEMP  ( RallyApplication __app, String value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).TEMP = value;
  }


  /**  */
  public static void setTEMP  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).TEMP = ( String ) value;
  }




  /**  */
  public static double getI  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).I;
  }


  /**  */
  public static Double getIDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).I );
  }


  /**  */
  public static void setI  ( RallyApplication __app, double value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).I = value;
  }


  /**  */
  public static void setI  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).I = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getJ  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).J;
  }


  /**  */
  public static Double getJDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).J );
  }


  /**  */
  public static void setJ  ( RallyApplication __app, double value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).J = value;
  }


  /**  */
  public static void setJ  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).J = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getK  ( RallyApplication __app )
  {
    return ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).K;
  }


  /**  */
  public static Double getKDouble ( RallyApplication __app )
  {
    return new Double ( ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).K );
  }


  /**  */
  public static void setK  ( RallyApplication __app, double value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).K = value;
  }


  /**  */
  public static void setK  ( RallyApplication __app, Object value )
  {
    ( ( SNDXRTN_ADL ) __app.getADL ( SNDXRTN_ADL.class ) ).K = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   *
   * @param __app
   * @return
   */
  public static SNDXRTN_ADL get ( RallyApplication __app )
  {
    SNDXRTN_ADL adl = new SNDXRTN_ADL ( );
    __app.register ( adl, "SNDXRTN_ADL" );
    __app.setADL ( SNDXRTN_ADL.class, adl );
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    SNDXRTN_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    SNDXRTN_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   *
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "SNDXRTN_ADL" );
    if ( rObj != null && rObj instanceof SNDXRTN_ADL )
    {
      this.app.setADL ( SNDXRTN_ADL.class, ( SNDXRTN_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   *
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "SNDXRTN_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep )
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default:
      {
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "SNDXRTN_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



   /**
   *
   * @param ps
   */
  protected void step0 ( ParameterSet ps )
  {
    this.app.SOUNDEX_GBL = StringService.getSoundex ( this.app.PATERNO_GBL, this.app.MATERNO_GBL );
    this.app.SOUNDEX_LIMIT_GBL = RallyStringService.subString ( this.app.SOUNDEX_GBL, 0, 1 ) + "999999";
  }


  /**
   *
   */
  protected void step0_Old ( ParameterSet ps )
  {


    SND_A = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    SND_N = "001230120022455012623010222";
    this.app.SOUNDEX_GBL = "";
    NAM1 = this.app.PATERNO_GBL;
    NAM2 = this.app.MATERNO_GBL;
    K = 1;
    while ( Compare.le ( K, 2 )  )
    {
      if ( Compare.equals ( K, 1 ) )
      {
        TEMP = NAM1;
      }
      else
      {
        TEMP = NAM2;
      }
      VAR1 = "";
      if ( Compare.equals ( K, 1 ) )
      {
        VAR1 = RallyStringService.subString ( TEMP, 0, 1 );
      }
      VAR3 = "";
      I = 1;
      VAR2 = "";
      J = StringService.length ( TEMP  );
      while ( Compare.le ( I, StringService.length ( TEMP  ) )  )
      {
        LETT = RallyStringService.subString ( TEMP, ( MathService.minus ( I, 1  ) ), 1 );
        NLETT = RallyStringService.subString ( TEMP, I, 1 );
        if ( ( Compare.lt ( LETT, "A" ) ) || ( Compare.gt ( LETT, "Z" ) ) )
        {
          LETT = " ";
        }
        if ( ! Compare.equals ( LETT, NLETT ) )
        {
          VAR3 = VAR3 + LETT;
          VAR2 = VAR2 + RallyStringService.subString ( SND_N, RallyStringService.indexOf ( SND_A, LETT ), 1 );
        }
        I = MathService.plus ( I, 1  );
      }
      I = ( MathService.minus ( 3, K  ) );
      J = 1;
      while ( ( Compare.le ( I, StringService.length ( VAR2  ) ) ) || ( Compare.le ( J, 3 ) )  )
      {
        LETT = RallyStringService.subString ( VAR2, MathService.minus ( I, 1  ), 1 );
        if ( ! Compare.equals ( LETT, "0" ) )
        {
          VAR1 = VAR1 + LETT;
          J = MathService.plus ( J, 1  );
        }
        I = MathService.plus ( I, 1  );
      }
      I = 1;
      J = MathService.minus ( 4, StringService.length ( VAR1  )  );
      while ( Compare.le ( I, J )  )
      {
        VAR1 = VAR1 + "0";
        I = MathService.plus ( I, 1  );
      }
      this.app.SOUNDEX_GBL = RallyStringService.subString ( this.app.SOUNDEX_GBL + VAR1, 0, 7 );
      this.app.SOUNDEX_LIMIT_GBL = RallyStringService.subString ( this.app.SOUNDEX_GBL, 0, 1 ) + "999999";
      K = MathService.plus ( K, 1  );
    }
//  this.app.SOUNDEX_GBL = RallyStringService.subString ( this.app.SOUNDEX_GBL, 0, 7 );

  }
}



/* ---------------------------------------------------------------------



PROCEDURE SNDXRTN_ADL;

VAR

        SND_A:  CHAR(27);
        SND_N:  CHAR(27);

        I:      NUMBER(2,0);
        J:      NUMBER(2,0);
        K:      NUMBER(2,0);
        NAM1:   CHAR(15);
        NAM2:   CHAR(15);
        VAR1:   CHAR(4);
        VAR2:   CHAR(15);
        VAR3:   CHAR(15);
        LETT:   CHAR(1);
        NLETT:  CHAR(1);
        TEMP:   CHAR(15);

BEGIN
        SET_TRACE();
        SND_A:=' ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        SND_N:='001230120022455012623010222';
        SOUNDEX_GBL:='';
        NAM1:=PATERNO_GBL;
        NAM2:=MATERNO_GBL;
        DEBUG_LOG('NAM1='||NAM1);
        DEBUG_LOG('NAM2='||NAM2);
        K:=1;
        WHILE K <= 2 DO
           BEGIN
            IF K=1
              THEN TEMP:=NAM1;
              ELSE TEMP:=NAM2;
            DEBUG_LOG('TEMP='||TEMP);
            VAR1:='';
            IF K=1 THEN VAR1:=SUBSTR(TEMP,0,1);
            VAR3:='';
            I:=1;
            VAR2:='';
            J:=LENGTH(TEMP);
            DEBUG_LOG('LARGO='||TO_CHAR(J));
            WHILE I<=LENGTH(TEMP) DO
               BEGIN
                DEBUG_LOG('I='||TO_CHAR(I));
                LETT:=SUBSTR(TEMP,(I-1),1);
                NLETT:=SUBSTR(TEMP,I,1);
                IF (LETT<'A') OR (LETT>'Z') THEN LETT:=' ';
                IF LETT<>NLETT
                  THEN BEGIN
                        VAR3:=VAR3||LETT;
                        VAR2:=VAR2||SUBSTR(SND_N,SEARCH(SND_A,LETT),1);
                       END;
                I:=I+1;
               END;
            I:=(3-K);
            J:=1;
            WHILE (I<=LENGTH(VAR2)) OR (J<=3) DO
              BEGIN
                LETT:=SUBSTR(VAR2,I-1,1);
                IF LETT<>'0'
                   THEN BEGIN
                          VAR1:=VAR1||LETT;
                          J:=J+1;
                        END;
                I:=I+1;
              END;
            I:=1;
            J:=4-LENGTH(VAR1);
            WHILE I<=J DO
              BEGIN
                VAR1:=VAR1||'0';
                I:=I+1;
              END;
            SOUNDEX_GBL:=SOUNDEX_GBL||VAR1;
            SOUNDEX_LIMIT_GBL:=SUBSTR(SOUNDEX_GBL,0,1)||'999999';
        DEBUG_LOG('SOUNDEX='||SOUNDEX_GBL);
        K:=K+1;
        END;
        DEBUG_LOG('SOUNDEX='||SOUNDEX_GBL);
SET_NOTRACE();
END;





--------------------------------------------------------------------- */
