package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;


/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CONSULTA_CESI_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------
    




  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CONSULTA_CESI_ADL get ( RallyApplication __app )
  {
	  CONSULTA_CESI_ADL adl = new CONSULTA_CESI_ADL ( );
    __app.register ( adl, "CONSULTA_CESI_ADL" );
    __app.setADL ( CONSULTA_CESI_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
	  CONSULTA_CESI_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CONSULTA_CESI_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CONSULTA_CESI_ADL" );
    if ( rObj != null && rObj instanceof CONSULTA_CESI_ADL )
    {
      this.app.setADL ( CONSULTA_CESI_ADL.class, ( CONSULTA_CESI_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CONSULTA_CESI_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CONSULTA_CESI_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {
	String fmt = "000000000";
	java.text.DecimalFormat df = new java.text.DecimalFormat(fmt);
	String str = df.format(this.app.SSN_JEFE_FAM_GBL);
	String url = "http://10.200.15.23/cesi2008/DialogoConsulta.aspx?S=" + str;

	String os = System.getProperty("os.name").toLowerCase();

	Runtime rt = Runtime.getRuntime();
    try{
/*        if (os.indexOf( "win" ) >= 0) { */
        	// this doesn't support showing urls in the form of "page.html#nameLink" 
            rt.exec( "rundll32 url.dll,FileProtocolHandler " + url);
/*        } else if (os.indexOf( "mac" ) >= 0) {
            rt.exec( "open " + url);
        } else if (os.indexOf( "nix") >=0 || os.indexOf( "nux") >=0) {
        	// Do a best guess on unix until we get a platform independent way
        	// Build a list of browsers to try, in this order.
        	String[] browsers = {"epiphany", "firefox", "mozilla", "konqueror",
        			"netscape","opera","links","lynx"};

        	// Build a command string which looks like "browser1 "url" || browser2 "url" ||..."
        	StringBuffer cmd = new StringBuffer();
        	for (int i=0; i<browsers.length; i++)
        		cmd.append( (i==0  ? "" : " || " ) + browsers[i] +" \"" + url + "\" ");

        	rt.exec(new String[] { "sh", "-c", cmd.toString() });
        } else {
        	return;
        } */
    }catch (Exception e){
    	return;
    }
    //this.doReturn ( );
    return; 

  }
}