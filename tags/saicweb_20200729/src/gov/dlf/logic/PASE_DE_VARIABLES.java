package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class PASE_DE_VARIABLES
extends ADL
{
	// -------------------------------------------------------------------
	// ----------   Class Attributes   -----------------------------------

	/**  */
	public static boolean staticCall = false;



	// -------------------------------------------------------------------
	// ----------   Instance Attributes   --------------------------------

	/**  */
	public SAIC_DMQ_ORA_Application app;
	/**  */
	public RallyDataManager dm = null;



	// -------------------------------------------------------------------
	// ----------   Instance Condition Attributes   ----------------------



	// -------------------------------------------------------------------
	// ----------   Instance Export Attributes   -------------------------

	public double PRESUPUESTO_LOC = 0;

	public double PRESUPUESTO_LOC_STAT = 0;



	public DataStore PRESUPUESTO_LOC_DSD = null;



	// -------------------------------------------------------------------
	// ----------   Instance Attributes' Access Methods   ----------------


	/**  */
	public static void setPRESUPUESTO_LOC  ( RallyApplication __app, Parameter value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC = value.getDouble ( );
	}  


	/**  */
	public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, Parameter value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_STAT = value.getDouble ( );
	}  



	/**  */
	public static DataStore getPRESUPUESTO_LOC_DSD  ( RallyApplication __app )
	{
		return ( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_DSD;
	}


	/**  */
	public static void setPRESUPUESTO_LOC_DSD  ( RallyApplication __app, DataStore value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_DSD = value;
	}


	/**  */
	public static void setPRESUPUESTO_LOC_DSD  ( RallyApplication __app, Object value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_DSD = ( DataStore ) value;
	}




	/**  */
	public static double getPRESUPUESTO_LOC  ( RallyApplication __app )
	{
		return ( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC;
	}


	/**  */
	public static Double getPRESUPUESTO_LOCDouble ( RallyApplication __app )
	{
		return new Double ( ( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC );
	}


	/**  */
	public static void setPRESUPUESTO_LOC  ( RallyApplication __app, double value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC = value;
	}


	/**  */
	public static void setPRESUPUESTO_LOC  ( RallyApplication __app, Object value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC = ( ( Double ) value ).doubleValue ( );
	}


	/**  */
	public static double getPRESUPUESTO_LOC_STAT  ( RallyApplication __app )
	{
		return ( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_STAT;
	}


	/**  */
	public static Double getPRESUPUESTO_LOC_STATDouble ( RallyApplication __app )
	{
		return new Double ( ( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_STAT );
	}


	/**  */
	public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, double value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_STAT = value;
	}


	/**  */
	public static void setPRESUPUESTO_LOC_STAT  ( RallyApplication __app, Object value )
	{
		( ( PASE_DE_VARIABLES ) __app.getADL ( PASE_DE_VARIABLES.class ) ).PRESUPUESTO_LOC_STAT = ( ( Double ) value ).doubleValue ( );
	}



	// -------------------------------------------------------------------
	// ----------   Methods   --------------------------------------------

	/**
	 * 
	 * @param __app
	 * @return
	 */
	public static PASE_DE_VARIABLES get ( RallyApplication __app )
	{
		PASE_DE_VARIABLES adl = new PASE_DE_VARIABLES ( );
		__app.register ( adl, "PASE_DE_VARIABLES" );
		__app.setADL ( PASE_DE_VARIABLES.class, adl ); 
		adl.setApplication ( __app );
		return adl;
	}


	/**
	 *
	 * @param __app
	 * @param ps
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app, ParameterSet ps )
	{
		PASE_DE_VARIABLES.get ( __app ).process ( ps );
	}


	/**
	 *
	 * @param __app
	 *
	 * @return
	 */
	public static void exec ( RallyApplication __app )
	{
		ParameterSet ps = null;
		PASE_DE_VARIABLES.exec ( __app, ps );
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param __app
	 */
	public void setApplication ( RallyApplication __app )
	{
		this.app = ( SAIC_DMQ_ORA_Application ) __app;
		if ( this.app != null )
		{
			this.dm = ( RallyDataManager ) this.app.getDataManager ( );
		}
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param parms
	 */
	public void execute ( ParameterSet parms )
	{
		this.process ( parms );
	}




	/**
	 *
	 */
	protected void doReturn ( )
	{
		this.unregister ( );
	}


	/**
	 *
	 */
	public void unregister ( )
	{
		this.app.unregister ( this );
		IRegisteredObject rObj = this.app.get ( "PASE_DE_VARIABLES" );
		if ( rObj != null && rObj instanceof PASE_DE_VARIABLES )
		{
			this.app.setADL ( PASE_DE_VARIABLES.class, ( PASE_DE_VARIABLES ) rObj );
		}
	}


	/**
	 * Overrides the ancestor's method
	 * 
	 * @param ps
	 */
	protected void process ( ParameterSet ps )
	{
		Debug.println ( Debug.TRACE, "PASE_DE_VARIABLES Step " + this.currentStep );
		super.process ( ps );
		switch ( this.currentStep ) 
		{
		case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
		case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
		default: 
		{ 
			this.currentStep = 0;
			Debug.println ( Debug.TRACE, "PASE_DE_VARIABLES ended" );
			this.unregister ( );
			break;
		}
		}
		if ( this.currentStep > 0 ) this.app.goOn ( );
	}



	/**
	 *
	 */
	protected void step0 ( ParameterSet ps )
	{

		GET_NOMBRE_JEFE_DET_PAN_ADL.exec ( this.app );
		CHECK_ID_AUTORIZA_ADL.exec ( this.app );
		return;

	}


	/**
	 *
	 */
	protected void step1 ( ParameterSet ps )
	{
		Date fechaSolicitud = TruncService.trunc ( this.app.FCH_SOLIC_SERV_GBL, "MM" );
		double t =this.app.ID_TECNICO_AUTORIZA_GBL;
		//    if ( ! Compare.equals ( RallyStringService.subString ( this.app.COD_SERV_GBL, 0, 4 ), "PANE" ) ) 
		//    {
		this.app.form ( "DETERMINACION_FR" ).setItem ( "NUCLEO", DETERMINAR_ELEGIBILIDAD_PAN_2.getUNIDAD ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "SAL_ADIE", DETERMINAR_ELEGIBILIDAD_PAN_2.getSALARIO ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "RESTE_40", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_SAL ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "SAL_NETO", DETERMINAR_ELEGIBILIDAD_PAN_2.getSAL_NET ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "SEG_SOC", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getSEG_SOC ( this.app ) )   );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "OTROS", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getOTROS ( this.app ) )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "SUMA_ING", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getING_MENOS_40 ( this.app ) )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDUC_60", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_60 ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_60", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_60 ( this.app ) )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_INCA", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_INCA ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_INCA", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_INCA ( this.app ) )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_EST", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_EST ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_EST", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_EST ( this.app ) )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_FIJA", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_FIJA ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_DIJA", DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_OTRO ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "MENOR", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getCUIDO ( this.app ) )   );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_MENOR", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_CUIDO ( this.app ) )   );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "STAND", DETERMINAR_ELEGIBILIDAD_PAN_2.getSTANDARD ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "ING_NETO", DETERMINAR_ELEGIBILIDAD_PAN_2.getINGRESO_NETO ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PAN_2.getBENEFICIO ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "INELEGIBLE_REGU", DETERMINAR_ELEGIBILIDAD_PAN_2.getINELEGIBLE_REG ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "ELEGIBLE_REGU", DETERMINAR_ELEGIBILIDAD_PAN_2.getELEGIBLE_REG ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "RAZON", DETERMINAR_ELEGIBILIDAD_PAN_2.getRAZON ( this.app )  );
	//	this.app.form ( "DETERMINACION_FR" ).setItem ( "FCH_EFECTIVIDAD", DETERMINAR_ELEGIBILIDAD_PAN_2.getFCH_EFECTIVIDAD ( this.app )  );
		this.app.form ( "DETERMINACION_FR" ).setItem ( "FCH_EFECTIVIDAD", this.app.SYSTEM_DATE);
		//this.app.form ( "DETERMINACION_FR" ).setItem ( "FCH_EFECTIVIDAD",DateUtil.addMonths ( this.app.FCH_SOLIC_SERV_GBL ));
		if(
				(
					Compare.equals(this.app.AUTORIZADA_GBL, "N") && Compare.ge (this.app.FCH_SOLIC_SERV_GBL, RallySpanishDatesParser.parseDateString ( "1-FEB-2016" )) 
				) ||
				Compare.equals(fechaSolicitud,this.app.EDATE)
			)
		{
			this.app.form ( "DETERMINACION_FR" ).setItem ( "NUCLEO", DETERMINAR_ELEGIBILIDAD_PAN_2.getUNIDAD ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "SAL_ADIE_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getSALARIO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "RESTE_40_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_SAL ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "SAL_NETO_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getSAL_NET ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "SEG_SOC_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getSEG_SOC ( this.app ) )   );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "OTROS_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getOTROS ( this.app ) )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "SUMA_ING_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getING_MENOS_40 ( this.app ) )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDUC_60_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_60 ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_60_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_60 ( this.app ) )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_INCA_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_INCA ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_INCA_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_INCA ( this.app ) )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_EST_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_EST ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_EST_EMER", TruncService.trunc ( DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_EST ( this.app ) )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "DEDU_FIJA_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_FIJA ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_FIJA_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_OTRO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "MENOR_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getCUIDO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "TOT_MENOR_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getTOTAL_CUIDO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "STAND_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getSTANDARD ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "ING_NETO_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getINGRESO_NETO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "BENEFICIO_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getBENEFICIO_PRORRATEADO ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "INELEGIBLE_EMER", DETERMINAR_ELEGIBILIDAD_PAN_2.getINELEGIBLE_EMER ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "FCH_EFECTIVIDAD", DETERMINAR_ELEGIBILIDAD_PAN_2.getFCH_EFECTIVIDAD ( this.app )  );
			this.app.form ( "DETERMINACION_FR" ).setItem ( "FCH_EFECTIVIDAD", this.app.FCH_SOLIC_SERV_GBL );
		}
		this.app.form ( "DETERMINACION_FR" ).setItem ( "RAZON", DETERMINAR_ELEGIBILIDAD_PAN_2.getRAZON ( this.app )  );

		String ine = DETERMINAR_ELEGIBILIDAD_PAN_2.getINELEGIBLE_REG(this.app);
		String inee = DETERMINAR_ELEGIBILIDAD_PAN_2.getINELEGIBLE_EMER(this.app);
		String inei = DETERMINAR_ELEGIBILIDAD_PAN_2.getINELEGIBLE_INGRE_BRUTO(this.app);
		if ( Compare.equals(ine, "*")||Compare.equals(inee, "*")||Compare.equals(inei, "*"))
		{
			this.app.form ( "DETERMINACION_FR" ).setItem ( "CLAVE_INELEGIBLE", DETERMINAR_ELEGIBILIDAD_PAN_2.getSERVICIO_STATUS ( this.app )  );
		}
		//    }
		if ( Compare.equals ( this.app.DETERMINACION_FINAL_GBL, "S" ) && ! Compare.equals(this.app.RUTINA_GBL, "RR")) 
		{
			PRESUPUESTO_LOC_DSD = this.dm.create ( "PRESUPUESTO_LOC_DSD" );
			PRESUPUESTO_LOC = PRESUPUESTO_LOC_DSD.getId ( );
			PRESUPUESTO_LOC_STAT = RallyDataStoreException.getDefault ( );

			PRESUPUESTO_LOC_STAT  = this.dm.reset ( PRESUPUESTO_LOC );

			this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
			this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );

			PRESUPUESTO_LOC_STAT  = this.dm.limitQueryFromBuffer ( PRESUPUESTO_LOC );
			PRESUPUESTO_LOC_STAT  = this.dm.retrieve ( PRESUPUESTO_LOC );

			PRESUPUESTO_LOC_STAT  = this.dm.firstRow ( PRESUPUESTO_LOC );

			boolean tempBool = this.dm.getLogEnabled ( );

			if ( Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
			{
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_60", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_60 ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_EST", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_EST ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_INCAP", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_INCA ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "ESTUDIANTES", DETERMINAR_ELEGIBILIDAD_PAN_2.getESTUDIANTE_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MAYORES_60", DETERMINAR_ELEGIBILIDAD_PAN_2.getANCIANO_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "INCAPACITADOS", DETERMINAR_ELEGIBILIDAD_PAN_2.getINCAPACITADO_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "GASTOS_CUIDADO", DETERMINAR_ELEGIBILIDAD_PAN_2.getCUIDO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCIONES_OTROS_ING", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_FIJA ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "INGRESO_NETO_CPA", DETERMINAR_ELEGIBILIDAD_PAN_2.getINGRESO_NETO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "JRNL_SLRIO_ADIEST", DETERMINAR_ELEGIBILIDAD_PAN_2.getSALARIO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MIEMBROS", DETERMINAR_ELEGIBILIDAD_PAN_2.getUNIDAD ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PAN_2.getBENEFICIO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RECURSOS", MathService.plus ( DETERMINAR_ELEGIBILIDAD_PAN_2.getRECURSOS_ACUM ( this.app ), DETERMINAR_ELEGIBILIDAD_PAN_2.getRECURSOS_LIQUIDOS ( this.app )  ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "PENSION_SS", DETERMINAR_ELEGIBILIDAD_PAN_2.getSEG_SOC_BRUTO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RETIRO", DETERMINAR_ELEGIBILIDAD_PAN_2.getRETIRO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "OTROS_INGR_PENS", DETERMINAR_ELEGIBILIDAD_PAN_2.getOTROS ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
				// START MODS By J. Olmeda -- 6/9/2011
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEAMBULANTES", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEAMBULANTE_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MENORES", DETERMINAR_ELEGIBILIDAD_PAN_2.getMENOR_COUNT ( this.app ) );
				// end MODS By J. Olmeda -- 6/9/2011
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "GASTOS_MEDICOS", DETERMINAR_ELEGIBILIDAD_PAN_2.getGASTOS_MEDICOS( this.app ) );

				this.dm.setLogEnabled ( false );
				PRESUPUESTO_LOC_STAT  = this.dm.update ( PRESUPUESTO_LOC );
				this.dm.setLogEnabled ( tempBool );
			}
			else
			{
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_SERV_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_60", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_60 ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_EST", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_EST ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCCIONES_INCAP", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_INCA ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "ESTUDIANTES", DETERMINAR_ELEGIBILIDAD_PAN_2.getESTUDIANTE_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MAYORES_60", DETERMINAR_ELEGIBILIDAD_PAN_2.getANCIANO_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "INCAPACITADOS", DETERMINAR_ELEGIBILIDAD_PAN_2.getINCAPACITADO_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "GASTOS_CUIDADO", DETERMINAR_ELEGIBILIDAD_PAN_2.getCUIDO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEDUCIONES_OTROS_ING", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEDUC_FIJA ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "INGRESO_NETO_CPA", DETERMINAR_ELEGIBILIDAD_PAN_2.getINGRESO_NETO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "JRNL_SLRIO_ADIEST", DETERMINAR_ELEGIBILIDAD_PAN_2.getSALARIO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MIEMBROS", DETERMINAR_ELEGIBILIDAD_PAN_2.getUNIDAD ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "BENEFICIO", DETERMINAR_ELEGIBILIDAD_PAN_2.getBENEFICIO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RECURSOS", MathService.plus ( DETERMINAR_ELEGIBILIDAD_PAN_2.getRECURSOS_ACUM ( this.app ), DETERMINAR_ELEGIBILIDAD_PAN_2.getRECURSOS_LIQUIDOS ( this.app )  ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "PENSION_SS", DETERMINAR_ELEGIBILIDAD_PAN_2.getSEG_SOC_BRUTO ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "RETIRO", DETERMINAR_ELEGIBILIDAD_PAN_2.getRETIRO (this.app ) );
				
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "OTROS_INGR_PENS", DETERMINAR_ELEGIBILIDAD_PAN_2.getOTROS ( this.app ) );

				// START MODS By J. Olmeda -- 6/9/2011
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "DEAMBULANTES", DETERMINAR_ELEGIBILIDAD_PAN_2.getDEAMBULANTE_COUNT ( this.app ) );
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "MENORES", DETERMINAR_ELEGIBILIDAD_PAN_2.getMENOR_COUNT ( this.app ) );
				// end MODS By J. Olmeda -- 6/9/2011
				this.dm.setField ( this.dm.get ( "PRESUPUESTO_LOC_DSD" ), "GASTOS_MEDICOS", DETERMINAR_ELEGIBILIDAD_PAN_2.getGASTOS_MEDICOS( this.app ) );

				this.dm.setLogEnabled ( false );
				PRESUPUESTO_LOC_STAT  = this.dm.insertRow ( PRESUPUESTO_LOC );
				this.dm.setLogEnabled ( tempBool );
			}
			if ( ! Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
			{
				this.app.setError ( 0, PRESUPUESTO_LOC_STAT );
			}

			PRESUPUESTO_LOC_STAT  = this.dm.dbCommit ( );
			if ( ! Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
			{
				this.app.setError ( 0, PRESUPUESTO_LOC_STAT );
			}

			PRESUPUESTO_LOC_STAT  = this.dm.dbClose ( PRESUPUESTO_LOC );
			if ( ! Compare.equals ( PRESUPUESTO_LOC_STAT, 0 ) ) 
			{
				this.app.setError ( 0, PRESUPUESTO_LOC_STAT );
			}


		}

	}
}



/* ---------------------------------------------------------------------



PROCEDURE PASE_DE_VARIABLES;

VAR
  presupuesto_loc        : number;
  presupuesto_loc_stat   : number;

BEGIN
SET_TRACE();
     CALL GET_NOMBRE_JEFE_DET_PAN_ADL;
     IF SUBSTR(COD_SERV_GBL,0,4) <> 'PANE'
     THEN
      BEGIN
        DETERMINACION_FR.NUCLEO := DETERMINAR_ELEGIBILIDAD_PAN_2.UNIDAD;
        DETERMINACION_FR.SAL_ADIE := 
              DETERMINAR_ELEGIBILIDAD_PAN_2.SALARIO;
        DETERMINACION_FR.RESTE_40 := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_SAL;
        DETERMINACION_FR.SAL_NETO := DETERMINAR_ELEGIBILIDAD_PAN_2.SAL_NET;
        DETERMINACION_FR.SEG_SOC := TRUNC(DETERMINAR_ELEGIBILIDAD_PAN_2.SEG_SOC)
;
        DETERMINACION_FR.OTROS := DETERMINAR_ELEGIBILIDAD_PAN_2.OTROS;
        DETERMINACION_FR.SUMA_ING := DETERMINAR_ELEGIBILIDAD_PAN_2.ING_MENOS_40;
        DETERMINACION_FR.DEDUC_60 := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_60;
        DETERMINACION_FR.TOT_60 := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_60;
        DETERMINACION_FR.DEDU_INCA := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_INCA;
        DETERMINACION_FR.TOT_INCA := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_INCA;
        DETERMINACION_FR.DEDU_EST := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_EST;
        DETERMINACION_FR.TOT_EST := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_EST;
        DETERMINACION_FR.DEDU_FIJA := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_FIJA;
        DETERMINACION_FR.TOT_DIJA := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_OTRO;
        DETERMINACION_FR.MENOR := TRUNC(DETERMINAR_ELEGIBILIDAD_PAN_2.CUIDO);
        DETERMINACION_FR.TOT_MENOR := TRUNC(DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_
CUIDO);
        DETERMINACION_FR.STAND := DETERMINAR_ELEGIBILIDAD_PAN_2.STANDARD;
        DETERMINACION_FR.ING_NETO := DETERMINAR_ELEGIBILIDAD_PAN_2.INGRESO_NETO;
        DETERMINACION_FR.BENEFICIO := DETERMINAR_ELEGIBILIDAD_PAN_2.BENEFICIO;
        DETERMINACION_FR.INELEGIBLE_REGU := DETERMINAR_ELEGIBILIDAD_PAN_2.INELEG
IBLE_REG;
        DETERMINACION_FR.ELEGIBLE_REGU := DETERMINAR_ELEGIBILIDAD_PAN_2.ELEGIBLE
_REG;
        DETERMINACION_FR.RAZON := DETERMINAR_ELEGIBILIDAD_PAN_2.RAZON;
      END;
    ELSE
      BEGIN
        DETERMINACION_FR.NUCLEO := DETERMINAR_ELEGIBILIDAD_PAN_2.UNIDAD;
        DETERMINACION_FR.SAL_ADIE_EMER := 
              DETERMINAR_ELEGIBILIDAD_PAN_2.SALARIO;
        DETERMINACION_FR.RESTE_40_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_SA
L;
        DETERMINACION_FR.SAL_NETO_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.SAL_NET;
        DETERMINACION_FR.SEG_SOC_EMER := TRUNC(DETERMINAR_ELEGIBILIDAD_PAN_2.SEG
_SOC);
        DETERMINACION_FR.OTROS_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.OTROS;
        DETERMINACION_FR.SUMA_ING_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.ING_MENO
S_40;
        DETERMINACION_FR.DEDUC_60_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_60
;
        DETERMINACION_FR.TOT_60_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_60;
        DETERMINACION_FR.DEDU_INCA_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_I
NCA;
        DETERMINACION_FR.TOT_INCA_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_IN
CA;
        DETERMINACION_FR.DEDU_EST_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_ES
T;
        DETERMINACION_FR.TOT_EST_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_EST
;
        DETERMINACION_FR.DEDU_FIJA_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.DEDUC_F
IJA;
        DETERMINACION_FR.TOT_FIJA_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_OT
RO;
        DETERMINACION_FR.MENOR_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.CUIDO;
        DETERMINACION_FR.TOT_MENOR_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.TOTAL_C
UIDO;
        DETERMINACION_FR.STAND_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.STANDARD;
        DETERMINACION_FR.ING_NETO_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.INGRESO_
NETO;
        DETERMINACION_FR.BENEFICIO_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.BENEFIC
IO;
        DETERMINACION_FR.INELEGIBLE_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.INELEG
IBLE_EMER;
        DETERMINACION_FR.ELEGIBLE_EMER := DETERMINAR_ELEGIBILIDAD_PAN_2.ELEGIBLE
_EMER;
        DETERMINACION_FR.FECHA_ELEG_EMER := FCH_SOLIC_SERV_GBL;
        DETERMINACION_FR.RAZON := DETERMINAR_ELEGIBILIDAD_PAN_2.RAZON;
      END;

   {Crea Presupuesto}            
        IF DETERMINACION_FINAL_GBL = 'S' THEN
                BEGIN
                     db_OPEN(presupuesto_loc_dsd,presupuesto_loc,presupuesto_loc
_stat);
                     db_reset(presupuesto_loc,presupuesto_loc_stat);
                     presupuesto_loc_dsd.seguro_social_jefe_serv:=ss_serv_gbl;
                     presupuesto_loc_dsd.cod_servicio:=cod_serv_gbl;
                     db_query(presupuesto_loc,presupuesto_loc_stat); 
                     db_get_first(presupuesto_loc,presupuesto_loc_stat); 
                     if presupuesto_loc_stat = 0 then
                        begin
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_60 := DETERMINAR_ELEGI
BILIDAD_PAN_2.DEDUC_60;
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_EST := DETERMINAR_ELEG
IBILIDAD_PAN_2.DEDUC_EST;
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_INCAP := DETERMINAR_EL
EGIBILIDAD_PAN_2.DEDUC_INCA;
                          PRESUPUESTO_LOC_DSD.ESTUDIANTES := DETERMINAR_ELEGIBIL
IDAD_PAN_2.ESTUDIANTE_COUNT;
                          PRESUPUESTO_LOC_DSD.MAYORES_60 := DETERMINAR_ELEGIBILI
DAD_PAN_2.ANCIANO_COUNT;
                          PRESUPUESTO_LOC_DSD.INCAPACITADOS := DETERMINAR_ELEGIB
ILIDAD_PAN_2.INCAPACITADO_COUNT;
                          PRESUPUESTO_LOC_DSD.GASTOS_CUIDADO := DETERMINAR_ELEGI
BILIDAD_PAN_2.CUIDO;
                          PRESUPUESTO_LOC_DSD.DEDUCIONES_OTROS_ING := DETERMINAR
_ELEGIBILIDAD_PAN_2.OTROS;
                          PRESUPUESTO_LOC_DSD.INGRESO_NETO_CPA := DETERMINAR_ELE
GIBILIDAD_PAN_2.INGRESO_NETO;
                          PRESUPUESTO_LOC_DSD.JRNL_SLRIO_ADIEST := DETERMINAR_EL
EGIBILIDAD_PAN_2.SALARIO;
                          PRESUPUESTO_LOC_DSD.MIEMBROS := DETERMINAR_ELEGIBILIDA
D_PAN_2.UNIDAD;
                          PRESUPUESTO_LOC_DSD.BENEFICIO := DETERMINAR_ELEGIBILID
AD_PAN_2.BENEFICIO;
                          PRESUPUESTO_LOC_DSD.RECURSOS := DETERMINAR_ELEGIBILIDA
D_PAN_2.RECURSOS_ACUM + DETERMINAR_ELEGIBILIDAD_PAN_2.RECURSOS_LIQUIDOS;
                          presupuesto_loc_dsd.rmo_oficina := rmo_gbl;  
                          PRESUPUESTO_LOC_DSD.PENSION_SS := DETERMINAR_ELEGIBILI
DAD_PAN_2.SEG_SOC_BRUTO;
                          PRESUPUESTO_LOC_DSD.OTROS_INGR_PENS := DETERMINAR_ELEG
IBILIDAD_PAN_2.OTROS;
                          presupuesto_loc_dsd.seguro_social_jefe_fam:=ss_jefe_gb
l;
                          presupuesto_loc_dsd.rmo_oficina := rmo_gbl;  
                         db_update(presupuesto_loc,presupuesto_loc_stat);
                        end;
                     else        
                        begin
                          presupuesto_loc_dsd.seguro_social_jefe_fam:=ss_jefe_gb
l;
                          presupuesto_loc_dsd.seguro_social_jefe_serv:=ss_serv_g
bl;
                          presupuesto_loc_dsd.cod_servicio:=cod_serv_gbl;
                          presupuesto_loc_dsd.rmo_oficina := rmo_gbl;  
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_60 := DETERMINAR_ELEGI
BILIDAD_PAN_2.DEDUC_60;
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_EST := DETERMINAR_ELEG
IBILIDAD_PAN_2.DEDUC_EST;
                          PRESUPUESTO_LOC_DSD.DEDUCCIONES_INCAP := DETERMINAR_EL
EGIBILIDAD_PAN_2.DEDUC_INCA;
                          PRESUPUESTO_LOC_DSD.ESTUDIANTES := DETERMINAR_ELEGIBIL
IDAD_PAN_2.ESTUDIANTE_COUNT;
                          PRESUPUESTO_LOC_DSD.MAYORES_60 := DETERMINAR_ELEGIBILI
DAD_PAN_2.ANCIANO_COUNT;
                          PRESUPUESTO_LOC_DSD.INCAPACITADOS := DETERMINAR_ELEGIB
ILIDAD_PAN_2.INCAPACITADO_COUNT;
                          PRESUPUESTO_LOC_DSD.GASTOS_CUIDADO := DETERMINAR_ELEGI
BILIDAD_PAN_2.CUIDO;
                          PRESUPUESTO_LOC_DSD.DEDUCIONES_OTROS_ING := DETERMINAR
_ELEGIBILIDAD_PAN_2.OTROS;
                          PRESUPUESTO_LOC_DSD.INGRESO_NETO_CPA := DETERMINAR_ELE
GIBILIDAD_PAN_2.INGRESO_NETO;
                          PRESUPUESTO_LOC_DSD.JRNL_SLRIO_ADIEST := DETERMINAR_EL
EGIBILIDAD_PAN_2.SALARIO;
                          PRESUPUESTO_LOC_DSD.MIEMBROS := DETERMINAR_ELEGIBILIDA
D_PAN_2.UNIDAD;
                          PRESUPUESTO_LOC_DSD.BENEFICIO := DETERMINAR_ELEGIBILID
AD_PAN_2.BENEFICIO;
                          PRESUPUESTO_LOC_DSD.RECURSOS := DETERMINAR_ELEGIBILIDA
D_PAN_2.RECURSOS_ACUM + DETERMINAR_ELEGIBILIDAD_PAN_2.RECURSOS_LIQUIDOS;
                          PRESUPUESTO_LOC_DSD.PENSION_SS := DETERMINAR_ELEGIBILI
DAD_PAN_2.SEG_SOC_BRUTO;
                          PRESUPUESTO_LOC_DSD.OTROS_INGR_PENS := DETERMINAR_ELEG
IBILIDAD_PAN_2.OTROS;                         
                          db_insert(presupuesto_loc,presupuesto_loc_stat);
                        end;
                     if presupuesto_loc_stat <> 0 then
                        error(presupuesto_loc_stat);
                     db_commit(presupuesto_loc_stat);
                     db_close(presupuesto_loc,presupuesto_loc_stat);
                END;
SET_NOTRACE();
END;




--------------------------------------------------------------------- */
