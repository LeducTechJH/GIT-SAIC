package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class INFORMACION_SERV_CUIDO_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;
 
  public boolean _condition2 = false;
 
  public boolean _condition3 = false;
 
  public boolean _condition4 = false;
 
  public boolean _condition5 = false;
 
  public boolean _condition6 = false;
 
  public boolean _condition7 = false;
 
  public boolean _condition8 = false;
 
  public boolean _condition9 = false;
 
  public boolean _condition10 = false;
 
  public boolean _condition11 = false;
 
  public boolean _condition12 = false;
 
  public boolean _condition13 = false;
 
  public boolean _condition14 = false;
 
  public boolean _condition15 = false;
 
  public boolean _condition16 = false;
 
  public boolean _condition17 = false;
 
  public boolean _condition18 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double PHASE_COUNT = 0;

  public double SAVE_PHASE_COUNT = 0;

  public double UPDATE_CONFIRM = 0;



  public String COMPLETION_STATUS = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setCOMPLETION_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).COMPLETION_STATUS = value.getString ( );
  }  

  
  /**  */
  public static void setPHASE_COUNT  ( RallyApplication __app, Parameter value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).PHASE_COUNT = value.getDouble ( );
  }  

  
  /**  */
  public static void setSAVE_PHASE_COUNT  ( RallyApplication __app, Parameter value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).SAVE_PHASE_COUNT = value.getDouble ( );
  }  

  
  /**  */
  public static void setUPDATE_CONFIRM  ( RallyApplication __app, Parameter value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).UPDATE_CONFIRM = value.getDouble ( );
  }  
    


  /**  */
  public static String getCOMPLETION_STATUS  ( RallyApplication __app )
  {
    return ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).COMPLETION_STATUS;
  }


  /**  */
  public static void setCOMPLETION_STATUS  ( RallyApplication __app, String value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).COMPLETION_STATUS = value;
  }


  /**  */
  public static void setCOMPLETION_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).COMPLETION_STATUS = ( String ) value;
  }




  /**  */
  public static double getPHASE_COUNT  ( RallyApplication __app )
  {
    return ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).PHASE_COUNT;
  }


  /**  */
  public static Double getPHASE_COUNTDouble ( RallyApplication __app )
  {
    return new Double ( ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).PHASE_COUNT );
  }


  /**  */
  public static void setPHASE_COUNT  ( RallyApplication __app, double value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).PHASE_COUNT = value;
  }


  /**  */
  public static void setPHASE_COUNT  ( RallyApplication __app, Object value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).PHASE_COUNT = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getSAVE_PHASE_COUNT  ( RallyApplication __app )
  {
    return ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).SAVE_PHASE_COUNT;
  }


  /**  */
  public static Double getSAVE_PHASE_COUNTDouble ( RallyApplication __app )
  {
    return new Double ( ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).SAVE_PHASE_COUNT );
  }


  /**  */
  public static void setSAVE_PHASE_COUNT  ( RallyApplication __app, double value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).SAVE_PHASE_COUNT = value;
  }


  /**  */
  public static void setSAVE_PHASE_COUNT  ( RallyApplication __app, Object value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).SAVE_PHASE_COUNT = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getUPDATE_CONFIRM  ( RallyApplication __app )
  {
    return ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).UPDATE_CONFIRM;
  }


  /**  */
  public static Double getUPDATE_CONFIRMDouble ( RallyApplication __app )
  {
    return new Double ( ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).UPDATE_CONFIRM );
  }


  /**  */
  public static void setUPDATE_CONFIRM  ( RallyApplication __app, double value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).UPDATE_CONFIRM = value;
  }


  /**  */
  public static void setUPDATE_CONFIRM  ( RallyApplication __app, Object value )
  {
    ( ( INFORMACION_SERV_CUIDO_ADL ) __app.getADL ( INFORMACION_SERV_CUIDO_ADL.class ) ).UPDATE_CONFIRM = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static INFORMACION_SERV_CUIDO_ADL get ( RallyApplication __app )
  {
    INFORMACION_SERV_CUIDO_ADL adl = new INFORMACION_SERV_CUIDO_ADL ( );
    __app.register ( adl, "INFORMACION_SERV_CUIDO_ADL" );
    __app.setADL ( INFORMACION_SERV_CUIDO_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    INFORMACION_SERV_CUIDO_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    INFORMACION_SERV_CUIDO_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "INFORMACION_SERV_CUIDO_ADL" );
    if ( rObj != null && rObj instanceof INFORMACION_SERV_CUIDO_ADL )
    {
      this.app.setADL ( INFORMACION_SERV_CUIDO_ADL.class, ( INFORMACION_SERV_CUIDO_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "INFORMACION_SERV_CUIDO_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      case 5:  { this.currentStep ++; this.step5 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "INFORMACION_SERV_CUIDO_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    this.callParms.clear ( );
    this.callParms.set ( UPDATE_CONFIRM  );
    SECURITY_CHECK_GBLS_ADL.exec ( this.app, this.callParms );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    this.callParms.reset ( );
    UPDATE_CONFIRM  = this.callParms.getDouble ( );

    PHASE_COUNT = 1;
    this.process ( ps );

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {

    if ( ( Compare.ge ( PHASE_COUNT, 1 ) ) && ( Compare.le ( PHASE_COUNT, 9 ) )   )
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      COMPLETION_STATUS = "SUCCESS";
      if ( Compare.equals ( PHASE_COUNT, 1 ) ) 
      {
        this._condition1 = true;
      }
      else
      {
        this._condition1 = false;
      }
      if ( this._condition1 )
      {
        if ( Compare.equals ( UPDATE_CONFIRM, 1 ) ) 
        {
          this._condition2 = true;
        }
        else
        {
          this._condition2 = false;
        }
        if ( this._condition2 )
        {
          CONTRATO_CUIDO_PKT.exec ( this.app );
          return;
        }
      }
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    while ( ( Compare.ge ( PHASE_COUNT, 1 ) ) && ( Compare.le ( PHASE_COUNT, 9 ) )   )
    {
      if ( this._condition1 )    //      if ( Compare.equals ( PHASE_COUNT, 1 ) ) 
      {
        if ( this._condition2 )    //        if ( Compare.equals ( UPDATE_CONFIRM, 1 ) ) 
        {
        }
        else
        {
          this.currentStep = 20;
          INFOR_BIO_RO_PKT.exec ( this.app );
          return;
        }
      }
    }

  }

  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    while ( ( Compare.ge ( PHASE_COUNT, 1 ) ) && ( Compare.le ( PHASE_COUNT, 9 ) )   )
    {
      if ( Compare.equals ( COMPLETION_STATUS, "FAILURE" ) ) 
      {
        PHASE_COUNT = MathService.minus ( PHASE_COUNT, 1  );
      }
      else
      {
        PHASE_COUNT = MathService.plus ( PHASE_COUNT, 1  );
      }
      this.currentStep = 2;
      return;
    }

  }

  /**
   *
   */
  protected void step5 ( ParameterSet ps )
  {
    UPDATE_CONFIRM = 0;
    this.doReturn ( );
    return; 

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE INFORMACION_BIO_FIN_ADL;

VAR
        COMPLETION_STATUS       : CHAR(7) EXPORT;
        PHASE_COUNT             : NUMBER(2,0) EXPORT;
        SAVE_PHASE_COUNT        : NUMBER(2,0);
        update_confirm          : number(1,0);
BEGIN
set_trace();
       CALL SECURITY_CHECK_GBLS_ADL(UPDATE_CONFIRM);

        PHASE_COUNT := 1;
        WHILE (PHASE_COUNT >= 1) AND (PHASE_COUNT <= 9)
        DO BEGIN
                COMPLETION_STATUS := 'SUCCESS';
                IF PHASE_COUNT=1
                THEN
                      if (update_confirm = 1) then 
                        CALL infor_bio_pkt;
                      else call infor_bio_ro_pkt;
                ELSE
                  IF PHASE_COUNT=2
                  THEN
                    if (update_confirm = 1) then
                        CALL DESCALIFICADOS_CLIENTES_PKT;
                    else call DESCALIFICADOS_CLIENTES_pkt;
                  ELSE
                    IF PHASE_COUNT=3
                    THEN
                      if (update_confirm = 1) then
                        CALL RECURSOS_CLIENTES_FR_PKT;
                      else call recursos_clientes_ro_pkt;
                    ELSE
                        IF PHASE_COUNT=4
                        THEN
                      if (update_confirm = 1) then
                        CALL ingresos_CLIENTES_FR_PKT;
                      else call ingresos_clientes_ro_pkt;
                        ELSE
                           IF PHASE_COUNT=5
                           THEN
                      if (update_confirm = 1) then
                        CALL gastos_CLIENTES_FR_PKT;
                      else call gastos_clientes_ro_pkt;
                           ELSE
                                IF PHASE_COUNT=6
                                THEN
                     if (update_confirm = 1) then
                        CALL empleos_CLIENTE_PKT;
                     else call empleos_cliente_ro_pkt;
                                ELSE
                                  IF PHASE_COUNT=7
                                  THEN
                      if (update_confirm = 1) AND (OFIC_GBL <> 1) Then
                        CALL PTRA_CLIENTE_PKT;
                      else call PTRA_cliente_ro_pkt;
                                  ELSE
                                    IF PHASE_COUNT=8
                                    THEN
                      if (update_confirm = 1) then
                        CALL antecedente_CLIENTE_update_PKT;
                      else call antecedente_cliente_ro_pkt;
                                    ELSE
                                        IF PHASE_COUNT=9
                                        THEN
                      if (update_confirm = 1) then
                        CALL agencias_CLIENTES_FR_PKT;
                      else call agencias_clientes_ro_pkt;

        IF COMPLETION_STATUS='FAILURE'
        THEN
           BEGIN
                PHASE_COUNT:=PHASE_COUNT-1;
           END;
        ELSE
           BEGIN
             PHASE_COUNT:=PHASE_COUNT+1;
            END;
       END;
update_confirm := 0;
RETURN;
set_notrace();
END;
    



--------------------------------------------------------------------- */
