package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class ACEPTA_REGISTRO_S_N_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double NGET_CMD = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setNGET_CMD  ( RallyApplication __app, Parameter value )
  {
    ( ( ACEPTA_REGISTRO_S_N_ADL ) __app.getADL ( ACEPTA_REGISTRO_S_N_ADL.class ) ).NGET_CMD = value.getDouble ( );
  }  
    



  /**  */
  public static double getNGET_CMD  ( RallyApplication __app )
  {
    return ( ( ACEPTA_REGISTRO_S_N_ADL ) __app.getADL ( ACEPTA_REGISTRO_S_N_ADL.class ) ).NGET_CMD;
  }


  /**  */
  public static Double getNGET_CMDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( ACEPTA_REGISTRO_S_N_ADL ) __app.getADL ( ACEPTA_REGISTRO_S_N_ADL.class ) ).NGET_CMD );
  }


  /**  */
  public static void setNGET_CMD  ( RallyApplication __app, double value )
  {
    ( ( ACEPTA_REGISTRO_S_N_ADL ) __app.getADL ( ACEPTA_REGISTRO_S_N_ADL.class ) ).NGET_CMD = value;
  }


  /**  */
  public static void setNGET_CMD  ( RallyApplication __app, Object value )
  {
    ( ( ACEPTA_REGISTRO_S_N_ADL ) __app.getADL ( ACEPTA_REGISTRO_S_N_ADL.class ) ).NGET_CMD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static ACEPTA_REGISTRO_S_N_ADL get ( RallyApplication __app )
  {
    ACEPTA_REGISTRO_S_N_ADL adl = new ACEPTA_REGISTRO_S_N_ADL ( );
    __app.register ( adl, "ACEPTA_REGISTRO_S_N_ADL" );
    __app.setADL ( ACEPTA_REGISTRO_S_N_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    ACEPTA_REGISTRO_S_N_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    ACEPTA_REGISTRO_S_N_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "ACEPTA_REGISTRO_S_N_ADL" );
    if ( rObj != null && rObj instanceof ACEPTA_REGISTRO_S_N_ADL )
    {
      this.app.setADL ( ACEPTA_REGISTRO_S_N_ADL.class, ( ACEPTA_REGISTRO_S_N_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "ACEPTA_REGISTRO_S_N_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "ACEPTA_REGISTRO_S_N_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NGET_CMD = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    if ( ( ! Compare.equals ( this.app.form ( "REGISTRO_EMPLEOS_FR" ).getStringItem ( "ACEPTA_REGISTRO_EMPLEO" ), "S" ) ) && ( ! Compare.equals ( this.app.form ( "REGISTRO_EMPLEOS_FR" ).getStringItem ( "ACEPTA_REGISTRO_EMPLEO" ), "N" ) )  ) 
    {
      this.app.setError ( 0, 6504 );
      this.app.errorFlag = false;
    }
    if ( Compare.equals ( NGET_CMD, 6143 ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      this.app.callCommand ( RallyAppCommandFactory.ABORTACTION );
      return;
    }

  }
}



/* ---------------------------------------------------------------------


     
VAR
   NGET_CMD : NUMBER;

BEGIN

NGET_CMD := GET_CMD();

   
IF (REGISTRO_EMPLEOS_FR.ACEPTA_REGISTRO_EMPLEO<>'S') AND
      (REGISTRO_EMPLEOS_FR.ACEPTA_REGISTRO_EMPLEO<>'N')
        THEN BEGIN
              ERROR(6504);
              SET_FAILURE();
             END;

IF (NGET_CMD = 6143) 
 THEN
   CALL_CMD('QUIT ACTION');  

END;
    



--------------------------------------------------------------------- */
