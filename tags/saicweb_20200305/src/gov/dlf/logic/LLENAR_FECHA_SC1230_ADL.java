package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class LLENAR_FECHA_SC1230_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RMO_ID = 0;

  public double RMO_STATUS = 0;



  public DataStore RMO_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRMO_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRMO_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_STATUS = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getRMO_RO_DSD  ( RallyApplication __app )
  {
    return ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_RO_DSD;
  }


  /**  */
  public static void setRMO_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_RO_DSD = value;
  }


  /**  */
  public static void setRMO_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRMO_ID  ( RallyApplication __app )
  {
    return ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_ID;
  }


  /**  */
  public static Double getRMO_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_ID );
  }


  /**  */
  public static void setRMO_ID  ( RallyApplication __app, double value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_ID = value;
  }


  /**  */
  public static void setRMO_ID  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRMO_STATUS  ( RallyApplication __app )
  {
    return ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_STATUS;
  }


  /**  */
  public static Double getRMO_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_STATUS );
  }


  /**  */
  public static void setRMO_STATUS  ( RallyApplication __app, double value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_STATUS = value;
  }


  /**  */
  public static void setRMO_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_FECHA_SC1230_ADL ) __app.getADL ( LLENAR_FECHA_SC1230_ADL.class ) ).RMO_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static LLENAR_FECHA_SC1230_ADL get ( RallyApplication __app )
  {
    LLENAR_FECHA_SC1230_ADL adl = new LLENAR_FECHA_SC1230_ADL ( );
    __app.register ( adl, "LLENAR_FECHA_SC1230_ADL" );
    __app.setADL ( LLENAR_FECHA_SC1230_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    LLENAR_FECHA_SC1230_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    LLENAR_FECHA_SC1230_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "LLENAR_FECHA_SC1230_ADL" );
    if ( rObj != null && rObj instanceof LLENAR_FECHA_SC1230_ADL )
    {
      this.app.setADL ( LLENAR_FECHA_SC1230_ADL.class, ( LLENAR_FECHA_SC1230_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "LLENAR_FECHA_SC1230_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "LLENAR_FECHA_SC1230_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    RMO_RO_DSD = this.dm.create ( "RMO_RO_DSD" );
    RMO_ID = RMO_RO_DSD.getId ( );
    RMO_STATUS = RallyDataStoreException.getDefault ( );

    RMO_STATUS  = this.dm.reset ( RMO_ID );

    this.dm.setField ( this.dm.get ( "RMO_RO_DSD" ), "COD_RMO", this.app.RMO_GBL );

    RMO_STATUS  = this.dm.limitQueryFromBuffer ( RMO_ID );
    RMO_STATUS  = this.dm.retrieve ( RMO_ID );

    RMO_STATUS  = this.dm.firstRow ( RMO_ID );

    this.app.form ( "SC1230_PRN_FR" ).setItem ( "DIRE_1", this.dm.getFieldString ( this.dm.get ( "RMO_RO_DSD" ), "DIR_1" )  );
    this.app.form ( "SC1230_PRN_FR" ).setItem ( "DIRE_2", this.dm.getFieldString ( this.dm.get ( "RMO_RO_DSD" ), "DIR_2" )  );
    this.app.form ( "SC1230_PRN_FR" ).setItem ( "PUEBLO", this.dm.getFieldString ( this.dm.get ( "RMO_RO_DSD" ), "DSC_MUNIC" )  );
    this.app.form ( "SC1230_PRN_FR" ).setItem ( "ZIP_CODE", this.dm.getFieldDouble ( this.dm.get ( "RMO_RO_DSD" ), "ZIP_CODE" )  );
    this.app.form ( "SC1230_PRN_FR" ).setItem ( "FECHA", this.app.SYSTEM_DATE  );
    RMO_STATUS  = this.dm.dbClose ( RMO_ID );

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE LLENAR_FECHA_SC1230_ADL;
VAR
        RMO_ID          : NUMBER(9,0);
        RMO_STATUS      : NUMBER(9,0);

BEGIN
SET_TRACE();
DB_OPEN(RMO_RO_DSD,RMO_ID,RMO_STATUS);
DB_RESET(RMO_ID,RMO_STATUS);
RMO_RO_DSD.COD_RMO := RMO_GBL;
DB_QUERY(RMO_ID,RMO_STATUS);
DB_GET_FIRST(RMO_ID,RMO_STATUS);
SC1230_PRN_FR.DIRE_1 := RMO_RO_DSD.DIR_1;
SC1230_PRN_FR.DIRE_2 := RMO_RO_DSD.DIR_2;
SC1230_PRN_FR.PUEBLO := RMO_RO_DSD.DSC_MUNIC;
SC1230_PRN_FR.ZIP_CODE := RMO_RO_DSD.ZIP_CODE;

SC1230_PRN_FR.FECHA := SYSTEM_DATE;

DB_CLOSE(RMO_ID,RMO_STATUS);
SET_NOTRACE();
END;
    



--------------------------------------------------------------------- */
