package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class VERIFICAR_APEL_CON_SERV_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double APEL_ID = 0;

  public double APEL_STATUS = 0;

  public double COUNTER_APEL = 0;



  public DataStore APELACIONES_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setAPEL_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setAPEL_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setCOUNTER_APEL  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).COUNTER_APEL = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getAPELACIONES_RO_DSD  ( RallyApplication __app )
  {
    return ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APELACIONES_RO_DSD;
  }


  /**  */
  public static void setAPELACIONES_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APELACIONES_RO_DSD = value;
  }


  /**  */
  public static void setAPELACIONES_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APELACIONES_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getAPEL_ID  ( RallyApplication __app )
  {
    return ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_ID;
  }


  /**  */
  public static Double getAPEL_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_ID );
  }


  /**  */
  public static void setAPEL_ID  ( RallyApplication __app, double value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_ID = value;
  }


  /**  */
  public static void setAPEL_ID  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAPEL_STATUS  ( RallyApplication __app )
  {
    return ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_STATUS;
  }


  /**  */
  public static Double getAPEL_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_STATUS );
  }


  /**  */
  public static void setAPEL_STATUS  ( RallyApplication __app, double value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_STATUS = value;
  }


  /**  */
  public static void setAPEL_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).APEL_STATUS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCOUNTER_APEL  ( RallyApplication __app )
  {
    return ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).COUNTER_APEL;
  }


  /**  */
  public static Double getCOUNTER_APELDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).COUNTER_APEL );
  }


  /**  */
  public static void setCOUNTER_APEL  ( RallyApplication __app, double value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).COUNTER_APEL = value;
  }


  /**  */
  public static void setCOUNTER_APEL  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICAR_APEL_CON_SERV_ADL ) __app.getADL ( VERIFICAR_APEL_CON_SERV_ADL.class ) ).COUNTER_APEL = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static VERIFICAR_APEL_CON_SERV_ADL get ( RallyApplication __app )
  {
    VERIFICAR_APEL_CON_SERV_ADL adl = new VERIFICAR_APEL_CON_SERV_ADL ( );
    __app.register ( adl, "VERIFICAR_APEL_CON_SERV_ADL" );
    __app.setADL ( VERIFICAR_APEL_CON_SERV_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    VERIFICAR_APEL_CON_SERV_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    VERIFICAR_APEL_CON_SERV_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "VERIFICAR_APEL_CON_SERV_ADL" );
    if ( rObj != null && rObj instanceof VERIFICAR_APEL_CON_SERV_ADL )
    {
      this.app.setADL ( VERIFICAR_APEL_CON_SERV_ADL.class, ( VERIFICAR_APEL_CON_SERV_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "VERIFICAR_APEL_CON_SERV_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "VERIFICAR_APEL_CON_SERV_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    COUNTER_APEL = 0;
    APELACIONES_RO_DSD = this.dm.create ( "APELACIONES_RO_DSD" );
    APEL_ID = APELACIONES_RO_DSD.getId ( );
    APEL_STATUS = RallyDataStoreException.getDefault ( );

    APEL_STATUS  = this.dm.reset ( APEL_ID );

    this.dm.setField ( this.dm.get ( "APELACIONES_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SSN_JEFE_FAM_GBL );
    this.dm.setField ( this.dm.get ( "APELACIONES_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    APEL_STATUS  = this.dm.limitQueryFromBuffer ( APEL_ID );
    APEL_STATUS  = this.dm.retrieve ( APEL_ID );

    APEL_STATUS  = this.dm.firstRow ( APEL_ID );

    while ( Compare.equals ( APEL_STATUS, 0 ) ) 
    {
      if ( ! ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "STATUS_APELACION" ), "RETI" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "STATUS_APELACION" ), "TERM" ) ) ) ) 
      {
        COUNTER_APEL = MathService.plus ( COUNTER_APEL, 1  );
      }

      APEL_STATUS  = this.dm.nextRow ( APEL_ID );

    }
    if ( Compare.gt ( COUNTER_APEL, 0 ) ) 
    {
      this.app.setError ( 0, 1055 );
    }
    APEL_STATUS  = this.dm.dbClose ( APEL_ID );

    COUNTER_APEL = 0;

  }
}



/* ---------------------------------------------------------------------


     
procedure verificar_apel_con_serv_adl;
var
        apel_id         : number(9,0);
        apel_status     : number(9,0);
        counter_apel    : number;
        
begin
set_trace();
        counter_apel := 0;
        db_open(APELACIONES_RO_DSD,apel_id,apel_status);
        db_reset(apel_id,apel_status);
        
        APELACIONES_RO_DSD.SEGURO_SOCIAL_JEFE_FAM := SSN_JEFE_FAM_GBL;          
        APELACIONES_RO_DSD.RMO_OFICINA:=RMO_GBL;
        db_query(apel_id,apel_status);  
        db_get_first(apel_id,apel_status);
        
        while (apel_status = 0) do
        begin
                if not ((APELACIONES_RO_DSD.STATUS_APELACION = 'RETI') or
                   (APELACIONES_RO_DSD.STATUS_APELACION = 'TERM'))
                then
                   begin
                        counter_apel := counter_apel + 1;
                   end;
                {endif}

                db_get_next(apel_id,apel_status);
        end;
        {end while}
        
        if counter_apel > 0 
        then
                error(1055);    
        {endif}

        db_close(apel_id,apel_status);
        counter_apel :=0;
set_notrace();
end;
    



--------------------------------------------------------------------- */
