package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class AFTER_VISIT_APELACIONES2_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double KEY_PRESSED = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setKEY_PRESSED  ( RallyApplication __app, Parameter value )
  {
    ( ( AFTER_VISIT_APELACIONES2_ADL ) __app.getADL ( AFTER_VISIT_APELACIONES2_ADL.class ) ).KEY_PRESSED = value.getDouble ( );
  }  
    



  /**  */
  public static double getKEY_PRESSED  ( RallyApplication __app )
  {
    return ( ( AFTER_VISIT_APELACIONES2_ADL ) __app.getADL ( AFTER_VISIT_APELACIONES2_ADL.class ) ).KEY_PRESSED;
  }


  /**  */
  public static Double getKEY_PRESSEDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( AFTER_VISIT_APELACIONES2_ADL ) __app.getADL ( AFTER_VISIT_APELACIONES2_ADL.class ) ).KEY_PRESSED );
  }


  /**  */
  public static void setKEY_PRESSED  ( RallyApplication __app, double value )
  {
    ( ( AFTER_VISIT_APELACIONES2_ADL ) __app.getADL ( AFTER_VISIT_APELACIONES2_ADL.class ) ).KEY_PRESSED = value;
  }


  /**  */
  public static void setKEY_PRESSED  ( RallyApplication __app, Object value )
  {
    ( ( AFTER_VISIT_APELACIONES2_ADL ) __app.getADL ( AFTER_VISIT_APELACIONES2_ADL.class ) ).KEY_PRESSED = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static AFTER_VISIT_APELACIONES2_ADL get ( RallyApplication __app )
  {
    AFTER_VISIT_APELACIONES2_ADL adl = new AFTER_VISIT_APELACIONES2_ADL ( );
    __app.register ( adl, "AFTER_VISIT_APELACIONES2_ADL" );
    __app.setADL ( AFTER_VISIT_APELACIONES2_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    AFTER_VISIT_APELACIONES2_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    AFTER_VISIT_APELACIONES2_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "AFTER_VISIT_APELACIONES2_ADL" );
    if ( rObj != null && rObj instanceof AFTER_VISIT_APELACIONES2_ADL )
    {
      this.app.setADL ( AFTER_VISIT_APELACIONES2_ADL.class, ( AFTER_VISIT_APELACIONES2_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "AFTER_VISIT_APELACIONES2_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "AFTER_VISIT_APELACIONES2_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    KEY_PRESSED = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    if ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.INSAFTER ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      this.app.executeCommand ( RallyAppCommandFactory.IGNORE );
      return;
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.INSAFTER ) ) 
    {
      return;
    }
    if ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.ABORTACTION ) ) 
    {
      FLUJO_APELACIONES_ADL.setAPEL_STATUS ( this.app, "FAILURE" );
      this.app.returnTo ( "FLUJO_APELACIONES_ADL" ); if ( true ) return;
    }
    else
    {
      if ( ( Compare.equals ( this.app.OFIC_GBL, 1 ) ) && ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.EXITACTION ) )  ) 
      {
        this._condition1 = true;
      }
      else
      {
        this._condition1 = false;
      }
      if ( this._condition1 )
      {
        IMPRIMIR_APELACIONES_ADL.exec ( this.app );
        return;
      }
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.ABORTACTION ) ) 
    {
    }
    else
    {
      if ( this._condition1 )    //      if ( ( Compare.equals ( this.app.OFIC_GBL, 1 ) ) && ( Compare.equals ( KEY_PRESSED, RallyAppCommandFactory.EXITACTION ) )  ) 
      {
      }
      FLUJO_APELACIONES_ADL.setAPEL_STATUS ( this.app, "SUCCESS" );
      this.app.returnTo ( "FLUJO_APELACIONES_ADL" ); if ( true ) return;
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure after_visit_apelaciones2_adl;
var
        key_pressed     :number(9,0);

begin
set_trace();
key_pressed := get_cmd();

if key_pressed = insafter
then
   execute_cmd(ignore);
{endif}


if key_pressed = abortaction
   then
        begin
        flujo_apelaciones_adl.apel_status :='FAILURE';
        return_to flujo_apelaciones_adl;
        end;
    else
        begin
        if (OFIC_gbl = 1) and (key_pressed = exitaction)
        then
           begin
                call IMPRIMIR_APELACIONES_ADL;
           end;
        {endif}

        flujo_apelaciones_adl.apel_status :='SUCCESS';
        return_to flujo_apelaciones_adl;
        end;
{endif}
set_notrace();
end;
    



--------------------------------------------------------------------- */
