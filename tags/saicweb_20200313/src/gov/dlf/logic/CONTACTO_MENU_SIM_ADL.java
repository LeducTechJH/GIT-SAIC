package gov.dlf.logic;


import gov.dlf.facade.*;
import java.util.*;

import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CONTACTO_MENU_SIM_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double DIFF_DIAS = 0;



  public Date FECHA_CORR = null;

  public Date FECHA_ACTV = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setFECHA_CORR  ( RallyApplication __app, Parameter value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_CORR = value.getDate ( );
  }  

  
  /**  */
  public static void setFECHA_ACTV  ( RallyApplication __app, Parameter value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_ACTV = value.getDate ( );
  }  

  
  /**  */
  public static void setDIFF_DIAS  ( RallyApplication __app, Parameter value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).DIFF_DIAS = value.getDouble ( );
  }  
    


  /**  */
  public static Date getFECHA_CORR  ( RallyApplication __app )
  {
    return ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_CORR;
  }


  /**  */
  public static void setFECHA_CORR  ( RallyApplication __app, Date value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_CORR = value;
  }


  /**  */
  public static void setFECHA_CORR  ( RallyApplication __app, Object value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_CORR = ( Date ) value;
  }



  /**  */
  public static Date getFECHA_ACTV  ( RallyApplication __app )
  {
    return ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_ACTV;
  }


  /**  */
  public static void setFECHA_ACTV  ( RallyApplication __app, Date value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_ACTV = value;
  }


  /**  */
  public static void setFECHA_ACTV  ( RallyApplication __app, Object value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).FECHA_ACTV = ( Date ) value;
  }




  /**  */
  public static double getDIFF_DIAS  ( RallyApplication __app )
  {
    return ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).DIFF_DIAS;
  }


  /**  */
  public static Double getDIFF_DIASDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).DIFF_DIAS );
  }


  /**  */
  public static void setDIFF_DIAS  ( RallyApplication __app, double value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).DIFF_DIAS = value;
  }


  /**  */
  public static void setDIFF_DIAS  ( RallyApplication __app, Object value )
  {
    ( ( CONTACTO_MENU_SIM_ADL ) __app.getADL ( CONTACTO_MENU_SIM_ADL.class ) ).DIFF_DIAS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CONTACTO_MENU_SIM_ADL get ( RallyApplication __app )
  {
    CONTACTO_MENU_SIM_ADL adl = new CONTACTO_MENU_SIM_ADL ( );
    __app.register ( adl, "CONTACTO_MENU_SIM_ADL" );
    __app.setADL ( CONTACTO_MENU_SIM_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CONTACTO_MENU_SIM_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CONTACTO_MENU_SIM_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CONTACTO_MENU_SIM_ADL" );
    if ( rObj != null && rObj instanceof CONTACTO_MENU_SIM_ADL )
    {
      this.app.setADL ( CONTACTO_MENU_SIM_ADL.class, ( CONTACTO_MENU_SIM_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CONTACTO_MENU_SIM_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CONTACTO_MENU_SIM_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    FECHA_CORR = TruncService.trunc ( this.app.SYSTEM_DATE, "DDD" ) ;
    FECHA_ACTV = TruncService.trunc ( this.app.form ( "CALENDARIO_MAIN_FR" ).getDateItem ( "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ), "DDD" ) ;
    DIFF_DIAS = MathService.minus ( FECHA_CORR, FECHA_ACTV  );
    if ( Compare.gt ( DIFF_DIAS, 5 ) ) 
    {
      this.app.form ( "CALENDARIO_MAIN_FR" ).setItem ( "STS_ACTIVIDAD", "T"  );
    }
    else
    {
      this.app.form ( "CALENDARIO_MAIN_FR" ).setItem ( "STS_ACTIVIDAD", "C"  );
    }
    this.app.CERRA_GBL = "T";
    this.app.executeCommand ( RallyAppCommandFactory.EXITACTION );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    return; 

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE CONTACTO_MENU_SIM_ADL;

VAR
        FECHA_CORR      :       DATE;
        FECHA_ACTV      :       DATE;
        DIFF_DIAS       :       NUMBER(3);
        
BEGIN
SET_TRACE();
        FECHA_CORR := TRUNC(SYSTEM_DATE, 'DDD');
        FECHA_ACTV := TRUNC(CALENDARIO_MAIN_FR.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,
                        'DDD');

        DIFF_DIAS := FECHA_CORR - FECHA_ACTV;

        IF (DIFF_DIAS > 5) THEN
                CALENDARIO_MAIN_FR.STS_ACTIVIDAD := 'T';
        ELSE
                CALENDARIO_MAIN_FR.STS_ACTIVIDAD := 'C';

        CERRA_GBL := 'T';
        EXECUTE_CMD (EXITACTION);
SET_NOTRACE();
END;
                
    



--------------------------------------------------------------------- */
