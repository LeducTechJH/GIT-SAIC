package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class RETRO_INS_AVF_FCID_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;

  public double NID = 0;

  public double NCD = 0;



  public String TMP = null;

  public DataStore RR_INSERT_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setNID  ( RallyApplication __app, Parameter value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).TMP = value.getString ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_RO_DSD  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RR_INSERT_RO_DSD;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RR_INSERT_RO_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RR_INSERT_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNID  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NID;
  }


  /**  */
  public static Double getNIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NID );
  }


  /**  */
  public static void setNID  ( RallyApplication __app, double value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NID = value;
  }


  /**  */
  public static void setNID  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNCD  ( RallyApplication __app )
  {
    return ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NCD;
  }


  /**  */
  public static Double getNCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NCD );
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, double value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NCD = value;
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, Object value )
  {
    ( ( RETRO_INS_AVF_FCID_ADL ) __app.getADL ( RETRO_INS_AVF_FCID_ADL.class ) ).NCD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static RETRO_INS_AVF_FCID_ADL get ( RallyApplication __app )
  {
    RETRO_INS_AVF_FCID_ADL adl = new RETRO_INS_AVF_FCID_ADL ( );
    __app.register ( adl, "RETRO_INS_AVF_FCID_ADL" );
    __app.setADL ( RETRO_INS_AVF_FCID_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    RETRO_INS_AVF_FCID_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    RETRO_INS_AVF_FCID_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "RETRO_INS_AVF_FCID_ADL" );
    if ( rObj != null && rObj instanceof RETRO_INS_AVF_FCID_ADL )
    {
      this.app.setADL ( RETRO_INS_AVF_FCID_ADL.class, ( RETRO_INS_AVF_FCID_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "RETRO_INS_AVF_FCID_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "RETRO_INS_AVF_FCID_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    if ( Compare.gt ( this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FCID" ), this.app.SYSTEM_DATE ) ) 
    {
      this.app.setError ( 0, 7546 );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    RR_INSERT_RO_DSD = this.dm.create ( "RR_INSERT_RO_DSD" );
    RID = RR_INSERT_RO_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 1, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.reset ( RID );

    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJF" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "COD_SERVICIO", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "ACCION", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_IDENTIFICADO", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FCID" ));

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    RCD  = this.dm.firstRow ( RID );

    if ( Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 2, 6720 );
      this.app.errorFlag = false;
      RCD  = this.dm.dbClose ( RID );

      this.doReturn ( );
      return; 
    }
    RCD  = this.dm.dbClose ( RID );

    MOVE_STATUS_REFERIDO_RETRO_ADL.exec ( this.app );
    return;

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE RETRO_INS_AVF_FCID_ADL;
VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        NID     :       NUMBER;
        NCD     :       NUMBER;
        TMP     :       CHAR(7);


BEGIN
SET_TRACE();

IF RETRO_INSERT_FR.FCID > SYSTEM_DATE
THEN
BEGIN
ERROR(7546);
SET_FAILURE();
RETURN;
END;

DB_OPEN(RR_INSERT_RO_DSD, RID, RCD);
        IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_RESET(RID, RCD);


RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_FAM :=      RETRO_INSERT_FR.SSJF;
RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_SERV        :=      RETRO_INSERT_FR.SSJS;
RR_INSERT_RO_DSD.COD_SERVICIO           :=      RETRO_INSERT_FR.CS;
RR_INSERT_RO_DSD.ACCION                 :=      RETRO_INSERT_FR.ACCI;   
RR_INSERT_RO_DSD.FECHA_IDENTIFICADO     :=      RETRO_INSERT_FR.FCID;
DB_QUERY(RID, RCD);
DB_GET_FIRST(RID, RCD);
IF (RCD = 0)     THEN
BEGIN
                error(6720);
                SET_FAILURE();
                DB_CLOSE (RID,RCD);
                return;
END;
DB_CLOSE (RID,RCD);
CALL MOVE_STATUS_REFERIDO_RETRO_ADL;


SET_NOTRACE();
END;


    



--------------------------------------------------------------------- */
