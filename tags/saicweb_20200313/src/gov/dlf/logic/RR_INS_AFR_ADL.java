package gov.dlf.logic;


import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class RR_INS_AFR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;

  public double NID = 0;

  public double NCD = 0;



  public String TMP = null;

  public DataStore RR_INSERT_DSD = null;

  public DataStore RR_NOTI_INSERT_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setNID  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).TMP = value.getString ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_DSD  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_INSERT_DSD;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_INSERT_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_INSERT_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getRR_NOTI_INSERT_DSD  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_NOTI_INSERT_DSD;
  }


  /**  */
  public static void setRR_NOTI_INSERT_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_NOTI_INSERT_DSD = value;
  }


  /**  */
  public static void setRR_NOTI_INSERT_DSD  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RR_NOTI_INSERT_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNID  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NID;
  }


  /**  */
  public static Double getNIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NID );
  }


  /**  */
  public static void setNID  ( RallyApplication __app, double value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NID = value;
  }


  /**  */
  public static void setNID  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNCD  ( RallyApplication __app )
  {
    return ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NCD;
  }


  /**  */
  public static Double getNCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NCD );
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, double value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NCD = value;
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, Object value )
  {
    ( ( RR_INS_AFR_ADL ) __app.getADL ( RR_INS_AFR_ADL.class ) ).NCD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static RR_INS_AFR_ADL get ( RallyApplication __app )
  {
    RR_INS_AFR_ADL adl = new RR_INS_AFR_ADL ( );
    __app.register ( adl, "RR_INS_AFR_ADL" );
    __app.setADL ( RR_INS_AFR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    RR_INS_AFR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    RR_INS_AFR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "RR_INS_AFR_ADL" );
    if ( rObj != null && rObj instanceof RR_INS_AFR_ADL )
    {
      this.app.setADL ( RR_INS_AFR_ADL.class, ( RR_INS_AFR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "RR_INS_AFR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "RR_INS_AFR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    if ( ( Compare.equals ( this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ), "RETR" ) ) || ( Compare.equals ( this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ), "RRET" ) ) ) 
    {
      RR_INSERT_DSD = this.dm.create ( "RR_INSERT_DSD" );
      RID = RR_INSERT_DSD.getId ( );
      RCD = RallyDataStoreException.getDefault ( );
      if ( ! Compare.equals ( RCD, 0 ) ) 
      {
        this.app.setError ( 0, RCD );
        this.doReturn ( );
        return; 
      }

      RCD  = this.dm.reset ( RID );

      this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJF" ));
      this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJS" ));
      this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "COD_SERVICIO", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CS" ));
      this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "ACCION", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ));
      this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_IDENTIFICADO", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FCID" ));

      RCD  = this.dm.limitQueryFromBuffer ( RID );
      RCD  = this.dm.retrieve ( RID );

      RCD  = this.dm.firstRow ( RID );

      if ( ! Compare.equals ( RCD, 0 ) ) 
      {
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJF" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJS" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "COD_SERVICIO", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CS" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "ACCION", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_IDENTIFICADO", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FCID" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "DESDE", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "PCDE" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "HASTA", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "PCHA" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "RAZON_RETRO", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "RARE" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SIST_VERIFICACION", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "SVRE" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_POR_TSS", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "RPTS" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_TSS", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "RATS" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_ASIGNADO", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FATS" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_COMPLETAR", this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FDEC" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "STATUS", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "STRR" ));
        this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

        boolean tempBool = this.dm.getLogEnabled ( );          
        this.dm.setLogEnabled ( false );
        
        RCD  = this.dm.insertRow ( RID );

        this.dm.setLogEnabled ( tempBool );
        
        if ( ! Compare.equals ( RCD, 0 ) ) 
        {
          this.app.setError ( 1, RCD );
          this.doReturn ( );
          return; 
        }
      }
      else
      {
        this.app.setError ( 2, 6720 );
        this.app.errorFlag = false;
        RCD  = this.dm.dbClose ( RID );

        this.doReturn ( );
        return; 
      }

      RCD  = this.dm.dbCommit ( );
      if ( ! Compare.equals ( RCD, 0 ) ) 
      {
        this.app.setError ( 3, RCD );
        this.doReturn ( );
        return; 
      }
      RCD  = this.dm.dbClose ( RID );

      RR_NOTI_INSERT_DSD = this.dm.create ( "RR_NOTI_INSERT_DSD" );
      NID = RR_NOTI_INSERT_DSD.getId ( );
      NCD = RallyDataStoreException.getDefault ( );
      if ( ! Compare.equals ( NCD, 0 ) ) 
      {
        this.app.setError ( 4, NCD );
        this.doReturn ( );
        return; 
      }
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJF" ));
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJS" ));
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "COD_SERVICIO", this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CS" ));
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "COD_NOTIFICACION", "N171" );
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "FCH_NOTIFICACION", new Date ( ) );
      this.dm.setField ( this.dm.get ( "RR_NOTI_INSERT_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      boolean tempBool1 = this.dm.getLogEnabled ( );          
      this.dm.setLogEnabled ( false );
      
      NCD  = this.dm.insertRow ( NID );

      this.dm.setLogEnabled ( tempBool1 );
      
      if ( ! Compare.equals ( RCD, 0 ) ) 
      {
        this.app.setError ( 5, RCD );
        this.doReturn ( );
        return; 
      }

      NCD  = this.dm.dbCommit ( );
      if ( ! Compare.equals ( RCD, 0 ) ) 
      {
        this.app.setError ( 6, RCD );
        this.doReturn ( );
        return; 
      }
      NCD  = this.dm.dbClose ( NID );

    }
    RR_INS_DSS171_PKT.exec ( this.app );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    this.app.setError ( 7, 7525 );
    this.app.SS_JEFE_FAMILIA_GBL = this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJF" );
    this.app.SS_JEFE_SERVICIO_GBL = this.app.form ( "RETRO_INSERT_FR" ).getDoubleItem ( "SSJS" );
    this.app.COD_SERV_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CS" );
    this.app.STATUS_RETRO_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CSS" );
    this.app.STATUS_RECLA_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CSS" );
    this.app.RR_STATUS_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "CSS" );
    this.app.FECHA_IDENTIFICADO_GBL = this.app.form ( "RETRO_INSERT_FR" ).getDateItem ( "FCID" );
    this.app.ACCION_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" );
    this.app.RAZON_RETRO_GBL = this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "RARE" );
    if ( ( Compare.equals ( this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "RARE" ), "PAEX" ) ) && ( Compare.equals ( this.app.form ( "RETRO_INSERT_FR" ).getStringItem ( "ACCI" ), "RETR" ) )  ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      RETRO_PAEX_PKT.exec ( this.app );
      return;
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    this.doReturn ( );
    return; 

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE RR_INS_AFR_ADL;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        NID     :       NUMBER;
        NCD     :       NUMBER;
        TMP     :       CHAR(7);

SET_TRACE();
{
CALL_CMD('ignore');
}
BEGIN
IF (RETRO_INSERT_FR.ACCI = 'RETR') OR
   (RETRO_INSERT_FR.ACCI = 'RRET') THEN
BEGIN
DB_OPEN(RR_INSERT_DSD, RID, RCD);
        IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_RESET(RID, RCD);


RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM    :=      RETRO_INSERT_FR.SSJF;
RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV   :=      RETRO_INSERT_FR.SSJS;
RR_INSERT_DSD.COD_SERVICIO              :=      RETRO_INSERT_FR.CS;
RR_INSERT_DSD.ACCION                    :=      RETRO_INSERT_FR.ACCI;   
RR_INSERT_DSD.FECHA_IDENTIFICADO        :=      RETRO_INSERT_FR.FCID;
DB_QUERY(RID, RCD);
DB_GET_FIRST(RID, RCD);
IF (RCD <> 0)     THEN
BEGIN
RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM    :=      RETRO_INSERT_FR.SSJF;
RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV   :=      RETRO_INSERT_FR.SSJS;
RR_INSERT_DSD.COD_SERVICIO              :=      RETRO_INSERT_FR.CS;
RR_INSERT_DSD.ACCION                    :=      RETRO_INSERT_FR.ACCI;
RR_INSERT_DSD.FECHA_IDENTIFICADO        :=      RETRO_INSERT_FR.FCID;
RR_INSERT_DSD.DESDE                     :=      RETRO_INSERT_FR.PCDE;
RR_INSERT_DSD.HASTA                     :=      RETRO_INSERT_FR.PCHA;
RR_INSERT_DSD.RAZON_RETRO               :=      RETRO_INSERT_FR.RARE;
RR_INSERT_DSD.SIST_VERIFICACION         :=      RETRO_INSERT_FR.SVRE;
RR_INSERT_DSD.REFERIDO_POR_TSS          :=      RETRO_INSERT_FR.RPTS;
RR_INSERT_DSD.REFERIDO_TSS              :=      RETRO_INSERT_FR.RATS;
RR_INSERT_DSD.FECHA_ASIGNADO            :=      RETRO_INSERT_FR.FATS;
RR_INSERT_DSD.FECHA_COMPLETAR           :=      RETRO_INSERT_FR.FDEC;
RR_INSERT_DSD.STATUS                    :=      RETRO_INSERT_FR.STRR;
RR_INSERT_DSD.RMO_OFICINA               :=      RMO_GBL;
DB_INSERT(RID,RCD);
IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

END;
ELSE
BEGIN
                error(6720);
                SET_FAILURE();
                DB_CLOSE (RID,RCD);
                return;
END;
DB_COMMIT (RCD);
IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;
DB_CLOSE (RID,RCD);

DB_OPEN(RR_NOTI_INSERT_DSD, NID, NCD);
        IF (NCD <> 0)     THEN
                BEGIN
                        ERROR (NCD);
                        RETURN;
                END;


RR_NOTI_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM       :=      RETRO_INSERT_FR.SSJF;
RR_NOTI_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV      :=      RETRO_INSERT_FR.SSJS;
RR_NOTI_INSERT_DSD.COD_SERVICIO                 :=      RETRO_INSERT_FR.CS;
RR_NOTI_INSERT_DSD.COD_NOTIFICACION             :=      'N171';
RR_NOTI_INSERT_DSD.FCH_NOTIFICACION             :=      SYSTEM_DATE;
RR_NOTI_INSERT_DSD.RMO_OFICINA                  :=      RMO_GBL;
DB_INSERT(NID,NCD);
IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_COMMIT (NCD);
IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;


DB_CLOSE (NID,NCD);
END;

CALL RR_INS_DSS171_PKT;

ERROR(7525);

ss_jefe_familia_gbl     :=      retro_insert_fr.ssjf;
ss_jefe_servicio_gbl    :=      retro_insert_fr.ssjs;
cod_serv_gbl            :=      retro_insert_fr.cs;
STATUS_RETRO_GBL        :=      retro_insert_fr.css;
STATUS_RECLA_GBL        :=      retro_insert_fr.css;
RR_STATUS_GBL           :=      retro_insert_fr.css;
fecha_identificado_gbl  :=      retro_insert_fr.fcid;
accion_gbl              :=      retro_insert_fr.acci;
RAZON_RETRO_GBL         :=      RETRO_INSERT_FR.RARE;

IF (RETRO_INSERT_FR.RARE = 'PAEX') AND 
   (RETRO_INSERT_FR.ACCI = 'RETR') THEN
        CALL retro_paex_pkt;

END;

RETURN;
{
RETURN_TO RETROACTIVO_MAIN_MENU;
}
SET_NOTRACE();
    



--------------------------------------------------------------------- */
