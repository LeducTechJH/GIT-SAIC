package gov.dlf.presentation;


import gov.dlf.facade.*;
import gov.dlf.external.*;
import gov.dlf.logic.*;

import java.util.Date;



import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.jdatapanel.*;
import net.maintrend.jdatapanel.edit.*;
import net.maintrend.jdatapanel.commands.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class SERV_SOST_FRM
     extends Form
{
  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;



  // -------------------------------------------------------------------
  // ----------   Constructors and supporting methods   ----------------

  /**
   *
   */
  public SERV_SOST_FRM ( )
  {
    super ( );
    this.setName ( "SERV_SOST_FRM" );

    Debug.println ( Debug.TRACE, "SERV_SOST_FRM - constructor" );

    this.setDefinitionPath ( "gov/dlf/presentation/SERV_SOST_FRM.jdp" );
    String definition = ResourceUtil.getResourceText ( this.definitionPath );
    this.setDefinition     ( definition );

    this.setHighLightSelected   ( false );
    this.compressFieldLocations ( false, true );  // Compresses only Y-locations
  }


  /**
   * Overrides ancestor's script
   *
   * @param __app
   */
  public void setApplication ( Application __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.setDataManager ( this.app.getDataManager ( ) );
    }

    ICalculator           calculator;
    IBooleanValueProvider txtVisible;
    IBooleanValueProvider groupVisible;
    IObjectValueProvider  valueProvider;
    JDataPanelField       field;
    JDataPanelTextGroup   txtGroup;
    JDataPanelGroup       visGroup;

    this.setArguments ( "SERV_JEFE_GP", new SERV_SOST_FRM_GP_Arguments ( this ) );
    this.setArguments ( "SERV_GP", new LISTADO_SOST_FRM_GP_Arguments ( this ) );

    this.setObjectEvents ( );

  }


  /**
   * Overrides ancestor's method
   *
   * @return
   */
  public RallyApplication getApplication ( )
  {
    return this.app;
  }



  // -------------------------------------------------------------------
  // ----------   Action Sites   ---------------------------------------

  /**
   *
   */
  public void setObjectEvents ( )
  {	    
	    this.registerListener ( "DUMMY_FIELD", JDataPanelListener.BEFOREENTER, new JDataPanelListener ( )
	    {
	      public boolean eventFired ( String eventName )
	      {
	        app.errorFlag = true; SOSTENEDOR_LIST_CHECK_NUM_SERVICIOS_ADL.exec ( app ); return app.errorFlag;
	      }
	    } );
	    this.registerListener ( "DUMMY_FIELD", JDataPanelListener.BEFORELEAVE, new JDataPanelListener ( )
	    {
	      public boolean eventFired ( String eventName )
	      {
	        app.errorFlag = true; SOSTENEDOR_LIST_CHECK_NUM_SERVICIOS_AF_ADL.exec ( app ); return app.errorFlag;
	      }
	    } );
	    this.registerListener ( "TIPO_TRANS", JDataPanelListener.BEFORELEAVE, new JDataPanelListener ( )
		{
			public boolean eventFired ( String eventName )
			{
				app.errorFlag = true; 
				String serv = __form.getStringValue ( "SERV_SOST" );
				String tipo = __form.getStringValue ( "TIPO_TRANS" );
				if(Compare.equals(serv, "TRAN"))
				{
					if( ! (Compare.equals(tipo, "VEPR") || (Compare.equals(tipo, "VEPU")))) 
					{
						app.setError ("0", "Esta Sub-Categoria no puede ser seleccionada para este servicio.");
						app.errorFlag = false; 
					}
				}
				else if(Compare.equals(serv, "DIET"))
				{
					if( ! (Compare.equals(tipo, "ALMU") || (Compare.equals(tipo, "CENA")) || (Compare.equals(tipo, "MERI"))))
					{
						app.setError ("0", "Esta Sub-Categoria no puede ser seleccionada para este servicio.");
						app.errorFlag = false; 
					}
				}
				else if(Compare.equals(serv, "EMER"))
				{
					app.form("SERV_SOST_FRM").setItem("NUM_DIAS_ACT", 1);
					if( ! (Compare.equals(tipo, "HERR") || (Compare.equals(tipo, "CUTA")) || (Compare.equals(tipo, "LIBS")) || (Compare.equals(tipo, "CERT")) || (Compare.equals(tipo, "LICP")) || (Compare.equals(tipo, "ROPA"))))
					{
						app.setError ("0", "Esta Sub-Categoria no puede ser seleccionada para este servicio.");
						app.errorFlag = false;
					}
				}
				//TODO INCENTIVO
//				if(Compare.equals(serv, "INCE"))
//				{
//					if( ! (Compare.equals(tipo, "ALMU") || (Compare.equals(tipo, "CENA")) || (Compare.equals(tipo, "MERI"))))
//					{
//						app.setError ("0", "Esta Sub-Categoria no puede ser seleccionada para este servicio.");
//						app.errorFlag = false;
//					}
//				}
				return app.errorFlag;
			}
		} );
		this.registerListener ( "AJUSTE_SOST", JDataPanelListener.BEFORELEAVE, new JDataPanelListener ( )
		{
			public boolean eventFired ( String eventName )
			{
				app.errorFlag = true; 
				double ajuste = __form.getDoubleValue ( "AJUSTE_SOST" );
				double dias = __form.getDoubleValue ( "NUM_DIAS_ACT" );
				if (Compare.lt(ajuste, 0))
				{
					app.form("SERV_SOST_FRM").setItem("AJUSTE_SOST", 0);
				}
				if (Compare.gt(ajuste, dias))
				{
					app.setError ("0", "Dias ausente no puede sobrepasar dias de actividad..");
					app.errorFlag = false; 
				}
				return app.errorFlag;
			}
		} );
		this.registerListener ( "NUM_DIAS_ACT", JDataPanelListener.BEFORELEAVE, new JDataPanelListener ( )
		{
			public boolean eventFired ( String eventName )
			{
				app.errorFlag = true; 
				String serv = __form.getStringValue ( "SERV_SOST" );
				double dias = __form.getDoubleValue ( "NUM_DIAS_ACT" );
				if (Compare.equals(serv, "EMER") && Compare.gt(dias, 1))
				{
					app.setError ("0", "Para este servicio solo se paga un dia.");
					app.form("SERV_SOST_FRM").setItem("NUM_DIAS_ACT", 1);
					app.errorFlag = false; 
				}
				if(Compare.gt(dias, 31))
				{
					app.setError ("0", "Maximo de dias permitidos son 31.");
					app.errorFlag = false; 
				}
				return app.errorFlag;
			}
		} );
		this.registerListener ( "ESNEGATIVO", JDataPanelListener.BEFORELEAVE, new JDataPanelListener ( )
	    {
	      public boolean eventFired ( String eventName )
	      {

	        String pariente = app.form ( "SERV_SOST_FRM" ).getStringItem( "ESNEGATIVO" );
			if ( ! ( ( Compare.equals ( pariente, "D" ) ) || ( Compare.equals ( pariente, "A" ) ) ) )
			{
				app.setError("0", "Ingrese con una 'D' ó una 'A'.");
				app.errorFlag = false; 
			}
			else
			{
				app.errorFlag = true; 
			}
	        return app.errorFlag;
	      }
	    } );
		this.registerListener ( "SERV_SOST_FRM", JDataPanelListener.AFTERLOAD, new JDataPanelListener ( )
		{
//			  public boolean eventFired ( String eventName )
//			  {
//			        app.errorFlag = true; CHECK_NUM_SERVICIOS_INSERT_ADL.exec ( app ); return app.errorFlag;
//			   }
		    } );
  }
  }






/**
 *
 */
class SERV_SOST_FRM_GP_Arguments extends JDataPanelGroupArguments
{
  /**  */
  protected Form model;
  /**  */
  protected SAIC_DMQ_ORA_Application app = null;

  /**  */
  public SERV_SOST_FRM_GP_Arguments ( Form form )
  {
    this.model = form;

    this.setArgName ( "SSN_PAR" );
  }

  /**  */
  public Object getArgValue ( String argName )
  {
    if ( this.app == null ) this.app = ( SAIC_DMQ_ORA_Application ) this.model.getApplication ( );
    if ( argName == null )
    {
      return null;
    }
    else if ( argName.equals ( "SSN_PAR" ) )
    {
      return this.app.getSSN_GBL( ); // Global Variable
    }
    return null;
  }
}


class LISTADO_SOST_FRM_GP_Arguments extends JDataPanelGroupArguments
{
  /**  */
  protected Form model;
  /**  */
  protected SAIC_DMQ_ORA_Application app = null;

  /**  */
  public LISTADO_SOST_FRM_GP_Arguments ( Form form )
  {
    this.model = form;

    this.setArgName ( "SSN_PAR" );
  }

  /**  */
  public Object getArgValue ( String argName )
  {
    if ( this.app == null ) this.app = ( SAIC_DMQ_ORA_Application ) this.model.getApplication ( );
    if ( argName == null )
    {
      return null;
    }
    else if ( argName.equals ( "SSN_PAR" ) )
    {
    	 return this.app.form("SERV_SOST_FRM").getDoubleItem( "SEGURO_SOCIAL_CLIENTE" );
    }
    return null;
  }
}










