package gov.dlf.logic;


import gov.dlf.facade.*;
import java.util.*;

import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class LLENAR_INF_EST_APEL_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double APELACIONES_ID = 0;

  public double APELACIONES_STATUS = 0;

  public double COUNTER = 0;



  public Date FECHA_NULA = null;

  public String FECHA = null;

  public DataStore APELACIONES_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setAPELACIONES_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setAPELACIONES_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setCOUNTER  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).COUNTER = value.getDouble ( );
  }  

  
  /**  */
  public static void setFECHA_NULA  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA_NULA = value.getDate ( );
  }  

  
  /**  */
  public static void setFECHA  ( RallyApplication __app, Parameter value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA = value.getString ( );
  }  
    


  /**  */
  public static Date getFECHA_NULA  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA_NULA;
  }


  /**  */
  public static void setFECHA_NULA  ( RallyApplication __app, Date value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA_NULA = value;
  }


  /**  */
  public static void setFECHA_NULA  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA_NULA = ( Date ) value;
  }



  /**  */
  public static String getFECHA  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA;
  }


  /**  */
  public static void setFECHA  ( RallyApplication __app, String value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA = value;
  }


  /**  */
  public static void setFECHA  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).FECHA = ( String ) value;
  }



  /**  */
  public static DataStore getAPELACIONES_RO_DSD  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_RO_DSD;
  }


  /**  */
  public static void setAPELACIONES_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_RO_DSD = value;
  }


  /**  */
  public static void setAPELACIONES_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getAPELACIONES_ID  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_ID;
  }


  /**  */
  public static Double getAPELACIONES_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_ID );
  }


  /**  */
  public static void setAPELACIONES_ID  ( RallyApplication __app, double value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_ID = value;
  }


  /**  */
  public static void setAPELACIONES_ID  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getAPELACIONES_STATUS  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_STATUS;
  }


  /**  */
  public static Double getAPELACIONES_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_STATUS );
  }


  /**  */
  public static void setAPELACIONES_STATUS  ( RallyApplication __app, double value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_STATUS = value;
  }


  /**  */
  public static void setAPELACIONES_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).APELACIONES_STATUS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCOUNTER  ( RallyApplication __app )
  {
    return ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).COUNTER;
  }


  /**  */
  public static Double getCOUNTERDouble ( RallyApplication __app )
  {
    return new Double ( ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).COUNTER );
  }


  /**  */
  public static void setCOUNTER  ( RallyApplication __app, double value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).COUNTER = value;
  }


  /**  */
  public static void setCOUNTER  ( RallyApplication __app, Object value )
  {
    ( ( LLENAR_INF_EST_APEL_ADL ) __app.getADL ( LLENAR_INF_EST_APEL_ADL.class ) ).COUNTER = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static LLENAR_INF_EST_APEL_ADL get ( RallyApplication __app )
  {
    LLENAR_INF_EST_APEL_ADL adl = new LLENAR_INF_EST_APEL_ADL ( );
    __app.register ( adl, "LLENAR_INF_EST_APEL_ADL" );
    __app.setADL ( LLENAR_INF_EST_APEL_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    LLENAR_INF_EST_APEL_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    LLENAR_INF_EST_APEL_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "LLENAR_INF_EST_APEL_ADL" );
    if ( rObj != null && rObj instanceof LLENAR_INF_EST_APEL_ADL )
    {
      this.app.setADL ( LLENAR_INF_EST_APEL_ADL.class, ( LLENAR_INF_EST_APEL_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "LLENAR_INF_EST_APEL_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "LLENAR_INF_EST_APEL_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    FECHA_NULA = TruncService.setNull ( FECHA_NULA  );
    COUNTER = 0;
    this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "FECHA_DESDE", this.app.FECHA_DESDE_GBL  );
    this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "FECHA_HASTA", this.app.FECHA_HASTA_GBL  );
    FECHA = StringService.toStringValue  ( this.app.FECHA_HASTA_GBL ,"dd-MMM-yyyy" ,StringService.Language.SPANISH ) + ":23:59:59.99";
    this.app.FECHA_HASTA_GBL = RallySpanishDatesParser.parseDateString ( FECHA, "dd-Mon-YYYY:HH24:MI:SS.99" );
    APELACIONES_RO_DSD = this.dm.create ( "APELACIONES_RO_DSD" );
    APELACIONES_ID = APELACIONES_RO_DSD.getId ( );
    APELACIONES_STATUS = RallyDataStoreException.getDefault ( );

    APELACIONES_STATUS  = this.dm.reset ( APELACIONES_ID );

    this.dm.setField ( this.dm.get ( "APELACIONES_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    APELACIONES_STATUS  = this.dm.limitQueryFromBuffer ( APELACIONES_ID );
    APELACIONES_STATUS  = this.dm.retrieve ( APELACIONES_ID );

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RETIRO" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RETIRO" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RETIRO" ), FECHA_NULA ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "RETIRADAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_VISTA_APELACION" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_VISTA_APELACION" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_VISTA_APELACION" ), FECHA_NULA ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "CELEBRADAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), FECHA_NULA ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "DEC_RECIBIDAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), FECHA_NULA ) )  && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "DECISION_JA" ), "REVO" ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "REVOCADAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), FECHA_NULA ) )  && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "DECISION_JA" ), "CONF" ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "CONFIRMADAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECIBO_RESOL" ), FECHA_NULA ) )  && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "DECISION_JA" ), "DESE" ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "DESESTIMADAS", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), FECHA_NULA ) )  && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "DECISION_JA1" ), "ALUG" ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "A_LUGAR", COUNTER  );
    }
    COUNTER = 0;

    APELACIONES_STATUS  = this.dm.firstRow ( APELACIONES_ID );

    while ( Compare.equals ( APELACIONES_STATUS, 0 ) ) 
    {
      if ( ( Compare.ge ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), this.app.FECHA_DESDE_GBL ) ) && ( Compare.le ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), this.app.FECHA_HASTA_GBL ) )  && ( ! Compare.equals ( this.dm.getFieldDate ( this.dm.get ( "APELACIONES_RO_DSD" ), "FCH_RECONSIDERA" ), FECHA_NULA ) )  && ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "APELACIONES_RO_DSD" ), "DECISION_JA1" ), "NALU" ) )  ) 
      {
        COUNTER = MathService.plus ( COUNTER, 1  );
      }

      APELACIONES_STATUS  = this.dm.nextRow ( APELACIONES_ID );

    }
    if ( ! Compare.equals ( COUNTER, 0 ) ) 
    {
      this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "NO_A_LUGAR", COUNTER  );
    }
    APELACIONES_STATUS  = this.dm.dbClose ( APELACIONES_ID );

    this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "FECHA_REPORTE", this.app.SYSTEM_DATE  );
    this.app.form ( "INFORME_ESTADISTICO_APEL_FR" ).setItem ( "NUMERO_TSS", this.app.TECNICO_NUM_GBL  );

  }
}



/* ---------------------------------------------------------------------


     
procedure  llenar_inf_est_apel_adl;
var
        apelaciones_id          : number(9,0);
        apelaciones_status      : number(9,0);

        counter                 : number(4,0);
        fecha_nula              : date;
        fecha                   : char;
begin
set_trace();
        make_null(fecha_nula);
        counter := 0;
        INFORME_ESTADISTICO_APEL_FR.FECHA_DESDE:= fecha_desde_gbl;
        INFORME_ESTADISTICO_APEL_FR.FECHA_HASTA:= fecha_hasta_gbl;
        
        fecha := to_char(fecha_hasta_gbl,'dd-Mon-YYYY')||':23:59:59.99';
        fecha_hasta_gbl := to_date(fecha,'dd-Mon-YYYY:HH24:MI:SS.99');
        
        db_open(APELACIONES_RO_DSD,apelaciones_id,apelaciones_status);
        db_reset(apelaciones_id,apelaciones_status);
        APELACIONES_RO_DSD.RMO_OFICINA := RMO_GBL;
        db_query(apelaciones_id,apelaciones_status);

{ Fecha Retiro }
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_retiro >= fecha_desde_gbl) an
d
                           (apelaciones_ro_dsd.fch_retiro <= fecha_hasta_gbl) an
d
                           (apelaciones_ro_dsd.fch_retiro <> fecha_nula)
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.retiradas :=counter;
        {endif}


{ Fecha celebrada  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_vista_apelacion >= fecha_desd
e_gbl) and
                           (apelaciones_ro_dsd.fch_vista_apelacion <= fecha_hast
a_gbl) and
                           (apelaciones_ro_dsd.fch_vista_apelacion <> fecha_nula
)
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.celebradas :=counter;
        {endif}
{***********}


{ Fecha Decisiones Recibidas }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_recibo_resol >= fecha_desde_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <= fecha_hasta_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <> fecha_nula)
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.dec_recibidas :=counter;
        {endif}
{***********}

{ Fecha Revocada  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_recibo_resol >= fecha_desde_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <= fecha_hasta_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <> fecha_nula) a
nd
                           (APELACIONES_RO_DSD.DECISION_JA = 'REVO')
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.revocadas :=counter;
        {endif}
{***********}

{ Fecha Confirmadas  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_recibo_resol >= fecha_desde_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <= fecha_hasta_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <> fecha_nula) a
nd
                           (APELACIONES_RO_DSD.DECISION_JA = 'CONF')
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.confirmadas :=counter;
        {endif}
{***********}

{ Fecha Desestimadas  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_recibo_resol >= fecha_desde_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <= fecha_hasta_g
bl) and
                           (apelaciones_ro_dsd.fch_recibo_resol <> fecha_nula) a
nd
                           (APELACIONES_RO_DSD.DECISION_JA = 'DESE')
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.desestimadas :=counter;
        {endif}
{***********}

{ Fecha A Lugar  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_reconsidera >= fecha_desde_gb
l) and
                           (apelaciones_ro_dsd.fch_reconsidera <= fecha_hasta_gb
l) and
                           (apelaciones_ro_dsd.fch_reconsidera <> fecha_nula) an
d
                           (APELACIONES_RO_DSD.DECISION_JA1 = 'ALUG')
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.a_lugar :=counter;
        {endif}
{***********}

{ Fecha No A Lugar  }
        counter := 0;
        db_get_first(apelaciones_id,apelaciones_status);
        while(apelaciones_status = 0) do
                begin
                        if (apelaciones_ro_dsd.fch_reconsidera >= fecha_desde_gb
l) and
                           (apelaciones_ro_dsd.fch_reconsidera <= fecha_hasta_gb
l) and
                           (apelaciones_ro_dsd.fch_reconsidera <> fecha_nula) an
d
                           (APELACIONES_RO_DSD.DECISION_JA1 = 'NALU')
                        then
                                counter := counter + 1;
                        db_get_next(apelaciones_id,apelaciones_status);
                end;
        if counter <> 0 then
                INFORME_ESTADISTICO_APEL_FR.no_a_lugar :=counter;
        {endif}
{***********}
        db_close(apelaciones_id,apelaciones_status);    
        INFORME_ESTADISTICO_APEL_FR.FECHA_REPORTE := system_date;
        INFORME_ESTADISTICO_APEL_FR.NUMERO_TSS := TECNICO_NUM_GBL;
set_notrace();
end;


    



--------------------------------------------------------------------- */
