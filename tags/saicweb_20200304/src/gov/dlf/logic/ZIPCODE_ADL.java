package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class ZIPCODE_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double ZIP = 0;

  public double ZIPCODE_TABLE = 0;

  public double ZIPCODE_STATUS = 0;



  public String CIUDAD = null;

  public String ESTADO = null;

  public DataStore ZIPCODE_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setZIP  ( RallyApplication __app, Parameter value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIP = value.getDouble ( );
  }  

  
  /**  */
  public static void setCIUDAD  ( RallyApplication __app, Parameter value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).CIUDAD = value.getString ( );
  }  

  
  /**  */
  public static void setESTADO  ( RallyApplication __app, Parameter value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ESTADO = value.getString ( );
  }  

  
  /**  */
  public static void setZIPCODE_TABLE  ( RallyApplication __app, Parameter value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_TABLE = value.getDouble ( );
  }  

  
  /**  */
  public static void setZIPCODE_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_STATUS = value.getDouble ( );
  }  
    


  /**  */
  public static String getCIUDAD  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).CIUDAD;
  }


  /**  */
  public static void setCIUDAD  ( RallyApplication __app, String value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).CIUDAD = value;
  }


  /**  */
  public static void setCIUDAD  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).CIUDAD = ( String ) value;
  }



  /**  */
  public static String getESTADO  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ESTADO;
  }


  /**  */
  public static void setESTADO  ( RallyApplication __app, String value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ESTADO = value;
  }


  /**  */
  public static void setESTADO  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ESTADO = ( String ) value;
  }



  /**  */
  public static DataStore getZIPCODE_DSD  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_DSD;
  }


  /**  */
  public static void setZIPCODE_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_DSD = value;
  }


  /**  */
  public static void setZIPCODE_DSD  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getZIP  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIP;
  }


  /**  */
  public static Double getZIPDouble ( RallyApplication __app )
  {
    return new Double ( ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIP );
  }


  /**  */
  public static void setZIP  ( RallyApplication __app, double value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIP = value;
  }


  /**  */
  public static void setZIP  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIP = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getZIPCODE_TABLE  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_TABLE;
  }


  /**  */
  public static Double getZIPCODE_TABLEDouble ( RallyApplication __app )
  {
    return new Double ( ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_TABLE );
  }


  /**  */
  public static void setZIPCODE_TABLE  ( RallyApplication __app, double value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_TABLE = value;
  }


  /**  */
  public static void setZIPCODE_TABLE  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_TABLE = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getZIPCODE_STATUS  ( RallyApplication __app )
  {
    return ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_STATUS;
  }


  /**  */
  public static Double getZIPCODE_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_STATUS );
  }


  /**  */
  public static void setZIPCODE_STATUS  ( RallyApplication __app, double value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_STATUS = value;
  }


  /**  */
  public static void setZIPCODE_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( ZIPCODE_ADL ) __app.getADL ( ZIPCODE_ADL.class ) ).ZIPCODE_STATUS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static ZIPCODE_ADL get ( RallyApplication __app )
  {
    ZIPCODE_ADL adl = new ZIPCODE_ADL ( );
    __app.register ( adl, "ZIPCODE_ADL" );
    __app.setADL ( ZIPCODE_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    ZIPCODE_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    ZIPCODE_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }


  /**
   * Populating the parameter set object with return values
   */
  protected void returnParms ( ParameterSet ps, double ZIP, String CIUDAD, String ESTADO )
  {
    ps.reset ( );
    ps.set ( ZIP );
    ps.set ( CIUDAD );
    ps.set ( ESTADO );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "ZIPCODE_ADL" );
    if ( rObj != null && rObj instanceof ZIPCODE_ADL )
    {
      this.app.setADL ( ZIPCODE_ADL.class, ( ZIPCODE_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "ZIPCODE_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "ZIPCODE_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {
    ps.reset ( );
    ZIP = ps.getDouble( );
    CIUDAD = ps.getString( );
    ESTADO = ps.getString( );

    ZIPCODE_DSD = this.dm.create ( "ZIPCODE_DSD" );
    ZIPCODE_TABLE = ZIPCODE_DSD.getId ( );
    ZIPCODE_STATUS = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( ZIPCODE_STATUS, 0 ) ) 
    {
      CIUDAD = "**************";
      ESTADO = "**";
    }

    ZIPCODE_STATUS  = this.dm.reset ( ZIPCODE_TABLE );

    if ( ! Compare.equals ( ZIPCODE_STATUS, 0 ) ) 
    {
      CIUDAD = "**************";
      ESTADO = "**";
      ZIPCODE_STATUS  = this.dm.dbClose ( ZIPCODE_TABLE );
      
      this.returnParms ( ps, ZIP, CIUDAD, ESTADO );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "ZIPCODE_DSD" ), "ZIP_CODE", ZIP );

    ZIPCODE_STATUS  = this.dm.limitQueryFromBuffer ( ZIPCODE_TABLE );
    ZIPCODE_STATUS  = this.dm.retrieve ( ZIPCODE_TABLE );

    if ( ! Compare.equals ( ZIPCODE_STATUS, 0 ) ) 
    {
      CIUDAD = "**************";
      ESTADO = "**";
      ZIPCODE_STATUS  = this.dm.dbClose ( ZIPCODE_TABLE );
      
      this.returnParms ( ps, ZIP, CIUDAD, ESTADO );
      this.doReturn ( );
      return; 
    }

    ZIPCODE_STATUS  = this.dm.firstRow ( ZIPCODE_TABLE );

    if ( ! Compare.equals ( ZIPCODE_STATUS, 0 ) ) 
    {
      CIUDAD = "**************";
      ESTADO = "**";
    }
    else
    {
      CIUDAD = this.dm.getFieldString ( this.dm.get ( "ZIPCODE_DSD" ), "CIUDAD" );
      ESTADO = this.dm.getFieldString ( this.dm.get ( "ZIPCODE_DSD" ), "ESTADO" );
    }
    ZIPCODE_STATUS  = this.dm.dbClose ( ZIPCODE_TABLE );

    this.returnParms ( ps, ZIP, CIUDAD, ESTADO );

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE zipcode_adl       (   var zip   : number (5,0);
                                var ciudad: char(20);
                                var estado: char(2););

var     zipcode_table:  number(9,0);
        zipcode_status: number(9,0);

begin
        db_open(zipcode_DSD,zipcode_table,zipcode_status);
        IF zipcode_STATUS <> 0 THEN
                begin
                        ciudad:='**************';
                        estado:='**';
                end;
        {endif}
        db_reset(zipcode_table,zipcode_status);
        IF zipcode_STATUS <> 0 THEN
                begin
                        ciudad:='**************';
                        estado:='**';
                        db_close(zipcode_table,zipcode_status);
                        return;
                end;
        {endif}
        zipcode_dsd.zip_code := zip;
        db_query(zipcode_table,zipcode_status);
        IF zipcode_STATUS <> 0 THEN
                begin
                        ciudad:='**************';
                        estado:='**';
                        db_close(zipcode_table,zipcode_status);
                        return;
                end;
        {endif}
        db_get_first(zipcode_table,zipcode_status);
        IF zipcode_STATUS <> 0 THEN
                begin
                        ciudad:='**************';
                        estado:='**';
                end;
        else
                begin
                        ciudad := zipcode_dsd.ciudad;
                        estado := zipcode_dsd.estado;
                end;
        {endif}
        db_close(zipcode_table,zipcode_status);
end;
    



--------------------------------------------------------------------- */
