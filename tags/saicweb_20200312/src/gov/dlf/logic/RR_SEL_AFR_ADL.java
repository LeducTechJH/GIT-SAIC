package gov.dlf.logic;


import gov.dlf.facade.*;
import java.util.*;

import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class RR_SEL_AFR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;



  public String TMP = null;

  public Date NLD = null;

  public DataStore RR_INSERT_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).TMP = value.getString ( );
  }  

  
  /**  */
  public static void setNLD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).NLD = value.getDate ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static Date getNLD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).NLD;
  }


  /**  */
  public static void setNLD  ( RallyApplication __app, Date value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).NLD = value;
  }


  /**  */
  public static void setNLD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).NLD = ( Date ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_DSD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RR_INSERT_DSD;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RR_INSERT_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_DSD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RR_INSERT_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_AFR_ADL ) __app.getADL ( RR_SEL_AFR_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static RR_SEL_AFR_ADL get ( RallyApplication __app )
  {
    RR_SEL_AFR_ADL adl = new RR_SEL_AFR_ADL ( );
    __app.register ( adl, "RR_SEL_AFR_ADL" );
    __app.setADL ( RR_SEL_AFR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    RR_SEL_AFR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    RR_SEL_AFR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "RR_SEL_AFR_ADL" );
    if ( rObj != null && rObj instanceof RR_SEL_AFR_ADL )
    {
      this.app.setADL ( RR_SEL_AFR_ADL.class, ( RR_SEL_AFR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "RR_SEL_AFR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "RR_SEL_AFR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NLD = TruncService.setNull ( NLD  );
    RR_INSERT_DSD = this.dm.create ( "RR_INSERT_DSD" );
    RID = RR_INSERT_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 0, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.reset ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 1, RCD );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "COD_SERVICIO", this.app.form ( "RETRO_SELECT_FR" ).getStringItem ( "COD_SERVICIO" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_IDENTIFICADO", this.app.form ( "RETRO_SELECT_FR" ).getDateItem ( "FCID" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "STATUS", this.app.form ( "RETRO_SELECT_FR" ).getStringItem ( "STRR" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 2, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.firstRow ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 3, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_TSS", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "RATS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_ASIGNADO", this.app.form ( "RETRO_SELECT_FR" ).getDateItem ( "FATS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_SERA_PROCESADO_1", this.app.form ( "RETRO_SELECT_FR" ).getDateItem ( "FCP1" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_TSS", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "RATS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_SERA_PROCESADO_2", this.app.form ( "RETRO_SELECT_FR" ).getDateItem ( "FCP2" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_TSS_2", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "TSS2" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "FECHA_SERA_PROCESADO_3", this.app.form ( "RETRO_SELECT_FR" ).getDateItem ( "FCP3" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_DSD" ), "REFERIDO_TSS_3", this.app.form ( "RETRO_SELECT_FR" ).getDoubleItem ( "TSS3" ));

    RCD  = this.dm.update ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 4, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.dbCommit ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 5, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    RCD  = this.dm.dbClose ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 6, RCD );
      this.doReturn ( );
      return; 
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE RR_SEL_AFR_ADL;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        TMP     :       CHAR(7);
        NLD     :       DATE;

SET_TRACE();

MAKE_NULL(NLD);

DB_OPEN(RR_INSERT_DSD, RID, RCD);
        IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_RESET (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_FAM    :=      RETRO_SELECT_FR.SEGURO_SOCIAL_JE
FE_FAM;
RR_INSERT_DSD.SEGURO_SOCIAL_JEFE_SERV   :=      RETRO_SELECT_FR.SEGURO_SOCIAL_JE
FE_SERV;
RR_INSERT_DSD.COD_SERVICIO              :=      RETRO_SELECT_FR.COD_SERVICIO;
RR_INSERT_DSD.FECHA_IDENTIFICADO        :=      RETRO_SELECT_FR.FCID;
RR_INSERT_DSD.STATUS                    :=      RETRO_SELECT_FR.STRR;
RR_INSERT_DSD.RMO_OFICINA               :=      RMO_GBL;
DB_QUERY (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_GET_FIRST(RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        SET_FAILURE();
                        RETURN;
                END;

RR_INSERT_DSD.REFERIDO_TSS      :=      RETRO_SELECT_FR.RATS;
RR_INSERT_DSD.FECHA_ASIGNADO    :=      RETRO_SELECT_FR.FATS;
RR_INSERT_DSD.FECHA_SERA_PROCESADO_1    := RETRO_SELECT_FR.FCP1;
RR_INSERT_DSD.REFERIDO_TSS      :=      RETRO_SELECT_FR.RATS;
RR_INSERT_DSD.FECHA_SERA_PROCESADO_2    := RETRO_SELECT_FR.FCP2;
RR_INSERT_DSD.REFERIDO_TSS_2    :=      RETRO_SELECT_FR.TSS2;
RR_INSERT_DSD.FECHA_SERA_PROCESADO_3    := RETRO_SELECT_FR.FCP3;
RR_INSERT_DSD.REFERIDO_TSS_3    :=      RETRO_SELECT_FR.TSS3;

{
BEGIN
IF RETRO_SELECT_FR.FCP1         <>      NLD THEN
RR_INSERT_DSD.FECHA_SERA_PROCESADO_1    := RETRO_SELECT_FR.FCP1;

IF RETRO_SELECT_FR.FCP2         <>      NLD THEN
RR_INSERT_DSD.FECHA_SERA_PROCESADO_2    := RETRO_SELECT_FR.FCP2;

IF RETRO_SELECT_FR.FCP3         <>      NLD THEN
RR_INSERT_DSD.FECHA_SERA_PROCESADO_3    := RETRO_SELECT_FR.FCP3;
END;
}

DB_UPDATE (RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        SET_FAILURE();
                        RETURN;
                END;

DB_COMMIT (RCD);
        IF (RCD <> 0) THEN
        BEGIN
                ERROR (RCD);
                SET_FAILURE();
                RETURN;
        END;

DB_CLOSE (RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

SET_NOTRACE();
    



--------------------------------------------------------------------- */
