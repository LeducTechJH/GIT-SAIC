package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class RR_SEL_BFR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------
 
  public boolean _condition0 = false;
 
  public boolean _condition1 = false;
 
  public boolean _condition2 = false;
 
  public boolean _condition3 = false;

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;

  public double NID = 0;

  public double NCD = 0;

  public double NUL = 0;



  public String TMP = null;

  public String NAME = null;

  public DataStore RR_INSERT_RO_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setNID  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNCD  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).TMP = value.getString ( );
  }  

  
  /**  */
  public static void setNUL  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NUL = value.getDouble ( );
  }  

  
  /**  */
  public static void setNAME  ( RallyApplication __app, Parameter value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NAME = value.getString ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static String getNAME  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NAME;
  }


  /**  */
  public static void setNAME  ( RallyApplication __app, String value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NAME = value;
  }


  /**  */
  public static void setNAME  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NAME = ( String ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_RO_DSD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RR_INSERT_RO_DSD;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RR_INSERT_RO_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RR_INSERT_RO_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNID  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NID;
  }


  /**  */
  public static Double getNIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NID );
  }


  /**  */
  public static void setNID  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NID = value;
  }


  /**  */
  public static void setNID  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNCD  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NCD;
  }


  /**  */
  public static Double getNCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NCD );
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NCD = value;
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUL  ( RallyApplication __app )
  {
    return ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NUL;
  }


  /**  */
  public static Double getNULDouble ( RallyApplication __app )
  {
    return new Double ( ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NUL );
  }


  /**  */
  public static void setNUL  ( RallyApplication __app, double value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NUL = value;
  }


  /**  */
  public static void setNUL  ( RallyApplication __app, Object value )
  {
    ( ( RR_SEL_BFR_ADL ) __app.getADL ( RR_SEL_BFR_ADL.class ) ).NUL = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static RR_SEL_BFR_ADL get ( RallyApplication __app )
  {
    RR_SEL_BFR_ADL adl = new RR_SEL_BFR_ADL ( );
    __app.register ( adl, "RR_SEL_BFR_ADL" );
    __app.setADL ( RR_SEL_BFR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    RR_SEL_BFR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    RR_SEL_BFR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "RR_SEL_BFR_ADL" );
    if ( rObj != null && rObj instanceof RR_SEL_BFR_ADL )
    {
      this.app.setADL ( RR_SEL_BFR_ADL.class, ( RR_SEL_BFR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "RR_SEL_BFR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      case 3:  { this.currentStep ++; this.step3 ( this.keyParms ); break; }
      case 4:  { this.currentStep ++; this.step4 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "RR_SEL_BFR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NUL = TruncService.setNull ( NUL  );
    RR_INSERT_RO_DSD = this.dm.create ( "RR_INSERT_RO_DSD" );
    RID = RR_INSERT_RO_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );
    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 0, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.reset ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 1, RCD );
      this.doReturn ( );
      return; 
    }
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.form ( "RR_LISTA_SEL_MNU_FR" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_FAM" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.form ( "RR_LISTA_SEL_MNU_FR" ).getDoubleItem ( "SEGURO_SOCIAL_JEFE_SERV" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "COD_SERVICIO", this.app.form ( "RR_LISTA_SEL_MNU_FR" ).getStringItem ( "COD_SERVICIO" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_IDENTIFICADO", this.app.form ( "RR_LISTA_SEL_MNU_FR" ).getDateItem ( "FECHA_IDENTIFICADO" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS", this.app.form ( "RR_LISTA_SEL_MNU_FR" ).getStringItem ( "STATUS" ));
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 2, RCD );
      this.doReturn ( );
      return; 
    }

    RCD  = this.dm.firstRow ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 3, RCD );
      this.app.errorFlag = false;
      this.doReturn ( );
      return; 
    }
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "ACCI", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "ACCION" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FCID", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_IDENTIFICADO" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "PCDE", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "DESDE" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "PCHA", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "HASTA" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "CLRE", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "CLASIFICACION_RECLA" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "RARE", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "RAZON_RETRO" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "SVRE", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SIST_VERIFICACION" )  );
    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_POR_TSS" ), NUL ) ) 
    {
      this._condition0 = true;
    }
    else
    {
      this._condition0 = false;
    }
    if ( this._condition0 )
    {
      this.callParms.clear ( );
      this.callParms.set ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_POR_TSS" )  );
      this.callParms.set ( NAME  );
      BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    if ( this._condition0 )    //    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_POR_TSS" ), NUL ) ) 
    {
      this.callParms.reset ( );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_POR_TSS", this.callParms.getDouble ( ) );
      NAME  = this.callParms.getString ( );

      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "DRPT", NAME  );
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "RPTS", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_POR_TSS" )  );
    }
    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS" ), NUL ) ) 
    {
      this._condition1 = true;
    }
    else
    {
      this._condition1 = false;
    }
    if ( this._condition1 )
    {
      this.callParms.clear ( );
      this.callParms.set ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS" )  );
      this.callParms.set ( NAME  );
      BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    if ( this._condition1 )    //    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS" ), NUL ) ) 
    {
      this.callParms.reset ( );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS", this.callParms.getDouble ( ) );
      NAME  = this.callParms.getString ( );

      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "DTS1", NAME  );
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "TSP1", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS" )  );
    }
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "RATS", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "DRAT", NAME  );
    if ( Compare.gt ( this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_ASIGNADO" ), RallySpanishDatesParser.parseDateString ( "" ) ) ) 
    {
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FATS", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_ASIGNADO" )  );
    }
    else
    {
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FATS", this.app.SYSTEM_DATE  );
    }
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FDEC", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_COMPLETAR" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FCP1", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_SERA_PROCESADO_1" )  );
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FCP2", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_SERA_PROCESADO_2" )  );
    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_2" ), NUL ) ) 
    {
      this._condition2 = true;
    }
    else
    {
      this._condition2 = false;
    }
    if ( this._condition2 )
    {
      this.callParms.clear ( );
      this.callParms.set ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_2" )  );
      this.callParms.set ( NAME  );
      BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step3 ( ParameterSet ps )
  {
    if ( this._condition2 )    //    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_2" ), NUL ) ) 
    {
      this.callParms.reset ( );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_2", this.callParms.getDouble ( ) );
      NAME  = this.callParms.getString ( );

      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "DTS2", NAME  );
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "TSS2", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_2" )  );
    }
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "FCP3", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_SERA_PROCESADO_3" )  );
    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_3" ), NUL ) ) 
    {
      this._condition3 = true;
    }
    else
    {
      this._condition3 = false;
    }
    if ( this._condition3 )
    {
      this.callParms.clear ( );
      this.callParms.set ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_3" )  );
      this.callParms.set ( NAME  );
      BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
      return;
    }

  }


  /**
   *
   */
  protected void step4 ( ParameterSet ps )
  {
    if ( this._condition3 )    //    if ( ! Compare.equals ( this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_3" ), NUL ) ) 
    {
      this.callParms.reset ( );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_3", this.callParms.getDouble ( ) );
      NAME  = this.callParms.getString ( );

      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "DTS3", NAME  );
      this.app.form ( "RETRO_SELECT_FR" ).setItem ( "TSS3", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "REFERIDO_TSS_3" )  );
    }
    this.app.form ( "RETRO_SELECT_FR" ).setItem ( "STRR", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" )  );
    RCD  = this.dm.dbClose ( RID );

    if ( ! Compare.equals ( RCD, 0 ) ) 
    {
      this.app.setError ( 4, RCD );
      this.doReturn ( );
      return; 
    }

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE RR_SEL_BFR_ADL;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        NID     :       NUMBER;
        NCD     :       NUMBER;
        TMP     :       CHAR(7);
        NUL     :       NUMBER;
        NAME    :       CHAR(30);

SET_TRACE();

MAKE_NULL(NUL);

DB_OPEN(RR_INSERT_RO_DSD, RID, RCD);
        IF (RCD <> 0)     THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_RESET (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_FAM :=      RR_LISTA_SEL_MNU_FR.SEGURO_SOCIA
L_JEFE_FAM;
RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_SERV        :=      RR_LISTA_SEL_MNU_FR.SEGU
RO_SOCIAL_JEFE_SERV;
RR_INSERT_RO_DSD.COD_SERVICIO           :=      RR_LISTA_SEL_MNU_FR.COD_SERVICIO
;
RR_INSERT_RO_DSD.FECHA_IDENTIFICADO     :=      RR_LISTA_SEL_MNU_FR.FECHA_IDENTI
FICADO;
RR_INSERT_RO_DSD.STATUS                 :=      RR_LISTA_SEL_MNU_FR.STATUS;
RR_INSERT_RO_DSD.RMO_OFICINA            :=      RMO_GBL;
DB_QUERY (RID, RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

DB_GET_FIRST(RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        SET_FAILURE();
                        RETURN;
                END;

RETRO_SELECT_FR.ACCI    :=      RR_INSERT_RO_DSD.ACCION;
RETRO_SELECT_FR.FCID    :=      RR_INSERT_RO_DSD.FECHA_IDENTIFICADO;
RETRO_SELECT_FR.PCDE    :=      RR_INSERT_RO_DSD.DESDE;
RETRO_SELECT_FR.PCHA    :=      RR_INSERT_RO_DSD.HASTA;
RETRO_SELECT_FR.CLRE    :=      RR_INSERT_RO_DSD.CLASIFICACION_RECLA;
RETRO_SELECT_FR.RARE    :=      RR_INSERT_RO_DSD.RAZON_RETRO;
RETRO_SELECT_FR.SVRE    :=      RR_INSERT_RO_DSD.SIST_VERIFICACION;

IF RR_INSERT_RO_DSD.REFERIDO_POR_TSS <> NUL THEN 
BEGIN
CALL BUSCAR_NOMBRE_TECNICO_ADL(RR_INSERT_RO_DSD.REFERIDO_POR_TSS,NAME);
RETRO_SELECT_FR.DRPT    :=      NAME;
RETRO_SELECT_FR.RPTS    :=      RR_INSERT_RO_DSD.REFERIDO_POR_TSS;
END;

IF RR_INSERT_RO_DSD.REFERIDO_TSS <> NUL THEN 
BEGIN
CALL BUSCAR_NOMBRE_TECNICO_ADL(RR_INSERT_RO_DSD.REFERIDO_TSS,NAME);
RETRO_SELECT_FR.DTS1    :=      NAME;
RETRO_SELECT_FR.TSP1    :=      RR_INSERT_RO_DSD.REFERIDO_TSS;
END;
RETRO_SELECT_FR.RATS    :=      RR_INSERT_RO_DSD.REFERIDO_TSS;
RETRO_SELECT_FR.DRAT    :=      NAME;

IF RR_INSERT_RO_DSD.FECHA_ASIGNADO > TO_DATE('') THEN
        RETRO_SELECT_FR.FATS    :=      RR_INSERT_RO_DSD.FECHA_ASIGNADO;
ELSE
        RETRO_SELECT_FR.FATS    :=      SYSTEM_DATE;

RETRO_SELECT_FR.FDEC    :=      RR_INSERT_RO_DSD.FECHA_COMPLETAR;

RETRO_SELECT_FR.FCP1    :=      RR_INSERT_RO_DSD.FECHA_SERA_PROCESADO_1;

RETRO_SELECT_FR.FCP2    :=      RR_INSERT_RO_DSD.FECHA_SERA_PROCESADO_2;
IF RR_INSERT_RO_DSD.REFERIDO_TSS_2 <> NUL THEN 
BEGIN
CALL BUSCAR_NOMBRE_TECNICO_ADL(RR_INSERT_RO_DSD.REFERIDO_TSS_2,NAME);
RETRO_SELECT_FR.DTS2    :=      NAME;
RETRO_SELECT_FR.TSS2    :=      RR_INSERT_RO_DSD.REFERIDO_TSS_2;
END;

RETRO_SELECT_FR.FCP3    :=      RR_INSERT_RO_DSD.FECHA_SERA_PROCESADO_3;
IF RR_INSERT_RO_DSD.REFERIDO_TSS_3 <> NUL THEN 
BEGIN
CALL BUSCAR_NOMBRE_TECNICO_ADL(RR_INSERT_RO_DSD.REFERIDO_TSS_3,NAME);
RETRO_SELECT_FR.DTS3    :=      NAME;
RETRO_SELECT_FR.TSS3    :=      RR_INSERT_RO_DSD.REFERIDO_TSS_3;
END;

RETRO_SELECT_FR.STRR    :=      RR_INSERT_RO_DSD.STATUS;

DB_CLOSE (RID,RCD);
        IF (RCD <> 0) THEN
                BEGIN
                        ERROR (RCD);
                        RETURN;
                END;

SET_NOTRACE();
    



--------------------------------------------------------------------- */
