package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class BEFORE_ACT_RECL_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = false;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------
    




  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static BEFORE_ACT_RECL_ADL get ( RallyApplication __app )
  {
    BEFORE_ACT_RECL_ADL adl = new BEFORE_ACT_RECL_ADL ( );
    __app.register ( adl, "BEFORE_ACT_RECL_ADL" );
    __app.setADL ( BEFORE_ACT_RECL_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    BEFORE_ACT_RECL_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    BEFORE_ACT_RECL_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "BEFORE_ACT_RECL_ADL" );
    if ( rObj != null && rObj instanceof BEFORE_ACT_RECL_ADL )
    {
      this.app.setADL ( BEFORE_ACT_RECL_ADL.class, ( BEFORE_ACT_RECL_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "BEFORE_ACT_RECL_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      case 2:  { this.currentStep ++; this.step2 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "BEFORE_ACT_RECL_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    this.callParms.clear ( );
    this.callParms.set ( this.app.form ( "ACTUALIZAR_RECLA_FR" ).getDoubleItem ( "REFERIDO_TSS" ) );
    this.callParms.set ( this.app.form ( "ACTUALIZAR_RECLA_FR" ).getStringItem ( "NOMBRE_TECNICO" ) );
    BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
    return;

  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    this.callParms.reset ( );
    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "REFERIDO_TSS", this.callParms.getDouble ( ) );
    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "NOMBRE_TECNICO", this.callParms.getString ( ) );

    this.callParms.clear ( );
    this.callParms.set ( this.app.form ( "ACTUALIZAR_RECLA_FR" ).getDoubleItem ( "REFERIDO_POR_TSS" ) );
    this.callParms.set ( this.app.form ( "ACTUALIZAR_RECLA_FR" ).getStringItem ( "NOMBRE_TECNICO_POR" ) );
    BUSCAR_NOMBRE_TECNICO_ADL.exec ( this.app, this.callParms );
    return;

  }


  /**
   *
   */
  protected void step2 ( ParameterSet ps )
  {
    this.callParms.reset ( );
    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "REFERIDO_POR_TSS", this.callParms.getDouble ( ) );
    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "NOMBRE_TECNICO_POR", this.callParms.getString ( ) );

    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "RMO_OFICINA", this.app.RMO_GBL  );
    this.app.form ( "ACTUALIZAR_RECLA_FR" ).setItem ( "RMO_OFICINA2", this.app.RMO_GBL  );

  }
}



/* ---------------------------------------------------------------------


     
procedure before_act_recl_adl;

begin
        Call BUSCAR_NOMBRE_TECNICO_ADL(ACTUALIZAR_RECLA_FR.REFERIDO_TSS,ACTUALIZ
AR_RECLA_FR.NOMBRE_TECNICO);
        call buscar_nombre_tecnico_adl(ACTUALIZAR_RECLA_FR.REFERIDO_POR_TSS,ACTU
ALIZAR_RECLA_FR.NOMBRE_TECNICO_POR);
        ACTUALIZAR_RECLA_FR.RMO_OFICINA := RMO_GBL;
        ACTUALIZAR_RECLA_FR.RMO_OFICINA2 := RMO_GBL;
end;
    



--------------------------------------------------------------------- */
