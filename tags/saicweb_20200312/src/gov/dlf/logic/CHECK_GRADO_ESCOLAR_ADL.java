package gov.dlf.logic;


import gov.dlf.facade.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class CHECK_GRADO_ESCOLAR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double KEY_PRESS = 0;





  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setKEY_PRESS  ( RallyApplication __app, Parameter value )
  {
    ( ( CHECK_GRADO_ESCOLAR_ADL ) __app.getADL ( CHECK_GRADO_ESCOLAR_ADL.class ) ).KEY_PRESS = value.getDouble ( );
  }  
    



  /**  */
  public static double getKEY_PRESS  ( RallyApplication __app )
  {
    return ( ( CHECK_GRADO_ESCOLAR_ADL ) __app.getADL ( CHECK_GRADO_ESCOLAR_ADL.class ) ).KEY_PRESS;
  }


  /**  */
  public static Double getKEY_PRESSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( CHECK_GRADO_ESCOLAR_ADL ) __app.getADL ( CHECK_GRADO_ESCOLAR_ADL.class ) ).KEY_PRESS );
  }


  /**  */
  public static void setKEY_PRESS  ( RallyApplication __app, double value )
  {
    ( ( CHECK_GRADO_ESCOLAR_ADL ) __app.getADL ( CHECK_GRADO_ESCOLAR_ADL.class ) ).KEY_PRESS = value;
  }


  /**  */
  public static void setKEY_PRESS  ( RallyApplication __app, Object value )
  {
    ( ( CHECK_GRADO_ESCOLAR_ADL ) __app.getADL ( CHECK_GRADO_ESCOLAR_ADL.class ) ).KEY_PRESS = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static CHECK_GRADO_ESCOLAR_ADL get ( RallyApplication __app )
  {
    CHECK_GRADO_ESCOLAR_ADL adl = new CHECK_GRADO_ESCOLAR_ADL ( );
    __app.register ( adl, "CHECK_GRADO_ESCOLAR_ADL" );
    __app.setADL ( CHECK_GRADO_ESCOLAR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    CHECK_GRADO_ESCOLAR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    CHECK_GRADO_ESCOLAR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "CHECK_GRADO_ESCOLAR_ADL" );
    if ( rObj != null && rObj instanceof CHECK_GRADO_ESCOLAR_ADL )
    {
      this.app.setADL ( CHECK_GRADO_ESCOLAR_ADL.class, ( CHECK_GRADO_ESCOLAR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "CHECK_GRADO_ESCOLAR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "CHECK_GRADO_ESCOLAR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    KEY_PRESS = RallyAppCommandFactory.translate ( this.app.getLastCommandName ( ) );
    if ( Compare.equals ( KEY_PRESS, RallyAppCommandFactory.FPREV ) ) 
    {
      if ( this.app.isCurrentField ( "INFOR_BIO_FRM", "COD_OCUPACION" ) && ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), "NING" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NE" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NA" ) ) )  ) 
      {
        this.app.browseToField ( "INFOR_BIO_FRM", "COD_ESCOLARIDAD" ); 
      }
    }
    if ( ( Compare.equals ( KEY_PRESS, RallyAppCommandFactory.FNEXT ) ) || ( Compare.equals ( KEY_PRESS, 6021 ) ) ) 
    {
      if ( this.app.isCurrentField ( "INFOR_BIO_FRM", "ESTUDIA_TIEMPO_COMPLETO" ) && ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), "NING" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NE" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NA" ) ) )  ) 
      {
        this.app.browseToField ( "INFOR_BIO_FRM", "COD_OCUPACION" ); 
      }
    }
    if ( ( Compare.equals ( KEY_PRESS, RallyAppCommandFactory.FNEXT ) ) || ( Compare.equals ( KEY_PRESS, 6021 ) ) ) 
    {
      if ( this.app.isCurrentField ( "INFOR_BIO_FRM", "COD_ESCOLARIDAD" ) && ( ( Compare.equals ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), "NING" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NE" ) ) || ( Compare.equals ( RallyStringService.subString ( this.app.form ( "INFOR_BIO_FRM" ).getStringItem ( "COD_ESCOLARIDAD" ), 0, 2 ), "NA" ) ) )  ) 
      {
        this.app.browseToField ( "INFOR_BIO_FRM", "COD_OCUPACION" ); 
      }
    }

  }
}



/* ---------------------------------------------------------------------


     
procedure check_grado_escolar_adl;
VAR
        KEY_PRESS : NUMBER;

begin
KEY_PRESS := GET_CMD();
DEBUG_LOG(TO_CHAR(KEY_PRESS));
{ CODIGO 6021 ES EL NUMERO QUE RALLY UTILIZA LUEGO DE EJECUTAR EL LIST_OF_VALUES
}

        IF (KEY_PRESS  = FPREV)
        THEN 
           BEGIN
                if IS_CURRENT_FIELD(INFOR_BIO_FRM.COD_OCUPACION) AND
                   ((INFOR_BIO_FRM.COD_ESCOLARIDAD = 'NING') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NE') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NA'))
                THEN
                   SET_CURRENT_FIELD(INFOR_BIO_FRM.COD_ESCOLARIDAD);
                {ENDIF IS_CURRENT}
           END;
           {ENDIF KEY_PRESS}

        IF (KEY_PRESS  = FNEXT) OR (KEY_PRESS = 6021)
        THEN 
           BEGIN
                if IS_CURRENT_FIELD(INFOR_BIO_FRM.ESTUDIA_TIEMPO_COMPLETO)AND
                   ((INFOR_BIO_FRM.COD_ESCOLARIDAD = 'NING') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NE') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NA'))
                THEN
                   SET_CURRENT_FIELD(INFOR_BIO_FRM.COD_OCUPACION);
                {ENDIF IS_CURRENT}
           END;
           {ENDIF KEY_PRESS}

        IF (KEY_PRESS  = FNEXT) OR (KEY_PRESS = 6021)
        THEN 
           BEGIN
                if IS_CURRENT_FIELD(INFOR_BIO_FRM.COD_ESCOLARIDAD) AND
                   ((INFOR_BIO_FRM.COD_ESCOLARIDAD = 'NING') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NE') OR
                    (SUBSTR(INFOR_BIO_FRM.COD_ESCOLARIDAD,0,2) = 'NA'))
                THEN
                   SET_CURRENT_FIELD(INFOR_BIO_FRM.COD_OCUPACION);
                {ENDIF IS_CURRENT}
           END;
           {ENDIF KEY_PRESS}


end;
    



--------------------------------------------------------------------- */
