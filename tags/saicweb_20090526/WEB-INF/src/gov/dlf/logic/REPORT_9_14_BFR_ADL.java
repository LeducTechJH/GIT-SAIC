package gov.dlf.logic;


import gov.dlf.external.*;
import gov.dlf.facade.*;
import gov.dlf.presentation.*;


import java.util.*;

import net.maintrend.appmanager.*;
import net.maintrend.datamanager.*;
import net.maintrend.interfaces.*;
import net.maintrend.interlink.*;
import net.maintrend.mdi.*;
import net.maintrend.rallyengine.*;
import net.maintrend.util.*;
import net.maintrend.util.format.*;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class REPORT_9_14_BFR_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double RID = 0;

  public double RCD = 0;

  public double NID = 0;

  public double NCD = 0;

  public double NUL = 0;



  public String TMP = null;

  public DataStore RR_INSERT_RO_DSD = null;

  public DataStore RAZON_RETRO_DSD = null;

  public DataStore CALENDARIO2_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setRID  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RID = value.getDouble ( );
  }  

  
  /**  */
  public static void setRCD  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setNID  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NID = value.getDouble ( );
  }  

  
  /**  */
  public static void setNCD  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NCD = value.getDouble ( );
  }  

  
  /**  */
  public static void setTMP  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).TMP = value.getString ( );
  }  

  
  /**  */
  public static void setNUL  ( RallyApplication __app, Parameter value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NUL = value.getDouble ( );
  }  
    


  /**  */
  public static String getTMP  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).TMP;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, String value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).TMP = value;
  }


  /**  */
  public static void setTMP  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).TMP = ( String ) value;
  }



  /**  */
  public static DataStore getRR_INSERT_RO_DSD  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RR_INSERT_RO_DSD;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RR_INSERT_RO_DSD = value;
  }


  /**  */
  public static void setRR_INSERT_RO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RR_INSERT_RO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getRAZON_RETRO_DSD  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RAZON_RETRO_DSD;
  }


  /**  */
  public static void setRAZON_RETRO_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RAZON_RETRO_DSD = value;
  }


  /**  */
  public static void setRAZON_RETRO_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RAZON_RETRO_DSD = ( DataStore ) value;
  }



  /**  */
  public static DataStore getCALENDARIO2_DSD  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).CALENDARIO2_DSD;
  }


  /**  */
  public static void setCALENDARIO2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).CALENDARIO2_DSD = value;
  }


  /**  */
  public static void setCALENDARIO2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).CALENDARIO2_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getRID  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RID;
  }


  /**  */
  public static Double getRIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RID );
  }


  /**  */
  public static void setRID  ( RallyApplication __app, double value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RID = value;
  }


  /**  */
  public static void setRID  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getRCD  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RCD;
  }


  /**  */
  public static Double getRCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RCD );
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, double value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RCD = value;
  }


  /**  */
  public static void setRCD  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).RCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNID  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NID;
  }


  /**  */
  public static Double getNIDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NID );
  }


  /**  */
  public static void setNID  ( RallyApplication __app, double value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NID = value;
  }


  /**  */
  public static void setNID  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNCD  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NCD;
  }


  /**  */
  public static Double getNCDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NCD );
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, double value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NCD = value;
  }


  /**  */
  public static void setNCD  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NCD = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getNUL  ( RallyApplication __app )
  {
    return ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NUL;
  }


  /**  */
  public static Double getNULDouble ( RallyApplication __app )
  {
    return new Double ( ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NUL );
  }


  /**  */
  public static void setNUL  ( RallyApplication __app, double value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NUL = value;
  }


  /**  */
  public static void setNUL  ( RallyApplication __app, Object value )
  {
    ( ( REPORT_9_14_BFR_ADL ) __app.getADL ( REPORT_9_14_BFR_ADL.class ) ).NUL = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static REPORT_9_14_BFR_ADL get ( RallyApplication __app )
  {
    REPORT_9_14_BFR_ADL adl = new REPORT_9_14_BFR_ADL ( );
    __app.register ( adl, "REPORT_9_14_BFR_ADL" );
    __app.setADL ( REPORT_9_14_BFR_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    REPORT_9_14_BFR_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    REPORT_9_14_BFR_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "REPORT_9_14_BFR_ADL" );
    if ( rObj != null && rObj instanceof REPORT_9_14_BFR_ADL )
    {
      this.app.setADL ( REPORT_9_14_BFR_ADL.class, ( REPORT_9_14_BFR_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "REPORT_9_14_BFR_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "REPORT_9_14_BFR_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    NUL = TruncService.setNull ( NUL  );
    RR_INSERT_RO_DSD = this.dm.create ( "RR_INSERT_RO_DSD" );
    RID = RR_INSERT_RO_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );

    RCD  = this.dm.reset ( RID );

    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "COD_SERVICIO", this.app.COD_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "FECHA_IDENTIFICADO", this.app.RR_FCH_IDN );
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "ACCION", this.app.RR_ACCION_GBL );
    this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    RCD  = this.dm.firstRow ( RID );

    if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" ), "NOPROCRE" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" ), "DESESTIM" ) ) ) 
    {
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "X2", "X"  );
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "STAT", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" )  );
    }
    else
    {
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "X1", "X"  );
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "CANT_RECLA_RETRO", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "CANTIDAD_RECLA_RETRO" )  );
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "DESDE", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "DESDE" )  );
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "HASTA", this.dm.getFieldDate ( this.dm.get ( "RR_INSERT_RO_DSD" ), "HASTA" )  );
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "BAL_RETRO", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "VLR_BALANCE" )  );
      RAZON_RETRO_DSD = this.dm.create ( "RAZON_RETRO_DSD" );
      NID = RAZON_RETRO_DSD.getId ( );
      NCD = RallyDataStoreException.getDefault ( );

      NCD  = this.dm.reset ( NID );

      this.dm.setField ( this.dm.get ( "RAZON_RETRO_DSD" ), "COD_ID", this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "RAZON_RETRO" ) );

      NCD  = this.dm.limitQueryFromBuffer ( NID );
      NCD  = this.dm.retrieve ( NID );

      NCD  = this.dm.firstRow ( NID );

      this.app.form ( "REPORT_9_14_FR" ).setItem ( "RAZON_RETRO", this.dm.getFieldString ( this.dm.get ( "RAZON_RETRO_DSD" ), "DSC_LARGA" )  );
      NCD  = this.dm.dbClose ( NID );

    }
    if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" ), "SALDRETR" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "RR_INSERT_RO_DSD" ), "STATUS" ), "COMPRECL" ) ) ) 
    {
      this.app.form ( "REPORT_9_14_FR" ).setItem ( "CANT_RETRO", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "CANTIDAD_RECLA_RETRO" )  );

      RCD  = this.dm.reset ( RID );

      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "COD_SERVICIO", this.app.COD_SERVICIO_GBL );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "ACCION", "RECL" );
      this.dm.setField ( this.dm.get ( "RR_INSERT_RO_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

      RCD  = this.dm.limitQueryFromBuffer ( RID );
      RCD  = this.dm.retrieve ( RID );

      RCD  = this.dm.firstRow ( RID );

      this.app.form ( "REPORT_9_14_FR" ).setItem ( "BAL_RECLA", this.dm.getFieldDouble ( this.dm.get ( "RR_INSERT_RO_DSD" ), "VLR_BALANCE" )  );
    }
    RCD  = this.dm.dbClose ( RID );

    CALENDARIO2_DSD = this.dm.create ( "CALENDARIO2_DSD" );
    RID = CALENDARIO2_DSD.getId ( );
    RCD = RallyDataStoreException.getDefault ( );

    RCD  = this.dm.reset ( RID );

    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "COD_SERVICIO", "GENN" );
    this.dm.setField ( this.dm.get ( "CALENDARIO2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    RCD  = this.dm.limitQueryFromBuffer ( RID );
    RCD  = this.dm.retrieve ( RID );

    RCD  = this.dm.firstRow ( RID );

    while ( Compare.equals ( RCD, 0 ) ) 
    {
      if ( ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CALENDARIO2_DSD" ), "COD_RAZON" ), "IRET" ) ) || ( Compare.equals ( this.dm.getFieldString ( this.dm.get ( "CALENDARIO2_DSD" ), "COD_RAZON" ), "IREC" ) ) ) 
      {
        this.app.form ( "REPORT_9_14_FR" ).setItem ( "DIA", StringService.toStringValue  ( this.dm.getFieldDate ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ) ,"dd" ,StringService.Language.SPANISH )  );
        this.app.form ( "REPORT_9_14_FR" ).setItem ( "MES", StringService.toStringValue  ( this.dm.getFieldDate ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ) ,"MMMM" ,StringService.Language.SPANISH )  );
        this.app.form ( "REPORT_9_14_FR" ).setItem ( "ANO", StringService.toStringValue  ( this.dm.getFieldDate ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ) ,"yyyy" ,StringService.Language.SPANISH )  );
        this.app.form ( "REPORT_9_14_FR" ).setItem ( "HORA", StringService.toStringValue  ( this.dm.getFieldDate ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ) ,"h" ,StringService.Language.SPANISH )  );
        this.app.form ( "REPORT_9_14_FR" ).setItem ( "MINUTOS", StringService.toStringValue  ( this.dm.getFieldDate ( this.dm.get ( "CALENDARIO2_DSD" ), "FCH_ACTIVIDAD_HORA_MIN_CONTAC0" ) ,"mm" ,StringService.Language.SPANISH )  );
      }

      RCD  = this.dm.nextRow ( RID );

    }
    this.app.form ( "REPORT_9_14_FR" ).setItem ( "TEL1", this.app.RMO_PHONE_GBL  );
    this.app.form ( "REPORT_9_14_FR" ).setItem ( "TEL2", this.app.RMO_PHONE_GBL  );
    this.app.form ( "REPORT_9_14_FR" ).setItem ( "TEL3", this.app.RMO_PHONE_GBL  );

  }
}



/* ---------------------------------------------------------------------


     
PROCEDURE REPORT_9_14_BFR_ADL;

VAR     RID     :       NUMBER;
        RCD     :       NUMBER;
        NID     :       NUMBER;
        NCD     :       NUMBER;
        TMP     :       CHAR(7);
        NUL     :       NUMBER;

SET_TRACE();

MAKE_NULL(NUL);

DB_OPEN(RR_INSERT_RO_DSD, RID, RCD);

DB_RESET (RID, RCD);

RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_FAM :=      SS_JEFE_FAMILIA_GBL;
RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_SERV        :=      SS_JEFE_SERVICIO_GBL;
RR_INSERT_RO_DSD.COD_SERVICIO           :=      COD_SERVICIO_GBL;
RR_INSERT_RO_DSD.FECHA_IDENTIFICADO     :=      RR_FCH_IDN;
RR_INSERT_RO_DSD.ACCION                 :=      RR_ACCION_GBL;
RR_INSERT_RO_DSD.RMO_OFICINA            :=      RMO_GBL;
DB_QUERY (RID, RCD);

DB_GET_FIRST(RID,RCD);


IF (RR_INSERT_RO_DSD.STATUS = 'NOPROCRE') OR
   (RR_INSERT_RO_DSD.STATUS = 'DESESTIM')
THEN
        BEGIN
                REPORT_9_14_FR.X2       :=      'X';
                REPORT_9_14_FR.STAT     :=      RR_INSERT_RO_DSD.STATUS;
        END;
ELSE
        BEGIN
                REPORT_9_14_FR.X1               :=      'X';
                REPORT_9_14_FR.CANT_RECLA_RETRO := RR_INSERT_RO_DSD.CANTIDAD_REC
LA_RETRO;
                REPORT_9_14_FR.DESDE            := RR_INSERT_RO_DSD.DESDE;
                REPORT_9_14_FR.HASTA            := RR_INSERT_RO_DSD.HASTA;
                REPORT_9_14_FR.BAL_RETRO        := RR_INSERT_RO_DSD.VLR_BALANCE;

                DB_OPEN(RAZON_RETRO_DSD, NID, NCD);

                DB_RESET (NID, NCD);

                RAZON_RETRO_DSD.COD_ID  := RR_INSERT_RO_DSD.RAZON_RETRO;

                DB_QUERY (NID, NCD);

                DB_GET_FIRST(NID,NCD);

                REPORT_9_14_FR.RAZON_RETRO      := RAZON_RETRO_DSD.DSC_LARGA;

                DB_CLOSE (NID,NCD);


END;


IF (RR_INSERT_RO_DSD.STATUS = 'SALDRETR') OR
   (RR_INSERT_RO_DSD.STATUS = 'COMPRECL')
THEN
BEGIN
{ISP}
REPORT_9_14_FR.CANT_RETRO       := RR_INSERT_RO_DSD.CANTIDAD_RECLA_RETRO;
{REPORT_9_14_FR.BAL_RETRO       := RR_INSERT_RO_DSD.VLR_BALANCE;}
{REPORT_9_14_FR.CANT_RETRO :=
 REPORT_9_14_FR.CANT_RECLA_RETRO-REPORT_9_14_FR.BAL_RETRO;
 REPORT_9_14_FR.BAL_RECLA :=
 REPORT_9_14_FR.CANT_RETRO-REPORT_9_14_FR.BAL_RETRO;}
DB_RESET (RID, RCD);

RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_FAM :=      SS_JEFE_FAMILIA_GBL;
RR_INSERT_RO_DSD.SEGURO_SOCIAL_JEFE_SERV        :=      SS_JEFE_SERVICIO_GBL;
RR_INSERT_RO_DSD.COD_SERVICIO           :=      COD_SERVICIO_GBL;
{RR_INSERT_RO_DSD.FECHA_IDENTIFICADO    :=      RR_FCH_IDN;}
RR_INSERT_RO_DSD.ACCION                 :=      'RECL';
RR_INSERT_RO_DSD.RMO_OFICINA            :=      RMO_GBL;
DB_QUERY (RID, RCD);

DB_GET_FIRST(RID,RCD);

{REPORT_9_14_FR.CANT_RECLA_RETRO        := RR_INSERT_RO_DSD.CANTIDAD_RECLA_RETRO
;}
REPORT_9_14_FR.BAL_RECLA        := RR_INSERT_RO_DSD.VLR_BALANCE;
END;

DB_CLOSE (RID,RCD);

BEGIN
DB_OPEN(CALENDARIO2_DSD, RID, RCD);

DB_RESET (RID, RCD);

CALENDARIO2_DSD.SEGURO_SOCIAL_JEFE_FAM  :=      SS_JEFE_FAMILIA_GBL;
CALENDARIO2_DSD.SEGURO_SOCIAL_JEFE_SERV :=      SS_JEFE_SERVICIO_GBL;
CALENDARIO2_DSD.COD_SERVICIO            :=      'GENN';
CALENDARIO2_DSD.RMO_OFICINA             :=      RMO_GBL;
DB_QUERY (RID, RCD);

DB_GET_FIRST(RID,RCD);

WHILE (RCD = 0) DO
BEGIN
IF (CALENDARIO2_DSD.COD_RAZON = 'IRET') OR
   (CALENDARIO2_DSD.COD_RAZON = 'IREC')
THEN
BEGIN
REPORT_9_14_FR.DIA := 
TO_CHAR(CALENDARIO2_DSD.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,'DD');
REPORT_9_14_FR.MES := 
TO_CHAR(CALENDARIO2_DSD.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,'Month');
REPORT_9_14_FR.ANO := 
TO_CHAR(CALENDARIO2_DSD.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,'YYYY');
REPORT_9_14_FR.HORA := 
TO_CHAR(CALENDARIO2_DSD.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,'HH');
REPORT_9_14_FR.MINUTOS := 
TO_CHAR(CALENDARIO2_DSD.FCH_ACTIVIDAD_HORA_MIN_CONTAC0,'MI');
END;
DB_GET_NEXT(RID,RCD);

END;

END;

REPORT_9_14_FR.TEL1     := RMO_PHONE_GBL;
REPORT_9_14_FR.TEL2     := RMO_PHONE_GBL;
REPORT_9_14_FR.TEL3     := RMO_PHONE_GBL;


SET_NOTRACE();
    



--------------------------------------------------------------------- */
