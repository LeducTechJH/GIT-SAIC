package gov.dlf.logic;


import gov.dlf.facade.SAIC_DMQ_ORA_Application;

import net.maintrend.datamanager.DataStore;
import net.maintrend.interfaces.IRegisteredObject;
import net.maintrend.interlink.Parameter;
import net.maintrend.interlink.ParameterSet;
import net.maintrend.rallyengine.ADL;
import net.maintrend.rallyengine.RallyApplication;
import net.maintrend.rallyengine.RallyDataManager;
import net.maintrend.rallyengine.RallyDataStoreException;
import net.maintrend.util.Compare;
import net.maintrend.util.Debug;
import net.maintrend.util.MathService;
import net.maintrend.util.StringService;



/**
 * __Comment
 *
 * Generated by Rally-to-Java Convertor. MainTrend Ltd.
 */
public class VERIFICACION_BASES_RECLA_ADL
     extends ADL
{
  // -------------------------------------------------------------------
  // ----------   Class Attributes   -----------------------------------

  /**  */
  public static boolean staticCall = true;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes   --------------------------------

  /**  */
  public SAIC_DMQ_ORA_Application app;
  /**  */
  public RallyDataManager dm = null;



  // -------------------------------------------------------------------
  // ----------   Instance Condition Attributes   ----------------------

 

  // -------------------------------------------------------------------
  // ----------   Instance Export Attributes   -------------------------

  public double INCORRECTA_ID = 0;

  public double CORRECTA_ID = 0;

  public double INCORRECTA_STATUS = 0;

  public double CORRECTA_STATUS = 0;

  public double CALCULO_BASES = 0;

  public double VAR_BASE_CORRECTA = 0;

  public double VAR_BASE_INCORRECTA = 0;



  public DataStore BASE_INCORRECTA_NOPARA2_DSD = null;



  // -------------------------------------------------------------------
  // ----------   Instance Attributes' Access Methods   ----------------

  
  /**  */
  public static void setINCORRECTA_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setCORRECTA_ID  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_ID = value.getDouble ( );
  }  

  
  /**  */
  public static void setINCORRECTA_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setCORRECTA_STATUS  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_STATUS = value.getDouble ( );
  }  

  
  /**  */
  public static void setCALCULO_BASES  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CALCULO_BASES = value.getDouble ( );
  }  

  
  /**  */
  public static void setVAR_BASE_CORRECTA  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_CORRECTA = value.getDouble ( );
  }  

  
  /**  */
  public static void setVAR_BASE_INCORRECTA  ( RallyApplication __app, Parameter value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_INCORRECTA = value.getDouble ( );
  }  
    


  /**  */
  public static DataStore getBASE_INCORRECTA_NOPARA2_DSD  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).BASE_INCORRECTA_NOPARA2_DSD;
  }


  /**  */
  public static void setBASE_INCORRECTA_NOPARA2_DSD  ( RallyApplication __app, DataStore value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).BASE_INCORRECTA_NOPARA2_DSD = value;
  }


  /**  */
  public static void setBASE_INCORRECTA_NOPARA2_DSD  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).BASE_INCORRECTA_NOPARA2_DSD = ( DataStore ) value;
  }




  /**  */
  public static double getINCORRECTA_ID  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_ID;
  }


  /**  */
  public static Double getINCORRECTA_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_ID );
  }


  /**  */
  public static void setINCORRECTA_ID  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_ID = value;
  }


  /**  */
  public static void setINCORRECTA_ID  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCORRECTA_ID  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_ID;
  }


  /**  */
  public static Double getCORRECTA_IDDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_ID );
  }


  /**  */
  public static void setCORRECTA_ID  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_ID = value;
  }


  /**  */
  public static void setCORRECTA_ID  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_ID = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getINCORRECTA_STATUS  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_STATUS;
  }


  /**  */
  public static Double getINCORRECTA_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_STATUS );
  }


  /**  */
  public static void setINCORRECTA_STATUS  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_STATUS = value;
  }


  /**  */
  public static void setINCORRECTA_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).INCORRECTA_STATUS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCORRECTA_STATUS  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_STATUS;
  }


  /**  */
  public static Double getCORRECTA_STATUSDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_STATUS );
  }


  /**  */
  public static void setCORRECTA_STATUS  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_STATUS = value;
  }


  /**  */
  public static void setCORRECTA_STATUS  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CORRECTA_STATUS = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getCALCULO_BASES  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CALCULO_BASES;
  }


  /**  */
  public static Double getCALCULO_BASESDouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CALCULO_BASES );
  }


  /**  */
  public static void setCALCULO_BASES  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CALCULO_BASES = value;
  }


  /**  */
  public static void setCALCULO_BASES  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).CALCULO_BASES = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getVAR_BASE_CORRECTA  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_CORRECTA;
  }


  /**  */
  public static Double getVAR_BASE_CORRECTADouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_CORRECTA );
  }


  /**  */
  public static void setVAR_BASE_CORRECTA  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_CORRECTA = value;
  }


  /**  */
  public static void setVAR_BASE_CORRECTA  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_CORRECTA = ( ( Double ) value ).doubleValue ( );
  }


  /**  */
  public static double getVAR_BASE_INCORRECTA  ( RallyApplication __app )
  {
    return ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_INCORRECTA;
  }


  /**  */
  public static Double getVAR_BASE_INCORRECTADouble ( RallyApplication __app )
  {
    return new Double ( ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_INCORRECTA );
  }


  /**  */
  public static void setVAR_BASE_INCORRECTA  ( RallyApplication __app, double value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_INCORRECTA = value;
  }


  /**  */
  public static void setVAR_BASE_INCORRECTA  ( RallyApplication __app, Object value )
  {
    ( ( VERIFICACION_BASES_RECLA_ADL ) __app.getADL ( VERIFICACION_BASES_RECLA_ADL.class ) ).VAR_BASE_INCORRECTA = ( ( Double ) value ).doubleValue ( );
  }



  // -------------------------------------------------------------------
  // ----------   Methods   --------------------------------------------

  /**
   * 
   * @param __app
   * @return
   */
  public static VERIFICACION_BASES_RECLA_ADL get ( RallyApplication __app )
  {
    VERIFICACION_BASES_RECLA_ADL adl = new VERIFICACION_BASES_RECLA_ADL ( );
    __app.register ( adl, "VERIFICACION_BASES_RECLA_ADL" );
    __app.setADL ( VERIFICACION_BASES_RECLA_ADL.class, adl ); 
    adl.setApplication ( __app );
    return adl;
  }


  /**
   *
   * @param __app
   * @param ps
   *
   * @return
   */
  public static void exec ( RallyApplication __app, ParameterSet ps )
  {
    VERIFICACION_BASES_RECLA_ADL.get ( __app ).process ( ps );
  }


  /**
   *
   * @param __app
   *
   * @return
   */
  public static void exec ( RallyApplication __app )
  {
    ParameterSet ps = null;
    VERIFICACION_BASES_RECLA_ADL.exec ( __app, ps );
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param __app
   */
  @Override
public void setApplication ( RallyApplication __app )
  {
    this.app = ( SAIC_DMQ_ORA_Application ) __app;
    if ( this.app != null )
    {
      this.dm = ( RallyDataManager ) this.app.getDataManager ( );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param parms
   */
  @Override
public void execute ( ParameterSet parms )
  {
    this.process ( parms );
  }




  /**
   *
   */
  protected void doReturn ( )
  {
    this.unregister ( );
  }


  /**
   *
   */
  public void unregister ( )
  {
    this.app.unregister ( this );
    IRegisteredObject rObj = this.app.get ( "VERIFICACION_BASES_RECLA_ADL" );
    if ( rObj != null && rObj instanceof VERIFICACION_BASES_RECLA_ADL )
    {
      this.app.setADL ( VERIFICACION_BASES_RECLA_ADL.class, ( VERIFICACION_BASES_RECLA_ADL ) rObj );
    }
  }


  /**
   * Overrides the ancestor's method
   * 
   * @param ps
   */
  @Override
protected void process ( ParameterSet ps )
  {
    Debug.println ( Debug.TRACE, "VERIFICACION_BASES_RECLA_ADL Step " + this.currentStep );
    super.process ( ps );
    switch ( this.currentStep ) 
    {
      case 0:  { this.currentStep ++; this.step0 ( this.keyParms ); break; }
      case 1:  { this.currentStep ++; this.step1 ( this.keyParms ); break; }
      default: 
      { 
        this.currentStep = 0;
        Debug.println ( Debug.TRACE, "VERIFICACION_BASES_RECLA_ADL ended" );
        this.unregister ( );
        break;
      }
    }
    if ( this.currentStep > 0 ) this.app.goOn ( );
  }



  /**
   *
   */
  protected void step0 ( ParameterSet ps )
  {

    BASE_INCORRECTA_NOPARA2_DSD = this.dm.create ( "BASE_INCORRECTA_NOPARA2_DSD" );
    INCORRECTA_ID = BASE_INCORRECTA_NOPARA2_DSD.getId ( );
    INCORRECTA_STATUS = RallyDataStoreException.getDefault ( );

    INCORRECTA_STATUS  = this.dm.reset ( INCORRECTA_ID );

    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "SEGURO_SOCIAL_JEFE_FAM", this.app.SS_JEFE_FAMILIA_GBL );
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "SEGURO_SOCIAL_JEFE_SERV", this.app.SS_JEFE_SERVICIO_GBL );
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "ACCION", this.app.ACCION_GBL );
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "COD_SERVICIO", this.app.COD_SERV_GBL );
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "FECHA_IDENTIFICADO", this.app.FECHA_IDENTIFICADO_GBL );
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "FECHA_EMISION", this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDateItem ( "MES_ANO_BENEFICIO_CORRECTO" ));
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "FLG_EMERGENCIA", this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getStringItem ( "FLG_EMERGENCIA_CORRECTA" ));
    this.dm.setField ( this.dm.get ( "BASE_INCORRECTA_NOPARA2_DSD" ), "RMO_OFICINA", this.app.RMO_GBL );

    INCORRECTA_STATUS  = this.dm.limitQueryFromBuffer ( INCORRECTA_ID );
    INCORRECTA_STATUS  = this.dm.retrieve ( INCORRECTA_ID );

    INCORRECTA_STATUS  = this.dm.firstRow ( INCORRECTA_ID );

    if ( Compare.equals ( StringService.toStringValue  ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_INCORRECTOS0" )), "" ) ) 
    {
      VAR_BASE_INCORRECTA = 0;
    }
    else
    {
      VAR_BASE_INCORRECTA = this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_INCORRECTOS0" );
    }
    if ( Compare.equals ( StringService.toStringValue  ( this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" )), "" ) ) 
    {
      VAR_BASE_CORRECTA = 0;
    }
    else
    {
      VAR_BASE_CORRECTA = this.app.form ( "DETERMINAR_RECLAMACION_FR" ).getDoubleItem ( "BENEFICIOS_CORRECTOS" );
    }
    CALCULO_BASES = MathService.minus ( VAR_BASE_INCORRECTA, VAR_BASE_CORRECTA  );
    if  ( ( ( Compare.le ( CALCULO_BASES, 0 ) ) && ( Compare.equals ( this.app.ACCION_GBL, "RECL" ) )  )
    	|| ( ( Compare.le ( CALCULO_BASES, 0 ) ) && ( Compare.equals ( this.app.ACCION_GBL, "RREC" ) )  ) 
    	|| ( ( Compare.ge ( CALCULO_BASES, 0 ) ) && ( Compare.equals ( this.app.ACCION_GBL, "RETR" ) )  )
    	|| ( ( Compare.ge ( CALCULO_BASES, 0 ) ) && ( Compare.equals ( this.app.ACCION_GBL, "RRET" ) )  ) 
    	) 
    {
      if ( ( Compare.equals ( this.app.ACCION_GBL, "RECL" ) ) || ( Compare.equals ( this.app.ACCION_GBL, "RREC" ) ) ) 
      {
        this.app.setError ( 0, 1106 );
      }
      else
      {
        this.app.setError ( 1, 1108 );
      }
      this.app.browseToField ( "DETERMINAR_RECLAMACION_FR", "PARK" ); 
    }
    INCORRECTA_STATUS  = this.dm.dbClose ( INCORRECTA_ID );

    this.app.getLastForm ( "DETERMINAR_RECLAMACION_FR" ).update ( );
    //this.app.callCommand ( RallyAppCommandFactory.QBE );
    return;
  }


  /**
   *
   */
  protected void step1 ( ParameterSet ps )
  {
    //this.app.callCommand ( RallyAppCommandFactory.QUERY );
    return;
  }
}



/* ---------------------------------------------------------------------


     
procedure verificacion_bases_recla_adl;
var
        incorrecta_id   : number(9,0);
        correcta_id     : number(9,0);

        incorrecta_status : number(9,0);
        correcta_status : number(9,0);

        calculo_bases   : number(9,0);
        var_base_correcta : NUMBER;
        var_base_incorrecta : NUMBER;

begin
set_trace();
{db_open(BASE_CORRECTA_NOPARA2_DSD,correcta_id,correcta_status); }
        db_open(BASE_INCORRECTA_NOPARA2_DSD,incorrecta_id,incorrecta_status);

{       db_reset(correcta_id,correcta_status);
                BASE_CORRECTA_NOPARA2_DSD.SEGURO_SOCIAL_JEFE_FAM := ss_jefe_fami
lia_gbl;
                BASE_CORRECTA_NOPARA2_DSD.SEGURO_SOCIAL_JEFE_SERV := ss_jefe_ser
vicio_gbl;
                BASE_CORRECTA_NOPARA2_DSD.ACCION := accion_gbl;
                BASE_CORRECTA_NOPARA2_DSD.COD_SERVICIO := cod_serv_gbl;
                BASE_CORRECTA_NOPARA2_DSD.FECHA_IDENTIFICADO := fecha_identifica
do_gbl;
                BASE_CORRECTA_NOPARA2_DSD.MES_ANO_BENEFICIO_CORRECTO := DETERMIN
AR_RECLAMACION_FR.MES_ANO_BENEFICIO_CORRECTO;
                BASE_CORRECTA_NOPARA2_DSD.FLG_EMERGENCIA := DETERMINAR_RECLAMACI
ON_FR.FLG_EMERGENCIA_CORRECTA;
                BASE_CORRECTA_NOPARA2_DSD.RMO_OFICINA:=RMO_GBL;


Dbug_log('Mes determinacion = ' || to_char(determinar_reclamacion_fr.mes_ano_ben
eficio_correcto));
        db_query(correcta_id,correcta_status);
        db_get_first(correcta_id,correcta_status); }

        db_reset(incorrecta_id,incorrecta_status);
                BASE_INCORRECTA_NOPARA2_DSD.SEGURO_SOCIAL_JEFE_FAM := ss_jefe_fa
milia_gbl;
                BASE_INCORRECTA_NOPARA2_DSD.SEGURO_SOCIAL_JEFE_SERV := ss_jefe_s
ervicio_gbl;
                BASE_INCORRECTA_NOPARA2_DSD.ACCION := accion_gbl;
                BASE_INCORRECTA_NOPARA2_DSD.COD_SERVICIO := cod_serv_gbl;
                BASE_INCORRECTA_NOPARA2_DSD.FECHA_IDENTIFICADO := fecha_identifi
cado_gbl;
                BASE_INCORRECTA_NOPARA2_DSD.FECHA_EMISION := DETERMINAR_RECLAMAC
ION_FR.MES_ANO_BENEFICIO_CORRECTO;
                BASE_INCORRECTA_NOPARA2_DSD.FLG_EMERGENCIA := DETERMINAR_RECLAMA
CION_FR.FLG_EMERGENCIA_CORRECTA;
                BASE_INCORRECTA_NOPARA2_DSD.RMO_OFICINA:=RMO_GBL;
        db_query(incorrecta_id,incorrecta_status);
        db_get_first(incorrecta_id,incorrecta_status);

{IF (TO_CHAR(BASE_INCORRECTA_NOPARA2_DSD.BENEFICIOS_INCORRECTOS) ='') THEN}
IF (TO_CHAR(DETERMINAR_RECLAMACION_FR.BENEFICIOS_INCORRECTOS0) = '') THEN 
                VAR_BASE_INCORRECTA := 0; 
        ELSE
                VAR_BASE_INCORRECTA := DETERMINAR_RECLAMACION_FR.BENEFICIOS_INCO
RRECTOS0;
{VAR_BASE_INCORRECTA := BASE_INCORRECTA_NOPARA2_DSD.BENEFICIOS_INCORRECTOS;}
{       DEBUG_LOG(TO_CHAR( DETERMINAR_RECLAMACION_FR.BENEFICIOS_INCORRECTOS0));}
        DEBUG_LOG(TO_CHAR( BASE_INCORRECTA_NOPARA2_DSD.BENEFICIOS_INCORRECTOS));

{       IF (TO_CHAR(BASE_CORRECTA_NOPARA2_DSD.BENEFICIOS_CORRECTOS) = '') THEN}
        IF (TO_CHAR(DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS) = '') THEN
                VAR_BASE_CORRECTA := 0; 
        ELSE
                VAR_BASE_CORRECTA := DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORREC
TOS; 
  
        DEBUG_LOG(TO_CHAR(DETERMINAR_RECLAMACION_FR.BENEFICIOS_CORRECTOS));
        calculo_bases := VAR_BASE_INCORRECTA-VAR_BASE_CORRECTA;
        DEBUG_LOG(TO_CHAR(calculo_bases));

if ((calculo_bases <= 0) and (accion_gbl = 'RECL')) or ((calculo_bases <= 0) and
 (accion_gbl = 'RREC')) or
   ((calculo_bases >= 0) and (accion_gbl = 'RETR')) or ((calculo_bases >= 0) and
 (accion_gbl = 'RRET'))  
        then
           begin
        {db_delete(correcta_id,correcta_status);        
                db_delete(incorrecta_id,incorrecta_status);
                db_commit(correcta_id); 
                db_commit(incorrecta_id);}
                if (accion_gbl = 'RECL') or (accion_gbl = 'RREC') then
                        error(1106);
                else
                        error(1108);

                set_current_field(DETERMINAR_RECLAMACION_FR.PARK);
        end;{endif calculo bases}
{db_close(correcta_id,correcta_status);}
        db_close(incorrecta_id,incorrecta_status);
        call_cmd(qbe);
        call_cmd(query);
        
set_notrace();
end;
    



--------------------------------------------------------------------- */
